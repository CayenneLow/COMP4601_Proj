// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module create_codeword (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        symbol_bits_V_address0,
        symbol_bits_V_ce0,
        symbol_bits_V_q0,
        encoding_V_address0,
        encoding_V_ce0,
        encoding_V_we0,
        encoding_V_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] symbol_bits_V_address0;
output   symbol_bits_V_ce0;
input  [4:0] symbol_bits_V_q0;
output  [7:0] encoding_V_address0;
output   encoding_V_ce0;
output   encoding_V_we0;
output  [31:0] encoding_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] symbol_bits_V_address0;
reg symbol_bits_V_ce0;
reg[7:0] encoding_V_address0;
reg encoding_V_ce0;
reg encoding_V_we0;
reg[31:0] encoding_V_d0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_fu_234_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln17_fu_245_p2;
wire    ap_CS_fsm_state3;
wire   [8:0] i_3_fu_251_p2;
reg   [8:0] i_3_reg_457;
reg   [4:0] codeword_length_hist_2_reg_467;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln26_fu_274_p2;
wire   [4:0] i_4_fu_320_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln42_fu_326_p2;
reg   [0:0] icmp_ln42_reg_490;
wire    ap_CS_fsm_state9;
wire   [8:0] i_5_fu_332_p2;
reg   [8:0] i_5_reg_494;
wire   [63:0] zext_ln44_fu_338_p1;
reg   [63:0] zext_ln44_reg_499;
reg   [4:0] length_V_reg_510;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln883_fu_343_p2;
reg   [0:0] icmp_ln883_reg_516;
reg   [4:0] first_codeword_V_add_3_reg_520;
wire   [21:0] select_ln796_fu_419_p3;
reg   [21:0] select_ln796_reg_525;
wire    ap_CS_fsm_state11;
reg   [4:0] codeword_length_hist_address0;
reg    codeword_length_hist_ce0;
reg    codeword_length_hist_we0;
reg   [31:0] codeword_length_hist_d0;
wire   [31:0] codeword_length_hist_q0;
reg   [4:0] first_codeword_V_address0;
reg    first_codeword_V_ce0;
reg    first_codeword_V_we0;
reg   [26:0] first_codeword_V_d0;
wire   [26:0] first_codeword_V_q0;
reg   [4:0] i_0_reg_183;
wire   [0:0] icmp_ln13_fu_228_p2;
reg    ap_block_state1;
reg   [8:0] i1_0_reg_194;
wire    ap_CS_fsm_state5;
reg   [4:0] i3_0_reg_205;
reg   [8:0] i4_0_reg_217;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln14_fu_240_p1;
wire   [63:0] zext_ln18_fu_257_p1;
wire   [63:0] zext_ln19_fu_262_p1;
wire   [63:0] zext_ln28_1_fu_286_p1;
wire   [63:0] zext_ln28_fu_292_p1;
wire   [63:0] zext_ln544_fu_349_p1;
wire   [7:0] encoding_V_addr_1_gep_fu_175_p3;
wire   [31:0] add_ln700_fu_267_p2;
wire   [26:0] shl_ln_fu_311_p3;
wire   [26:0] add_ln700_3_fu_427_p2;
wire   [31:0] zext_ln209_fu_440_p1;
wire   [4:0] add_ln28_fu_280_p2;
wire   [25:0] trunc_ln1503_fu_297_p1;
wire   [25:0] trunc_ln1503_1_fu_301_p1;
wire   [25:0] add_ln1503_fu_305_p2;
wire   [5:0] zext_ln215_fu_364_p1;
wire   [5:0] ret_V_fu_367_p2;
wire   [2:0] trunc_ln790_fu_381_p1;
wire   [2:0] sub_ln556_fu_385_p2;
reg   [26:0] p_Result_s_fu_354_p4;
wire   [26:0] zext_ln556_fu_391_p1;
wire   [26:0] zext_ln808_fu_401_p1;
wire   [26:0] r_V_fu_395_p2;
wire   [26:0] lshr_ln808_fu_405_p2;
wire   [0:0] p_Result_1_fu_373_p3;
wire   [21:0] trunc_ln796_fu_411_p1;
wire   [21:0] trunc_ln796_1_fu_415_p1;
wire   [26:0] tmp_2_fu_434_p3;
wire    ap_CS_fsm_state13;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
end

create_codeword_ckbM #(
    .DataWidth( 32 ),
    .AddressRange( 27 ),
    .AddressWidth( 5 ))
codeword_length_hist_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(codeword_length_hist_address0),
    .ce0(codeword_length_hist_ce0),
    .we0(codeword_length_hist_we0),
    .d0(codeword_length_hist_d0),
    .q0(codeword_length_hist_q0)
);

create_codeword_flbW #(
    .DataWidth( 27 ),
    .AddressRange( 27 ),
    .AddressWidth( 5 ))
first_codeword_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(first_codeword_V_address0),
    .ce0(first_codeword_V_ce0),
    .we0(first_codeword_V_we0),
    .d0(first_codeword_V_d0),
    .q0(first_codeword_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_228_p2 == 1'd1))) begin
        i1_0_reg_194 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i1_0_reg_194 <= i_3_reg_457;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i3_0_reg_205 <= i_4_fu_320_p2;
    end else if (((icmp_ln17_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i3_0_reg_205 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i4_0_reg_217 <= 9'd0;
    end else if (((icmp_ln42_reg_490 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        i4_0_reg_217 <= i_5_reg_494;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_183 <= 5'd0;
    end else if (((icmp_ln13_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_183 <= i_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        codeword_length_hist_2_reg_467 <= zext_ln19_fu_262_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        first_codeword_V_add_3_reg_520 <= zext_ln544_fu_349_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_3_reg_457 <= i_3_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_5_reg_494 <= i_5_fu_332_p2;
        icmp_ln42_reg_490 <= icmp_ln42_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        icmp_ln883_reg_516 <= icmp_ln883_fu_343_p2;
        length_V_reg_510 <= symbol_bits_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_reg_490 == 1'd0) & (icmp_ln883_reg_516 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        select_ln796_reg_525 <= select_ln796_fu_419_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_326_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        zext_ln44_reg_499[8 : 0] <= zext_ln44_fu_338_p1[8 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        codeword_length_hist_address0 = zext_ln28_1_fu_286_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        codeword_length_hist_address0 = codeword_length_hist_2_reg_467;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        codeword_length_hist_address0 = zext_ln19_fu_262_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        codeword_length_hist_address0 = zext_ln14_fu_240_p1;
    end else begin
        codeword_length_hist_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        codeword_length_hist_ce0 = 1'b1;
    end else begin
        codeword_length_hist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        codeword_length_hist_d0 = add_ln700_fu_267_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        codeword_length_hist_d0 = 32'd0;
    end else begin
        codeword_length_hist_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln13_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        codeword_length_hist_we0 = 1'b1;
    end else begin
        codeword_length_hist_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        encoding_V_address0 = encoding_V_addr_1_gep_fu_175_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        encoding_V_address0 = zext_ln44_reg_499;
    end else begin
        encoding_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        encoding_V_ce0 = 1'b1;
    end else begin
        encoding_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        encoding_V_d0 = zext_ln209_fu_440_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        encoding_V_d0 = 32'd0;
    end else begin
        encoding_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln42_reg_490 == 1'd0) & (icmp_ln883_reg_516 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln883_fu_343_p2 == 1'd1)))) begin
        encoding_V_we0 = 1'b1;
    end else begin
        encoding_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        first_codeword_V_address0 = first_codeword_V_add_3_reg_520;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        first_codeword_V_address0 = zext_ln544_fu_349_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        first_codeword_V_address0 = zext_ln28_fu_292_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        first_codeword_V_address0 = zext_ln28_1_fu_286_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        first_codeword_V_address0 = 64'd0;
    end else begin
        first_codeword_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        first_codeword_V_ce0 = 1'b1;
    end else begin
        first_codeword_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        first_codeword_V_d0 = add_ln700_3_fu_427_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        first_codeword_V_d0 = shl_ln_fu_311_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        first_codeword_V_d0 = 27'd0;
    end else begin
        first_codeword_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln17_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln42_reg_490 == 1'd0) & (icmp_ln883_reg_516 == 1'd0) & (1'b1 == ap_CS_fsm_state11)))) begin
        first_codeword_V_we0 = 1'b1;
    end else begin
        first_codeword_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        symbol_bits_V_address0 = zext_ln44_fu_338_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        symbol_bits_V_address0 = zext_ln18_fu_257_p1;
    end else begin
        symbol_bits_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9))) begin
        symbol_bits_V_ce0 = 1'b1;
    end else begin
        symbol_bits_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_228_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln17_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln26_fu_274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln42_fu_326_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1503_fu_305_p2 = (trunc_ln1503_fu_297_p1 + trunc_ln1503_1_fu_301_p1);

assign add_ln28_fu_280_p2 = ($signed(5'd31) + $signed(i3_0_reg_205));

assign add_ln700_3_fu_427_p2 = (27'd1 + first_codeword_V_q0);

assign add_ln700_fu_267_p2 = (codeword_length_hist_q0 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign encoding_V_addr_1_gep_fu_175_p3 = zext_ln44_reg_499;

assign i_3_fu_251_p2 = (i1_0_reg_194 + 9'd1);

assign i_4_fu_320_p2 = (5'd1 + i3_0_reg_205);

assign i_5_fu_332_p2 = (i4_0_reg_217 + 9'd1);

assign i_fu_234_p2 = (i_0_reg_183 + 5'd1);

assign icmp_ln13_fu_228_p2 = ((i_0_reg_183 == 5'd27) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_245_p2 = ((i1_0_reg_194 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_274_p2 = ((i3_0_reg_205 == 5'd27) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_326_p2 = ((i4_0_reg_217 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln883_fu_343_p2 = ((symbol_bits_V_q0 == 5'd0) ? 1'b1 : 1'b0);

assign lshr_ln808_fu_405_p2 = p_Result_s_fu_354_p4 >> zext_ln808_fu_401_p1;

assign p_Result_1_fu_373_p3 = ret_V_fu_367_p2[32'd5];

integer ap_tvar_int_0;

always @ (first_codeword_V_q0) begin
    for (ap_tvar_int_0 = 27 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 26 - 0) begin
            p_Result_s_fu_354_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_354_p4[ap_tvar_int_0] = first_codeword_V_q0[26 - ap_tvar_int_0];
        end
    end
end

assign r_V_fu_395_p2 = p_Result_s_fu_354_p4 << zext_ln556_fu_391_p1;

assign ret_V_fu_367_p2 = (6'd27 - zext_ln215_fu_364_p1);

assign select_ln796_fu_419_p3 = ((p_Result_1_fu_373_p3[0:0] === 1'b1) ? trunc_ln796_fu_411_p1 : trunc_ln796_1_fu_415_p1);

assign shl_ln_fu_311_p3 = {{add_ln1503_fu_305_p2}, {1'd0}};

assign sub_ln556_fu_385_p2 = (3'd0 - trunc_ln790_fu_381_p1);

assign tmp_2_fu_434_p3 = {{select_ln796_reg_525}, {length_V_reg_510}};

assign trunc_ln1503_1_fu_301_p1 = first_codeword_V_q0[25:0];

assign trunc_ln1503_fu_297_p1 = codeword_length_hist_q0[25:0];

assign trunc_ln790_fu_381_p1 = ret_V_fu_367_p2[2:0];

assign trunc_ln796_1_fu_415_p1 = lshr_ln808_fu_405_p2[21:0];

assign trunc_ln796_fu_411_p1 = r_V_fu_395_p2[21:0];

assign zext_ln14_fu_240_p1 = i_0_reg_183;

assign zext_ln18_fu_257_p1 = i1_0_reg_194;

assign zext_ln19_fu_262_p1 = symbol_bits_V_q0;

assign zext_ln209_fu_440_p1 = tmp_2_fu_434_p3;

assign zext_ln215_fu_364_p1 = length_V_reg_510;

assign zext_ln28_1_fu_286_p1 = add_ln28_fu_280_p2;

assign zext_ln28_fu_292_p1 = i3_0_reg_205;

assign zext_ln44_fu_338_p1 = i4_0_reg_217;

assign zext_ln544_fu_349_p1 = symbol_bits_V_q0;

assign zext_ln556_fu_391_p1 = sub_ln556_fu_385_p2;

assign zext_ln808_fu_401_p1 = ret_V_fu_367_p2;

always @ (posedge ap_clk) begin
    zext_ln44_reg_499[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //create_codeword
