// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _compute_bit_length_HH_
#define _compute_bit_length_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "compute_bit_lengtibs.h"
#include "compute_bit_lengtjbC.h"

namespace ap_rtl {

struct compute_bit_length : public sc_module {
    // Port declarations 26
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > parent_V_address0;
    sc_out< sc_logic > parent_V_ce0;
    sc_in< sc_lv<31> > parent_V_q0;
    sc_out< sc_lv<8> > left_V_address0;
    sc_out< sc_logic > left_V_ce0;
    sc_in< sc_lv<32> > left_V_q0;
    sc_out< sc_lv<8> > right_V_address0;
    sc_out< sc_logic > right_V_ce0;
    sc_in< sc_lv<32> > right_V_q0;
    sc_in< sc_lv<32> > val_assign_loc_dout;
    sc_in< sc_logic > val_assign_loc_empty_n;
    sc_out< sc_logic > val_assign_loc_read;
    sc_out< sc_lv<6> > length_histogram_V_address0;
    sc_out< sc_logic > length_histogram_V_ce0;
    sc_out< sc_logic > length_histogram_V_we0;
    sc_out< sc_lv<32> > length_histogram_V_d0;
    sc_out< sc_lv<32> > val_assign_loc_out_din;
    sc_in< sc_logic > val_assign_loc_out_full_n;
    sc_out< sc_logic > val_assign_loc_out_write;


    // Module declarations
    compute_bit_length(sc_module_name name);
    SC_HAS_PROCESS(compute_bit_length);

    ~compute_bit_length();

    sc_trace_file* mVcdFile;

    compute_bit_lengtibs* child_depth_V_U;
    compute_bit_lengtjbC* internal_length_hist_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > val_assign_loc_blk_n;
    sc_signal< sc_logic > val_assign_loc_out_blk_n;
    sc_signal< sc_lv<32> > i2_0_i_i_reg_210;
    sc_signal< sc_lv<32> > val_assign_loc_read_reg_326;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<7> > i_6_fu_239_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > i_fu_260_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_fu_265_p3;
    sc_signal< sc_lv<1> > tmp_reg_345;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state4_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state7_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<64> > zext_ln24_fu_273_p1;
    sc_signal< sc_lv<64> > zext_ln24_reg_349;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage1;
    sc_signal< bool > ap_block_state5_pp1_stage1_iter0;
    sc_signal< bool > ap_block_state8_pp1_stage1_iter1;
    sc_signal< bool > ap_block_pp1_stage1_11001;
    sc_signal< sc_lv<1> > icmp_ln883_fu_285_p2;
    sc_signal< sc_lv<1> > icmp_ln883_reg_374;
    sc_signal< sc_lv<1> > icmp_ln883_1_fu_291_p2;
    sc_signal< sc_lv<1> > icmp_ln883_1_reg_378;
    sc_signal< sc_lv<64> > zext_ln544_8_fu_304_p1;
    sc_signal< sc_lv<64> > zext_ln544_8_reg_382;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage2;
    sc_signal< bool > ap_block_state6_pp1_stage2_iter0;
    sc_signal< bool > ap_block_pp1_stage2_11001;
    sc_signal< sc_lv<6> > internal_length_hist_2_reg_387;
    sc_signal< sc_lv<32> > i_7_fu_309_p2;
    sc_signal< sc_lv<32> > i_7_reg_392;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<32> > internal_length_hist_q0;
    sc_signal< sc_lv<32> > count_V_reg_397;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state4;
    sc_signal< bool > ap_block_pp1_stage2_subdone;
    sc_signal< bool > ap_block_pp1_stage1_subdone;
    sc_signal< sc_lv<8> > child_depth_V_address0;
    sc_signal< sc_logic > child_depth_V_ce0;
    sc_signal< sc_logic > child_depth_V_we0;
    sc_signal< sc_lv<6> > child_depth_V_d0;
    sc_signal< sc_lv<6> > child_depth_V_q0;
    sc_signal< sc_lv<6> > internal_length_hist_address0;
    sc_signal< sc_logic > internal_length_hist_ce0;
    sc_signal< sc_logic > internal_length_hist_we0;
    sc_signal< sc_lv<32> > internal_length_hist_d0;
    sc_signal< sc_lv<7> > i_0_i_i_reg_199;
    sc_signal< sc_lv<1> > icmp_ln14_fu_233_p2;
    sc_signal< sc_lv<32> > ap_phi_mux_i2_0_i_i_phi_fu_213_p4;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<2> > ap_phi_reg_pp1_iter0_op2_assign_reg_220;
    sc_signal< sc_lv<2> > ap_phi_reg_pp1_iter1_op2_assign_reg_220;
    sc_signal< sc_lv<64> > zext_ln16_fu_245_p1;
    sc_signal< sc_lv<64> > sext_ln19_fu_255_p1;
    sc_signal< sc_lv<64> > zext_ln544_fu_280_p1;
    sc_signal< bool > ap_block_pp1_stage1;
    sc_signal< bool > ap_block_pp1_stage2;
    sc_signal< sc_lv<32> > count_V_1_fu_319_p2;
    sc_signal< sc_lv<6> > length_V_fu_297_p2;
    sc_signal< sc_lv<32> > add_ln19_fu_250_p2;
    sc_signal< sc_lv<32> > zext_ln544_7_fu_315_p1;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_pp1_stage0;
    static const sc_lv<7> ap_ST_fsm_pp1_stage1;
    static const sc_lv<7> ap_ST_fsm_pp1_stage2;
    static const sc_lv<7> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<32> ap_const_lv32_FFFFFFFE;
    static const sc_lv<32> ap_const_lv32_FFFFFFFD;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<32> ap_const_lv32_6;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln19_fu_250_p2();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp1_stage1();
    void thread_ap_CS_fsm_pp1_stage2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp1_stage1();
    void thread_ap_block_pp1_stage1_11001();
    void thread_ap_block_pp1_stage1_subdone();
    void thread_ap_block_pp1_stage2();
    void thread_ap_block_pp1_stage2_11001();
    void thread_ap_block_pp1_stage2_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state4_pp1_stage0_iter0();
    void thread_ap_block_state5_pp1_stage1_iter0();
    void thread_ap_block_state6_pp1_stage2_iter0();
    void thread_ap_block_state7_pp1_stage0_iter1();
    void thread_ap_block_state8_pp1_stage1_iter1();
    void thread_ap_condition_pp1_exit_iter0_state4();
    void thread_ap_done();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_i2_0_i_i_phi_fu_213_p4();
    void thread_ap_phi_reg_pp1_iter0_op2_assign_reg_220();
    void thread_ap_ready();
    void thread_child_depth_V_address0();
    void thread_child_depth_V_ce0();
    void thread_child_depth_V_d0();
    void thread_child_depth_V_we0();
    void thread_count_V_1_fu_319_p2();
    void thread_i_6_fu_239_p2();
    void thread_i_7_fu_309_p2();
    void thread_i_fu_260_p2();
    void thread_icmp_ln14_fu_233_p2();
    void thread_icmp_ln883_1_fu_291_p2();
    void thread_icmp_ln883_fu_285_p2();
    void thread_internal_length_hist_address0();
    void thread_internal_length_hist_ce0();
    void thread_internal_length_hist_d0();
    void thread_internal_length_hist_we0();
    void thread_left_V_address0();
    void thread_left_V_ce0();
    void thread_length_V_fu_297_p2();
    void thread_length_histogram_V_address0();
    void thread_length_histogram_V_ce0();
    void thread_length_histogram_V_d0();
    void thread_length_histogram_V_we0();
    void thread_parent_V_address0();
    void thread_parent_V_ce0();
    void thread_right_V_address0();
    void thread_right_V_ce0();
    void thread_sext_ln19_fu_255_p1();
    void thread_tmp_fu_265_p3();
    void thread_val_assign_loc_blk_n();
    void thread_val_assign_loc_out_blk_n();
    void thread_val_assign_loc_out_din();
    void thread_val_assign_loc_out_write();
    void thread_val_assign_loc_read();
    void thread_zext_ln16_fu_245_p1();
    void thread_zext_ln24_fu_273_p1();
    void thread_zext_ln544_7_fu_315_p1();
    void thread_zext_ln544_8_fu_304_p1();
    void thread_zext_ln544_fu_280_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
