-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity truncate_tree is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_length_histogram_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_length_histogram_V_ce0 : OUT STD_LOGIC;
    input_length_histogram_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_length_histogram1_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_length_histogram1_V_ce0 : OUT STD_LOGIC;
    output_length_histogram1_V_we0 : OUT STD_LOGIC;
    output_length_histogram1_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_length_histogram1_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_length_histogram1_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_length_histogram1_V_ce1 : OUT STD_LOGIC;
    output_length_histogram1_V_we1 : OUT STD_LOGIC;
    output_length_histogram1_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_length_histogram1_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of truncate_tree is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_185_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_306 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln11_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_reg_311 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln10_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_length_histog_1_reg_332 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln16_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_212_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_337 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_length_histog_2_reg_342 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln879_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_350 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_V_reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal output_length_histog_6_reg_368 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal output_length_histog_8_reg_374 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_reg_127 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_0_reg_138 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_V_reg_149 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln19_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_V_2_fu_54 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_V_3_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln701_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln700_1_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln701_1_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln215_fu_249_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_fu_253_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln16_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_138 <= ap_const_lv6_3F;
            elsif (((grp_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i1_0_reg_138 <= i_1_reg_337;
            end if; 
        end if;
    end process;

    i_0_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_127 <= i_reg_306;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_127 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_V_2_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_V_2_fu_54 <= j_V_3_fu_264_p2;
            elsif (((icmp_ln879_reg_350 = ap_const_lv1_1) and (grp_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                j_V_2_fu_54 <= j_V_reg_354;
            elsif (((icmp_ln10_fu_179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_V_2_fu_54 <= ap_const_lv32_1B;
            end if; 
        end if;
    end process;

    reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_169 <= output_length_histogram1_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_169 <= output_length_histogram1_V_q0;
            end if; 
        end if;
    end process;

    reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_174 <= output_length_histogram1_V_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_174 <= output_length_histogram1_V_q1;
            end if; 
        end if;
    end process;

    t_V_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln879_fu_223_p2 = ap_const_lv1_1) and (grp_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                t_V_reg_149 <= ap_const_lv32_1B;
            elsif (((icmp_ln879_reg_350 = ap_const_lv1_1) and (grp_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_V_reg_149 <= j_V_reg_354;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                i_1_reg_337 <= i_1_fu_212_p2;
                output_length_histog_1_reg_332 <= zext_ln19_fu_207_p1(6 - 1 downto 0);
                output_length_histog_2_reg_342 <= zext_ln32_fu_218_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_306 <= i_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                icmp_ln879_reg_350 <= icmp_ln879_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_V_reg_354 <= j_V_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                output_length_histog_6_reg_368 <= zext_ln544_1_fu_244_p1(6 - 1 downto 0);
                output_length_histog_8_reg_374 <= zext_ln544_2_fu_259_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln11_reg_311(6 downto 0) <= zext_ln11_fu_191_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln11_reg_311(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_179_p2, ap_CS_fsm_state4, icmp_ln16_fu_201_p2, icmp_ln879_fu_223_p2, icmp_ln879_reg_350, ap_CS_fsm_state6, grp_fu_160_p2, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln16_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((icmp_ln879_fu_223_p2 = ap_const_lv1_1) and (grp_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln879_reg_350 = ap_const_lv1_0) or (grp_fu_160_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln700_1_fu_289_p2 <= std_logic_vector(unsigned(reg_169) + unsigned(ap_const_lv32_1));
    add_ln700_fu_282_p2 <= std_logic_vector(unsigned(reg_174) + unsigned(ap_const_lv32_2));
    add_ln701_1_fu_296_p2 <= std_logic_vector(unsigned(reg_174) + unsigned(ap_const_lv32_FFFFFFFE));
    add_ln701_fu_275_p2 <= std_logic_vector(unsigned(reg_169) + unsigned(ap_const_lv32_FFFFFFFF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4, icmp_ln16_fu_201_p2)
    begin
        if (((icmp_ln16_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln16_fu_201_p2)
    begin
        if (((icmp_ln16_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_160_p2 <= "1" when (output_length_histogram1_V_q0 = ap_const_lv32_0) else "0";
    i_1_fu_212_p2 <= std_logic_vector(unsigned(i1_0_reg_138) + unsigned(ap_const_lv6_3F));
    i_fu_185_p2 <= std_logic_vector(unsigned(i_0_reg_127) + unsigned(ap_const_lv7_1));
    icmp_ln10_fu_179_p2 <= "1" when (i_0_reg_127 = ap_const_lv7_40) else "0";
    icmp_ln16_fu_201_p2 <= "1" when (unsigned(i1_0_reg_138) > unsigned(ap_const_lv6_1B)) else "0";
    icmp_ln879_fu_223_p2 <= "1" when (j_V_2_fu_54 = ap_const_lv32_1B) else "0";
    input_length_histogram_V_address0 <= zext_ln11_fu_191_p1(6 - 1 downto 0);

    input_length_histogram_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_length_histogram_V_ce0 <= ap_const_logic_1;
        else 
            input_length_histogram_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_V_3_fu_264_p2 <= std_logic_vector(unsigned(j_V_2_fu_54) + unsigned(ap_const_lv32_1));
    j_V_fu_229_p2 <= std_logic_vector(unsigned(t_V_reg_149) + unsigned(ap_const_lv32_FFFFFFFF));

    output_length_histogram1_V_address0_assign_proc : process(zext_ln11_reg_311, output_length_histog_1_reg_332, ap_CS_fsm_state7, ap_CS_fsm_state9, output_length_histog_8_reg_374, ap_CS_fsm_state3, zext_ln544_fu_235_p1, zext_ln544_1_fu_244_p1, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_length_histogram1_V_address0 <= output_length_histog_8_reg_374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_length_histogram1_V_address0 <= zext_ln544_1_fu_244_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_length_histogram1_V_address0 <= zext_ln544_fu_235_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_length_histogram1_V_address0 <= output_length_histog_1_reg_332;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_length_histogram1_V_address0 <= zext_ln11_reg_311(6 - 1 downto 0);
        else 
            output_length_histogram1_V_address0 <= "XXXXXX";
        end if; 
    end process;


    output_length_histogram1_V_address1_assign_proc : process(output_length_histog_2_reg_342, output_length_histog_6_reg_368, ap_CS_fsm_state9, zext_ln544_2_fu_259_p1, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            output_length_histogram1_V_address1 <= output_length_histog_2_reg_342;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_length_histogram1_V_address1 <= output_length_histog_6_reg_368;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_length_histogram1_V_address1 <= zext_ln544_2_fu_259_p1(6 - 1 downto 0);
        else 
            output_length_histogram1_V_address1 <= "XXXXXX";
        end if; 
    end process;


    output_length_histogram1_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_length_histogram1_V_ce0 <= ap_const_logic_1;
        else 
            output_length_histogram1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_length_histogram1_V_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_length_histogram1_V_ce1 <= ap_const_logic_1;
        else 
            output_length_histogram1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_length_histogram1_V_d0_assign_proc : process(input_length_histogram_V_q0, ap_CS_fsm_state3, ap_CS_fsm_state11, add_ln700_fu_282_p2, ap_CS_fsm_state14, add_ln701_1_fu_296_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_length_histogram1_V_d0 <= add_ln701_1_fu_296_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_length_histogram1_V_d0 <= add_ln700_fu_282_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_length_histogram1_V_d0 <= input_length_histogram_V_q0;
        else 
            output_length_histogram1_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_length_histogram1_V_d1_assign_proc : process(ap_CS_fsm_state11, add_ln701_fu_275_p2, ap_CS_fsm_state14, add_ln700_1_fu_289_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_length_histogram1_V_d1 <= add_ln700_1_fu_289_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_length_histogram1_V_d1 <= add_ln701_fu_275_p2;
        else 
            output_length_histogram1_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_length_histogram1_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_length_histogram1_V_we0 <= ap_const_logic_1;
        else 
            output_length_histogram1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_length_histogram1_V_we1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            output_length_histogram1_V_we1 <= ap_const_logic_1;
        else 
            output_length_histogram1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_253_p2 <= std_logic_vector(unsigned(zext_ln215_fu_249_p1) + unsigned(ap_const_lv33_1));
    zext_ln11_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_127),64));
    zext_ln19_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_138),64));
    zext_ln215_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_V_2_fu_54),33));
    zext_ln32_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_212_p2),64));
    zext_ln544_1_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_V_2_fu_54),64));
    zext_ln544_2_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_253_p2),64));
    zext_ln544_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_V_fu_229_p2),64));
end behav;
