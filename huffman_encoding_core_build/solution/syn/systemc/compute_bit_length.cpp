// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "compute_bit_length.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic compute_bit_length::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic compute_bit_length::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> compute_bit_length::ap_ST_fsm_state1 = "1";
const sc_lv<7> compute_bit_length::ap_ST_fsm_state2 = "10";
const sc_lv<7> compute_bit_length::ap_ST_fsm_state3 = "100";
const sc_lv<7> compute_bit_length::ap_ST_fsm_state4 = "1000";
const sc_lv<7> compute_bit_length::ap_ST_fsm_state5 = "10000";
const sc_lv<7> compute_bit_length::ap_ST_fsm_state6 = "100000";
const sc_lv<7> compute_bit_length::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> compute_bit_length::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> compute_bit_length::ap_const_lv32_1 = "1";
const sc_lv<1> compute_bit_length::ap_const_lv1_1 = "1";
const sc_lv<32> compute_bit_length::ap_const_lv32_2 = "10";
const sc_lv<1> compute_bit_length::ap_const_lv1_0 = "0";
const sc_lv<32> compute_bit_length::ap_const_lv32_3 = "11";
const sc_lv<32> compute_bit_length::ap_const_lv32_4 = "100";
const sc_lv<32> compute_bit_length::ap_const_lv32_5 = "101";
const sc_lv<32> compute_bit_length::ap_const_lv32_6 = "110";
const sc_lv<7> compute_bit_length::ap_const_lv7_0 = "0000000";
const sc_lv<2> compute_bit_length::ap_const_lv2_1 = "1";
const sc_lv<2> compute_bit_length::ap_const_lv2_2 = "10";
const sc_lv<6> compute_bit_length::ap_const_lv6_1 = "1";
const sc_lv<7> compute_bit_length::ap_const_lv7_40 = "1000000";
const sc_lv<7> compute_bit_length::ap_const_lv7_1 = "1";
const sc_lv<32> compute_bit_length::ap_const_lv32_FFFFFFFE = "11111111111111111111111111111110";
const sc_lv<32> compute_bit_length::ap_const_lv32_FFFFFFFD = "11111111111111111111111111111101";
const sc_lv<32> compute_bit_length::ap_const_lv32_1F = "11111";
const sc_lv<32> compute_bit_length::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const bool compute_bit_length::ap_const_boolean_1 = true;

compute_bit_length::compute_bit_length(sc_module_name name) : sc_module(name), mVcdFile(0) {
    child_depth_V_U = new compute_bit_lengtjbC("child_depth_V_U");
    child_depth_V_U->clk(ap_clk);
    child_depth_V_U->reset(ap_rst);
    child_depth_V_U->address0(child_depth_V_address0);
    child_depth_V_U->ce0(child_depth_V_ce0);
    child_depth_V_U->we0(child_depth_V_we0);
    child_depth_V_U->d0(child_depth_V_d0);
    child_depth_V_U->q0(child_depth_V_q0);
    internal_length_hist_U = new compute_bit_lengtkbM("internal_length_hist_U");
    internal_length_hist_U->clk(ap_clk);
    internal_length_hist_U->reset(ap_rst);
    internal_length_hist_U->address0(internal_length_hist_address0);
    internal_length_hist_U->ce0(internal_length_hist_ce0);
    internal_length_hist_U->we0(internal_length_hist_we0);
    internal_length_hist_U->d0(internal_length_hist_d0);
    internal_length_hist_U->q0(internal_length_hist_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln19_fu_222_p2);
    sensitive << ( num_symbols );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_158);
    sensitive << ( icmp_ln883_fu_262_p2 );
    sensitive << ( icmp_ln883_1_fu_268_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_237_p3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_237_p3 );

    SC_METHOD(thread_child_depth_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln24_reg_318 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( sext_ln19_fu_227_p1 );
    sensitive << ( zext_ln544_fu_250_p1 );

    SC_METHOD(thread_child_depth_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_child_depth_V_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( length_V_fu_255_p2 );

    SC_METHOD(thread_child_depth_V_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln14_fu_205_p2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_count_V_2_fu_283_p2);
    sensitive << ( count_V_reg_363 );
    sensitive << ( zext_ln544_10_fu_279_p1 );

    SC_METHOD(thread_i_7_fu_211_p2);
    sensitive << ( i_0_reg_171 );

    SC_METHOD(thread_i_8_fu_290_p2);
    sensitive << ( i2_0_reg_182 );

    SC_METHOD(thread_i_fu_232_p2);
    sensitive << ( num_symbols );

    SC_METHOD(thread_icmp_ln14_fu_205_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_171 );

    SC_METHOD(thread_icmp_ln883_1_fu_268_p2);
    sensitive << ( right_V_q0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_icmp_ln883_fu_262_p2);
    sensitive << ( left_V_q0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_internal_length_hist_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln544_9_fu_274_p1 );
    sensitive << ( internal_length_hist_2_reg_358 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln16_fu_217_p1 );

    SC_METHOD(thread_internal_length_hist_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_internal_length_hist_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( count_V_2_fu_283_p2 );

    SC_METHOD(thread_internal_length_hist_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln14_fu_205_p2 );
    sensitive << ( icmp_ln883_reg_345 );
    sensitive << ( icmp_ln883_1_reg_349 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_left_V_address0);
    sensitive << ( zext_ln24_reg_318 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_left_V_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_length_V_fu_255_p2);
    sensitive << ( child_depth_V_q0 );

    SC_METHOD(thread_length_histogram_V_address0);
    sensitive << ( zext_ln544_9_reg_353 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_length_histogram_V_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_length_histogram_V_d0);
    sensitive << ( count_V_reg_363 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln544_10_fu_279_p1 );

    SC_METHOD(thread_length_histogram_V_we0);
    sensitive << ( icmp_ln883_reg_345 );
    sensitive << ( icmp_ln883_1_reg_349 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_parent_V_address0);
    sensitive << ( zext_ln24_fu_245_p1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_parent_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_right_V_address0);
    sensitive << ( zext_ln24_reg_318 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_right_V_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sext_ln19_fu_227_p1);
    sensitive << ( add_ln19_fu_222_p2 );

    SC_METHOD(thread_tmp_2_fu_237_p3);
    sensitive << ( i2_0_reg_182 );

    SC_METHOD(thread_zext_ln16_fu_217_p1);
    sensitive << ( i_0_reg_171 );

    SC_METHOD(thread_zext_ln24_fu_245_p1);
    sensitive << ( i2_0_reg_182 );

    SC_METHOD(thread_zext_ln544_10_fu_279_p1);
    sensitive << ( op2_assign_reg_192 );

    SC_METHOD(thread_zext_ln544_9_fu_274_p1);
    sensitive << ( length_V_fu_255_p2 );

    SC_METHOD(thread_zext_ln544_fu_250_p1);
    sensitive << ( parent_V_q0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln14_fu_205_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_237_p3 );
    sensitive << ( icmp_ln883_fu_262_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln883_1_fu_268_p2 );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "compute_bit_length_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, parent_V_address0, "(port)parent_V_address0");
    sc_trace(mVcdFile, parent_V_ce0, "(port)parent_V_ce0");
    sc_trace(mVcdFile, parent_V_q0, "(port)parent_V_q0");
    sc_trace(mVcdFile, left_V_address0, "(port)left_V_address0");
    sc_trace(mVcdFile, left_V_ce0, "(port)left_V_ce0");
    sc_trace(mVcdFile, left_V_q0, "(port)left_V_q0");
    sc_trace(mVcdFile, right_V_address0, "(port)right_V_address0");
    sc_trace(mVcdFile, right_V_ce0, "(port)right_V_ce0");
    sc_trace(mVcdFile, right_V_q0, "(port)right_V_q0");
    sc_trace(mVcdFile, num_symbols, "(port)num_symbols");
    sc_trace(mVcdFile, length_histogram_V_address0, "(port)length_histogram_V_address0");
    sc_trace(mVcdFile, length_histogram_V_ce0, "(port)length_histogram_V_ce0");
    sc_trace(mVcdFile, length_histogram_V_we0, "(port)length_histogram_V_we0");
    sc_trace(mVcdFile, length_histogram_V_d0, "(port)length_histogram_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_7_fu_211_p2, "i_7_fu_211_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_232_p2, "i_fu_232_p2");
    sc_trace(mVcdFile, icmp_ln14_fu_205_p2, "icmp_ln14_fu_205_p2");
    sc_trace(mVcdFile, zext_ln24_fu_245_p1, "zext_ln24_fu_245_p1");
    sc_trace(mVcdFile, zext_ln24_reg_318, "zext_ln24_reg_318");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_2_fu_237_p3, "tmp_2_fu_237_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln883_fu_262_p2, "icmp_ln883_fu_262_p2");
    sc_trace(mVcdFile, icmp_ln883_reg_345, "icmp_ln883_reg_345");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln883_1_fu_268_p2, "icmp_ln883_1_fu_268_p2");
    sc_trace(mVcdFile, icmp_ln883_1_reg_349, "icmp_ln883_1_reg_349");
    sc_trace(mVcdFile, zext_ln544_9_fu_274_p1, "zext_ln544_9_fu_274_p1");
    sc_trace(mVcdFile, zext_ln544_9_reg_353, "zext_ln544_9_reg_353");
    sc_trace(mVcdFile, internal_length_hist_2_reg_358, "internal_length_hist_2_reg_358");
    sc_trace(mVcdFile, internal_length_hist_q0, "internal_length_hist_q0");
    sc_trace(mVcdFile, count_V_reg_363, "count_V_reg_363");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_8_fu_290_p2, "i_8_fu_290_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, child_depth_V_address0, "child_depth_V_address0");
    sc_trace(mVcdFile, child_depth_V_ce0, "child_depth_V_ce0");
    sc_trace(mVcdFile, child_depth_V_we0, "child_depth_V_we0");
    sc_trace(mVcdFile, child_depth_V_d0, "child_depth_V_d0");
    sc_trace(mVcdFile, child_depth_V_q0, "child_depth_V_q0");
    sc_trace(mVcdFile, internal_length_hist_address0, "internal_length_hist_address0");
    sc_trace(mVcdFile, internal_length_hist_ce0, "internal_length_hist_ce0");
    sc_trace(mVcdFile, internal_length_hist_we0, "internal_length_hist_we0");
    sc_trace(mVcdFile, internal_length_hist_d0, "internal_length_hist_d0");
    sc_trace(mVcdFile, i_0_reg_171, "i_0_reg_171");
    sc_trace(mVcdFile, i2_0_reg_182, "i2_0_reg_182");
    sc_trace(mVcdFile, op2_assign_reg_192, "op2_assign_reg_192");
    sc_trace(mVcdFile, zext_ln16_fu_217_p1, "zext_ln16_fu_217_p1");
    sc_trace(mVcdFile, sext_ln19_fu_227_p1, "sext_ln19_fu_227_p1");
    sc_trace(mVcdFile, zext_ln544_fu_250_p1, "zext_ln544_fu_250_p1");
    sc_trace(mVcdFile, count_V_2_fu_283_p2, "count_V_2_fu_283_p2");
    sc_trace(mVcdFile, length_V_fu_255_p2, "length_V_fu_255_p2");
    sc_trace(mVcdFile, add_ln19_fu_222_p2, "add_ln19_fu_222_p2");
    sc_trace(mVcdFile, zext_ln544_10_fu_279_p1, "zext_ln544_10_fu_279_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_158, "ap_condition_158");
#endif

    }
}

compute_bit_length::~compute_bit_length() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete child_depth_V_U;
    delete internal_length_hist_U;
}

void compute_bit_length::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i2_0_reg_182 = i_8_fu_290_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln14_fu_205_p2.read(), ap_const_lv1_1))) {
        i2_0_reg_182 = i_fu_232_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_171 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln14_fu_205_p2.read(), ap_const_lv1_0))) {
        i_0_reg_171 = i_7_fu_211_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_1_fu_268_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_fu_262_p2.read()))) {
            op2_assign_reg_192 = ap_const_lv2_2;
        } else if (esl_seteq<1,1,1>(ap_condition_158.read(), ap_const_boolean_1)) {
            op2_assign_reg_192 = ap_const_lv2_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        count_V_reg_363 = internal_length_hist_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        icmp_ln883_1_reg_349 = icmp_ln883_1_fu_268_p2.read();
        icmp_ln883_reg_345 = icmp_ln883_fu_262_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_1_fu_268_p2.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_fu_262_p2.read())))) {
        internal_length_hist_2_reg_358 =  (sc_lv<6>) (zext_ln544_9_fu_274_p1.read());
        zext_ln544_9_reg_353 = zext_ln544_9_fu_274_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_2_fu_237_p3.read(), ap_const_lv1_0))) {
        zext_ln24_reg_318 = zext_ln24_fu_245_p1.read();
    }
}

void compute_bit_length::thread_add_ln19_fu_222_p2() {
    add_ln19_fu_222_p2 = (!num_symbols.read().is_01() || !ap_const_lv32_FFFFFFFE.is_01())? sc_lv<32>(): (sc_biguint<32>(num_symbols.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFE));
}

void compute_bit_length::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void compute_bit_length::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void compute_bit_length::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void compute_bit_length::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void compute_bit_length::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void compute_bit_length::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void compute_bit_length::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void compute_bit_length::thread_ap_condition_158() {
    ap_condition_158 = ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_1_fu_268_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln883_fu_262_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_fu_262_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln883_1_fu_268_p2.read())));
}

void compute_bit_length::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_237_p3.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void compute_bit_length::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void compute_bit_length::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_237_p3.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void compute_bit_length::thread_child_depth_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        child_depth_V_address0 =  (sc_lv<8>) (zext_ln24_reg_318.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        child_depth_V_address0 =  (sc_lv<8>) (zext_ln544_fu_250_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        child_depth_V_address0 =  (sc_lv<8>) (sext_ln19_fu_227_p1.read());
    } else {
        child_depth_V_address0 = "XXXXXXXX";
    }
}

void compute_bit_length::thread_child_depth_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        child_depth_V_ce0 = ap_const_logic_1;
    } else {
        child_depth_V_ce0 = ap_const_logic_0;
    }
}

void compute_bit_length::thread_child_depth_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        child_depth_V_d0 = length_V_fu_255_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        child_depth_V_d0 = ap_const_lv6_1;
    } else {
        child_depth_V_d0 =  (sc_lv<6>) ("XXXXXX");
    }
}

void compute_bit_length::thread_child_depth_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln14_fu_205_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        child_depth_V_we0 = ap_const_logic_1;
    } else {
        child_depth_V_we0 = ap_const_logic_0;
    }
}

void compute_bit_length::thread_count_V_2_fu_283_p2() {
    count_V_2_fu_283_p2 = (!count_V_reg_363.read().is_01() || !zext_ln544_10_fu_279_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(count_V_reg_363.read()) + sc_biguint<32>(zext_ln544_10_fu_279_p1.read()));
}

void compute_bit_length::thread_i_7_fu_211_p2() {
    i_7_fu_211_p2 = (!i_0_reg_171.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_171.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void compute_bit_length::thread_i_8_fu_290_p2() {
    i_8_fu_290_p2 = (!i2_0_reg_182.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(i2_0_reg_182.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void compute_bit_length::thread_i_fu_232_p2() {
    i_fu_232_p2 = (!num_symbols.read().is_01() || !ap_const_lv32_FFFFFFFD.is_01())? sc_lv<32>(): (sc_biguint<32>(num_symbols.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFD));
}

void compute_bit_length::thread_icmp_ln14_fu_205_p2() {
    icmp_ln14_fu_205_p2 = (!i_0_reg_171.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_171.read() == ap_const_lv7_40);
}

void compute_bit_length::thread_icmp_ln883_1_fu_268_p2() {
    icmp_ln883_1_fu_268_p2 = (!right_V_q0.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<1>(): sc_lv<1>(right_V_q0.read() == ap_const_lv32_FFFFFFFF);
}

void compute_bit_length::thread_icmp_ln883_fu_262_p2() {
    icmp_ln883_fu_262_p2 = (!left_V_q0.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<1>(): sc_lv<1>(left_V_q0.read() == ap_const_lv32_FFFFFFFF);
}

void compute_bit_length::thread_internal_length_hist_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        internal_length_hist_address0 = internal_length_hist_2_reg_358.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        internal_length_hist_address0 =  (sc_lv<6>) (zext_ln544_9_fu_274_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        internal_length_hist_address0 =  (sc_lv<6>) (zext_ln16_fu_217_p1.read());
    } else {
        internal_length_hist_address0 =  (sc_lv<6>) ("XXXXXX");
    }
}

void compute_bit_length::thread_internal_length_hist_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        internal_length_hist_ce0 = ap_const_logic_1;
    } else {
        internal_length_hist_ce0 = ap_const_logic_0;
    }
}

void compute_bit_length::thread_internal_length_hist_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        internal_length_hist_d0 = count_V_2_fu_283_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        internal_length_hist_d0 = ap_const_lv32_0;
    } else {
        internal_length_hist_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void compute_bit_length::thread_internal_length_hist_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln14_fu_205_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_1_reg_349.read()) || 
           esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_reg_345.read()))))) {
        internal_length_hist_we0 = ap_const_logic_1;
    } else {
        internal_length_hist_we0 = ap_const_logic_0;
    }
}

void compute_bit_length::thread_left_V_address0() {
    left_V_address0 =  (sc_lv<8>) (zext_ln24_reg_318.read());
}

void compute_bit_length::thread_left_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        left_V_ce0 = ap_const_logic_1;
    } else {
        left_V_ce0 = ap_const_logic_0;
    }
}

void compute_bit_length::thread_length_V_fu_255_p2() {
    length_V_fu_255_p2 = (!child_depth_V_q0.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(child_depth_V_q0.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void compute_bit_length::thread_length_histogram_V_address0() {
    length_histogram_V_address0 =  (sc_lv<6>) (zext_ln544_9_reg_353.read());
}

void compute_bit_length::thread_length_histogram_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        length_histogram_V_ce0 = ap_const_logic_1;
    } else {
        length_histogram_V_ce0 = ap_const_logic_0;
    }
}

void compute_bit_length::thread_length_histogram_V_d0() {
    length_histogram_V_d0 = (!count_V_reg_363.read().is_01() || !zext_ln544_10_fu_279_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(count_V_reg_363.read()) + sc_biguint<32>(zext_ln544_10_fu_279_p1.read()));
}

void compute_bit_length::thread_length_histogram_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_1_reg_349.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln883_reg_345.read())))) {
        length_histogram_V_we0 = ap_const_logic_1;
    } else {
        length_histogram_V_we0 = ap_const_logic_0;
    }
}

void compute_bit_length::thread_parent_V_address0() {
    parent_V_address0 =  (sc_lv<8>) (zext_ln24_fu_245_p1.read());
}

void compute_bit_length::thread_parent_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        parent_V_ce0 = ap_const_logic_1;
    } else {
        parent_V_ce0 = ap_const_logic_0;
    }
}

void compute_bit_length::thread_right_V_address0() {
    right_V_address0 =  (sc_lv<8>) (zext_ln24_reg_318.read());
}

void compute_bit_length::thread_right_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        right_V_ce0 = ap_const_logic_1;
    } else {
        right_V_ce0 = ap_const_logic_0;
    }
}

void compute_bit_length::thread_sext_ln19_fu_227_p1() {
    sext_ln19_fu_227_p1 = esl_sext<64,32>(add_ln19_fu_222_p2.read());
}

void compute_bit_length::thread_tmp_2_fu_237_p3() {
    tmp_2_fu_237_p3 = i2_0_reg_182.read().range(31, 31);
}

void compute_bit_length::thread_zext_ln16_fu_217_p1() {
    zext_ln16_fu_217_p1 = esl_zext<64,7>(i_0_reg_171.read());
}

void compute_bit_length::thread_zext_ln24_fu_245_p1() {
    zext_ln24_fu_245_p1 = esl_zext<64,32>(i2_0_reg_182.read());
}

void compute_bit_length::thread_zext_ln544_10_fu_279_p1() {
    zext_ln544_10_fu_279_p1 = esl_zext<32,2>(op2_assign_reg_192.read());
}

void compute_bit_length::thread_zext_ln544_9_fu_274_p1() {
    zext_ln544_9_fu_274_p1 = esl_zext<64,6>(length_V_fu_255_p2.read());
}

void compute_bit_length::thread_zext_ln544_fu_250_p1() {
    zext_ln544_fu_250_p1 = esl_zext<64,31>(parent_V_q0.read());
}

void compute_bit_length::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln14_fu_205_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_237_p3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln883_fu_262_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln883_1_fu_268_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

}

