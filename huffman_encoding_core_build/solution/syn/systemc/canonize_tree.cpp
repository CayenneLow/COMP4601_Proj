// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "canonize_tree.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic canonize_tree::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic canonize_tree::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> canonize_tree::ap_ST_fsm_state1 = "1";
const sc_lv<6> canonize_tree::ap_ST_fsm_state2 = "10";
const sc_lv<6> canonize_tree::ap_ST_fsm_state3 = "100";
const sc_lv<6> canonize_tree::ap_ST_fsm_state4 = "1000";
const sc_lv<6> canonize_tree::ap_ST_fsm_pp0_stage0 = "10000";
const sc_lv<6> canonize_tree::ap_ST_fsm_state7 = "100000";
const sc_lv<32> canonize_tree::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool canonize_tree::ap_const_boolean_1 = true;
const sc_lv<32> canonize_tree::ap_const_lv32_1 = "1";
const sc_lv<32> canonize_tree::ap_const_lv32_2 = "10";
const sc_lv<32> canonize_tree::ap_const_lv32_3 = "11";
const sc_lv<32> canonize_tree::ap_const_lv32_4 = "100";
const bool canonize_tree::ap_const_boolean_0 = false;
const sc_lv<1> canonize_tree::ap_const_lv1_1 = "1";
const sc_lv<32> canonize_tree::ap_const_lv32_5 = "101";
const sc_lv<1> canonize_tree::ap_const_lv1_0 = "0";
const sc_lv<9> canonize_tree::ap_const_lv9_0 = "000000000";
const sc_lv<32> canonize_tree::ap_const_lv32_40 = "1000000";
const sc_lv<5> canonize_tree::ap_const_lv5_0 = "00000";
const sc_lv<9> canonize_tree::ap_const_lv9_100 = "100000000";
const sc_lv<9> canonize_tree::ap_const_lv9_1 = "1";
const sc_lv<32> canonize_tree::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";

canonize_tree::canonize_tree(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( val_assign_loc_empty_n );

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_256);
    sensitive << ( icmp_ln887_reg_277 );
    sensitive << ( icmp_ln891_reg_297 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln891_1_fu_242_p2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_k_1_i_i_phi_fu_152_p4);
    sensitive << ( k_1_i_i_reg_149 );
    sensitive << ( icmp_ln887_reg_277 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( k_reg_286 );
    sensitive << ( icmp_ln891_reg_297 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_predicate_tran6to7_state5);
    sensitive << ( icmp_ln887_fu_205_p2 );
    sensitive << ( icmp_ln891_fu_227_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln891_1_fu_242_p2 );

    SC_METHOD(thread_codeword_length_histogram_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln544_fu_200_p1 );

    SC_METHOD(thread_codeword_length_histogram_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_i_7_fu_210_p2);
    sensitive << ( i_op_assign_reg_160 );

    SC_METHOD(thread_i_fu_189_p2);
    sensitive << ( i_0_i_i_reg_114 );

    SC_METHOD(thread_icmp_ln13_fu_183_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_i_i_reg_114 );

    SC_METHOD(thread_icmp_ln887_fu_205_p2);
    sensitive << ( i_op_assign_reg_160 );
    sensitive << ( count_V_reg_272 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln891_1_fu_242_p2);
    sensitive << ( val_assign_loc_read_reg_253 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( i_op_assign_1_reg_171 );

    SC_METHOD(thread_icmp_ln891_fu_227_p2);
    sensitive << ( val_assign_loc_read_reg_253 );
    sensitive << ( icmp_ln887_fu_205_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( k_fu_216_p2 );

    SC_METHOD(thread_k_fu_216_p2);
    sensitive << ( ap_phi_mux_k_1_i_i_phi_fu_152_p4 );

    SC_METHOD(thread_length_V_fu_247_p2);
    sensitive << ( t_V_reg_125 );

    SC_METHOD(thread_sext_ln31_fu_222_p1);
    sensitive << ( ap_phi_mux_k_1_i_i_phi_fu_152_p4 );

    SC_METHOD(thread_sext_ln32_fu_232_p1);
    sensitive << ( sorted_value_V_q0 );

    SC_METHOD(thread_sorted_value_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( sext_ln31_fu_222_p1 );

    SC_METHOD(thread_sorted_value_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_symbol_bits_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln14_fu_195_p1 );
    sensitive << ( sext_ln32_fu_232_p1 );

    SC_METHOD(thread_symbol_bits_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_symbol_bits_V_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( trunc_ln209_fu_237_p1 );

    SC_METHOD(thread_symbol_bits_V_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln887_reg_277 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln13_fu_183_p2 );

    SC_METHOD(thread_trunc_ln209_fu_237_p1);
    sensitive << ( t_V_reg_125 );

    SC_METHOD(thread_val_assign_loc_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( val_assign_loc_empty_n );

    SC_METHOD(thread_val_assign_loc_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( val_assign_loc_empty_n );

    SC_METHOD(thread_zext_ln14_fu_195_p1);
    sensitive << ( i_0_i_i_reg_114 );

    SC_METHOD(thread_zext_ln544_fu_200_p1);
    sensitive << ( t_V_reg_125 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( val_assign_loc_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln891_1_fu_242_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln13_fu_183_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "canonize_tree_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, sorted_value_V_address0, "(port)sorted_value_V_address0");
    sc_trace(mVcdFile, sorted_value_V_ce0, "(port)sorted_value_V_ce0");
    sc_trace(mVcdFile, sorted_value_V_q0, "(port)sorted_value_V_q0");
    sc_trace(mVcdFile, val_assign_loc_dout, "(port)val_assign_loc_dout");
    sc_trace(mVcdFile, val_assign_loc_empty_n, "(port)val_assign_loc_empty_n");
    sc_trace(mVcdFile, val_assign_loc_read, "(port)val_assign_loc_read");
    sc_trace(mVcdFile, codeword_length_histogram_V_address0, "(port)codeword_length_histogram_V_address0");
    sc_trace(mVcdFile, codeword_length_histogram_V_ce0, "(port)codeword_length_histogram_V_ce0");
    sc_trace(mVcdFile, codeword_length_histogram_V_q0, "(port)codeword_length_histogram_V_q0");
    sc_trace(mVcdFile, symbol_bits_V_address0, "(port)symbol_bits_V_address0");
    sc_trace(mVcdFile, symbol_bits_V_ce0, "(port)symbol_bits_V_ce0");
    sc_trace(mVcdFile, symbol_bits_V_we0, "(port)symbol_bits_V_we0");
    sc_trace(mVcdFile, symbol_bits_V_d0, "(port)symbol_bits_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, val_assign_loc_blk_n, "val_assign_loc_blk_n");
    sc_trace(mVcdFile, k_1_i_i_reg_149, "k_1_i_i_reg_149");
    sc_trace(mVcdFile, i_op_assign_reg_160, "i_op_assign_reg_160");
    sc_trace(mVcdFile, val_assign_loc_read_reg_253, "val_assign_loc_read_reg_253");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, i_fu_189_p2, "i_fu_189_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, count_V_reg_272, "count_V_reg_272");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln887_fu_205_p2, "icmp_ln887_fu_205_p2");
    sc_trace(mVcdFile, icmp_ln887_reg_277, "icmp_ln887_reg_277");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter0, "ap_block_state5_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter1, "ap_block_state6_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_7_fu_210_p2, "i_7_fu_210_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, k_fu_216_p2, "k_fu_216_p2");
    sc_trace(mVcdFile, k_reg_286, "k_reg_286");
    sc_trace(mVcdFile, icmp_ln891_fu_227_p2, "icmp_ln891_fu_227_p2");
    sc_trace(mVcdFile, icmp_ln891_reg_297, "icmp_ln891_reg_297");
    sc_trace(mVcdFile, length_V_fu_247_p2, "length_V_fu_247_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, icmp_ln891_1_fu_242_p2, "icmp_ln891_1_fu_242_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_predicate_tran6to7_state5, "ap_predicate_tran6to7_state5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, i_0_i_i_reg_114, "i_0_i_i_reg_114");
    sc_trace(mVcdFile, icmp_ln13_fu_183_p2, "icmp_ln13_fu_183_p2");
    sc_trace(mVcdFile, t_V_reg_125, "t_V_reg_125");
    sc_trace(mVcdFile, k_0_i_i_reg_137, "k_0_i_i_reg_137");
    sc_trace(mVcdFile, ap_phi_mux_k_1_i_i_phi_fu_152_p4, "ap_phi_mux_k_1_i_i_phi_fu_152_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, i_op_assign_1_reg_171, "i_op_assign_1_reg_171");
    sc_trace(mVcdFile, zext_ln14_fu_195_p1, "zext_ln14_fu_195_p1");
    sc_trace(mVcdFile, zext_ln544_fu_200_p1, "zext_ln544_fu_200_p1");
    sc_trace(mVcdFile, sext_ln31_fu_222_p1, "sext_ln31_fu_222_p1");
    sc_trace(mVcdFile, sext_ln32_fu_232_p1, "sext_ln32_fu_232_p1");
    sc_trace(mVcdFile, trunc_ln209_fu_237_p1, "trunc_ln209_fu_237_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_256, "ap_condition_256");
#endif

    }
}

canonize_tree::~canonize_tree() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void canonize_tree::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                    esl_seteq<1,1,1>(icmp_ln891_1_fu_242_p2.read(), ap_const_lv1_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_tran6to7_state5.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, val_assign_loc_empty_n.read())))) {
        i_0_i_i_reg_114 = ap_const_lv9_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln13_fu_183_p2.read()))) {
        i_0_i_i_reg_114 = i_fu_189_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        if (esl_seteq<1,1,1>(ap_condition_256.read(), ap_const_boolean_1)) {
            i_op_assign_1_reg_171 = k_reg_286.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                    esl_seteq<1,1,1>(icmp_ln887_fu_205_p2.read(), ap_const_lv1_0))) {
            i_op_assign_1_reg_171 = ap_phi_mux_k_1_i_i_phi_fu_152_p4.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln887_fu_205_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln891_fu_227_p2.read()))) {
        i_op_assign_reg_160 = i_7_fu_210_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_op_assign_reg_160 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln13_fu_183_p2.read()))) {
        k_0_i_i_reg_137 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln891_1_fu_242_p2.read()))) {
        k_0_i_i_reg_137 = i_op_assign_1_reg_171.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln887_reg_277.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln891_reg_297.read()))) {
        k_1_i_i_reg_149 = k_reg_286.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_1_i_i_reg_149 = k_0_i_i_reg_137.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln13_fu_183_p2.read()))) {
        t_V_reg_125 = ap_const_lv32_40;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln891_1_fu_242_p2.read()))) {
        t_V_reg_125 = length_V_fu_247_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        count_V_reg_272 = codeword_length_histogram_V_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln887_reg_277 = icmp_ln887_fu_205_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln887_fu_205_p2.read(), ap_const_lv1_1))) {
        icmp_ln891_reg_297 = icmp_ln891_fu_227_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(icmp_ln887_fu_205_p2.read(), ap_const_lv1_1))) {
        k_reg_286 = k_fu_216_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, val_assign_loc_empty_n.read())))) {
        val_assign_loc_read_reg_253 = val_assign_loc_dout.read();
    }
}

void canonize_tree::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[4];
}

void canonize_tree::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void canonize_tree::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void canonize_tree::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void canonize_tree::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void canonize_tree::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[5];
}

void canonize_tree::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void canonize_tree::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void canonize_tree::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void canonize_tree::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, val_assign_loc_empty_n.read()));
}

void canonize_tree::thread_ap_block_state5_pp0_stage0_iter0() {
    ap_block_state5_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void canonize_tree::thread_ap_block_state6_pp0_stage0_iter1() {
    ap_block_state6_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void canonize_tree::thread_ap_condition_256() {
    ap_condition_256 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln887_reg_277.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(icmp_ln891_reg_297.read(), ap_const_lv1_0));
}

void canonize_tree::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(icmp_ln891_1_fu_242_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void canonize_tree::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void canonize_tree::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void canonize_tree::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void canonize_tree::thread_ap_phi_mux_k_1_i_i_phi_fu_152_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln887_reg_277.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln891_reg_297.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_k_1_i_i_phi_fu_152_p4 = k_reg_286.read();
    } else {
        ap_phi_mux_k_1_i_i_phi_fu_152_p4 = k_1_i_i_reg_149.read();
    }
}

void canonize_tree::thread_ap_predicate_tran6to7_state5() {
    ap_predicate_tran6to7_state5 = (esl_seteq<1,1,1>(icmp_ln891_fu_227_p2.read(), ap_const_lv1_0) || esl_seteq<1,1,1>(icmp_ln887_fu_205_p2.read(), ap_const_lv1_0));
}

void canonize_tree::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(icmp_ln891_1_fu_242_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void canonize_tree::thread_codeword_length_histogram_V_address0() {
    codeword_length_histogram_V_address0 =  (sc_lv<6>) (zext_ln544_fu_200_p1.read());
}

void canonize_tree::thread_codeword_length_histogram_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        codeword_length_histogram_V_ce0 = ap_const_logic_1;
    } else {
        codeword_length_histogram_V_ce0 = ap_const_logic_0;
    }
}

void canonize_tree::thread_i_7_fu_210_p2() {
    i_7_fu_210_p2 = (!i_op_assign_reg_160.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_op_assign_reg_160.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void canonize_tree::thread_i_fu_189_p2() {
    i_fu_189_p2 = (!i_0_i_i_reg_114.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(i_0_i_i_reg_114.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void canonize_tree::thread_icmp_ln13_fu_183_p2() {
    icmp_ln13_fu_183_p2 = (!i_0_i_i_reg_114.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_i_reg_114.read() == ap_const_lv9_100);
}

void canonize_tree::thread_icmp_ln887_fu_205_p2() {
    icmp_ln887_fu_205_p2 = (!i_op_assign_reg_160.read().is_01() || !count_V_reg_272.read().is_01())? sc_lv<1>(): (sc_biguint<32>(i_op_assign_reg_160.read()) < sc_biguint<32>(count_V_reg_272.read()));
}

void canonize_tree::thread_icmp_ln891_1_fu_242_p2() {
    icmp_ln891_1_fu_242_p2 = (!i_op_assign_1_reg_171.read().is_01() || !val_assign_loc_read_reg_253.read().is_01())? sc_lv<1>(): (sc_biguint<32>(i_op_assign_1_reg_171.read()) < sc_biguint<32>(val_assign_loc_read_reg_253.read()));
}

void canonize_tree::thread_icmp_ln891_fu_227_p2() {
    icmp_ln891_fu_227_p2 = (!k_fu_216_p2.read().is_01() || !val_assign_loc_read_reg_253.read().is_01())? sc_lv<1>(): (sc_biguint<32>(k_fu_216_p2.read()) < sc_biguint<32>(val_assign_loc_read_reg_253.read()));
}

void canonize_tree::thread_k_fu_216_p2() {
    k_fu_216_p2 = (!ap_const_lv32_1.is_01() || !ap_phi_mux_k_1_i_i_phi_fu_152_p4.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_bigint<32>(ap_phi_mux_k_1_i_i_phi_fu_152_p4.read()));
}

void canonize_tree::thread_length_V_fu_247_p2() {
    length_V_fu_247_p2 = (!t_V_reg_125.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(t_V_reg_125.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void canonize_tree::thread_sext_ln31_fu_222_p1() {
    sext_ln31_fu_222_p1 = esl_sext<64,32>(ap_phi_mux_k_1_i_i_phi_fu_152_p4.read());
}

void canonize_tree::thread_sext_ln32_fu_232_p1() {
    sext_ln32_fu_232_p1 = esl_sext<64,32>(sorted_value_V_q0.read());
}

void canonize_tree::thread_sorted_value_V_address0() {
    sorted_value_V_address0 =  (sc_lv<8>) (sext_ln31_fu_222_p1.read());
}

void canonize_tree::thread_sorted_value_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        sorted_value_V_ce0 = ap_const_logic_1;
    } else {
        sorted_value_V_ce0 = ap_const_logic_0;
    }
}

void canonize_tree::thread_symbol_bits_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        symbol_bits_V_address0 =  (sc_lv<8>) (sext_ln32_fu_232_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        symbol_bits_V_address0 =  (sc_lv<8>) (zext_ln14_fu_195_p1.read());
    } else {
        symbol_bits_V_address0 = "XXXXXXXX";
    }
}

void canonize_tree::thread_symbol_bits_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        symbol_bits_V_ce0 = ap_const_logic_1;
    } else {
        symbol_bits_V_ce0 = ap_const_logic_0;
    }
}

void canonize_tree::thread_symbol_bits_V_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        symbol_bits_V_d0 = trunc_ln209_fu_237_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        symbol_bits_V_d0 = ap_const_lv5_0;
    } else {
        symbol_bits_V_d0 =  (sc_lv<5>) ("XXXXX");
    }
}

void canonize_tree::thread_symbol_bits_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln13_fu_183_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln887_reg_277.read(), ap_const_lv1_1)))) {
        symbol_bits_V_we0 = ap_const_logic_1;
    } else {
        symbol_bits_V_we0 = ap_const_logic_0;
    }
}

void canonize_tree::thread_trunc_ln209_fu_237_p1() {
    trunc_ln209_fu_237_p1 = t_V_reg_125.read().range(5-1, 0);
}

void canonize_tree::thread_val_assign_loc_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        val_assign_loc_blk_n = val_assign_loc_empty_n.read();
    } else {
        val_assign_loc_blk_n = ap_const_logic_1;
    }
}

void canonize_tree::thread_val_assign_loc_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, val_assign_loc_empty_n.read())))) {
        val_assign_loc_read = ap_const_logic_1;
    } else {
        val_assign_loc_read = ap_const_logic_0;
    }
}

void canonize_tree::thread_zext_ln14_fu_195_p1() {
    zext_ln14_fu_195_p1 = esl_zext<64,9>(i_0_i_i_reg_114.read());
}

void canonize_tree::thread_zext_ln544_fu_200_p1() {
    zext_ln544_fu_200_p1 = esl_zext<64,32>(t_V_reg_125.read());
}

void canonize_tree::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, val_assign_loc_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln13_fu_183_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 16 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(icmp_ln891_1_fu_242_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

}

