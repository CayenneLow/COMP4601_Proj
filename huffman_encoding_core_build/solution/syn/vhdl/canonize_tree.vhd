-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canonize_tree is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sorted_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sorted_value_V_ce0 : OUT STD_LOGIC;
    sorted_value_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    val_assign_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    val_assign_loc_empty_n : IN STD_LOGIC;
    val_assign_loc_read : OUT STD_LOGIC;
    codeword_length_histogram_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    codeword_length_histogram_V_ce0 : OUT STD_LOGIC;
    codeword_length_histogram_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    symbol_bits_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    symbol_bits_V_ce0 : OUT STD_LOGIC;
    symbol_bits_V_we0 : OUT STD_LOGIC;
    symbol_bits_V_d0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of canonize_tree is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal val_assign_loc_blk_n : STD_LOGIC;
    signal k_1_i_i_reg_149 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_loc_read_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_fu_189_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal count_V_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln887_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_7_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal k_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln891_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_reg_297 : STD_LOGIC_VECTOR (0 downto 0);
    signal length_V_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln891_1_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_predicate_tran6to7_state5 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal i_0_i_i_reg_114 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln13_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_reg_125 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_i_i_reg_137 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_k_1_i_i_phi_fu_152_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_op_assign_1_reg_171 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln14_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln31_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln209_fu_237_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_256 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln891_1_fu_242_p2 = ap_const_lv1_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_predicate_tran6to7_state5 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((val_assign_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_i_reg_114 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_183_p2 = ap_const_lv1_0))) then 
                i_0_i_i_reg_114 <= i_fu_189_p2;
            end if; 
        end if;
    end process;

    i_op_assign_1_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_256)) then 
                    i_op_assign_1_reg_171 <= k_reg_286;
                elsif (((icmp_ln887_fu_205_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_op_assign_1_reg_171 <= ap_phi_mux_k_1_i_i_phi_fu_152_p4;
                end if;
            end if; 
        end if;
    end process;

    i_op_assign_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln891_fu_227_p2 = ap_const_lv1_1))) then 
                i_op_assign_reg_160 <= i_7_fu_210_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_op_assign_reg_160 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    k_0_i_i_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_183_p2 = ap_const_lv1_1))) then 
                k_0_i_i_reg_137 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln891_1_fu_242_p2 = ap_const_lv1_1))) then 
                k_0_i_i_reg_137 <= i_op_assign_1_reg_171;
            end if; 
        end if;
    end process;

    k_1_i_i_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_reg_277 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln891_reg_297 = ap_const_lv1_1))) then 
                k_1_i_i_reg_149 <= k_reg_286;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                k_1_i_i_reg_149 <= k_0_i_i_reg_137;
            end if; 
        end if;
    end process;

    t_V_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_183_p2 = ap_const_lv1_1))) then 
                t_V_reg_125 <= ap_const_lv32_40;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln891_1_fu_242_p2 = ap_const_lv1_1))) then 
                t_V_reg_125 <= length_V_fu_247_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                count_V_reg_272 <= codeword_length_histogram_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln887_reg_277 <= icmp_ln887_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln891_reg_297 <= icmp_ln891_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                k_reg_286 <= k_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((val_assign_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                val_assign_loc_read_reg_253 <= val_assign_loc_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, val_assign_loc_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, icmp_ln891_1_fu_242_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, icmp_ln13_fu_183_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((val_assign_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_183_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln891_1_fu_242_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, val_assign_loc_empty_n)
    begin
                ap_block_state1 <= ((val_assign_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_256_assign_proc : process(icmp_ln887_reg_277, icmp_ln891_reg_297, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_256 <= ((icmp_ln887_reg_277 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln891_reg_297 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7, icmp_ln891_1_fu_242_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln891_1_fu_242_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_k_1_i_i_phi_fu_152_p4_assign_proc : process(k_1_i_i_reg_149, icmp_ln887_reg_277, ap_CS_fsm_pp0_stage0, k_reg_286, icmp_ln891_reg_297, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln887_reg_277 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln891_reg_297 = ap_const_lv1_1))) then 
            ap_phi_mux_k_1_i_i_phi_fu_152_p4 <= k_reg_286;
        else 
            ap_phi_mux_k_1_i_i_phi_fu_152_p4 <= k_1_i_i_reg_149;
        end if; 
    end process;


    ap_predicate_tran6to7_state5_assign_proc : process(icmp_ln887_fu_205_p2, icmp_ln891_fu_227_p2)
    begin
                ap_predicate_tran6to7_state5 <= ((icmp_ln887_fu_205_p2 = ap_const_lv1_0) or (icmp_ln891_fu_227_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln891_1_fu_242_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln891_1_fu_242_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    codeword_length_histogram_V_address0 <= zext_ln544_fu_200_p1(6 - 1 downto 0);

    codeword_length_histogram_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            codeword_length_histogram_V_ce0 <= ap_const_logic_1;
        else 
            codeword_length_histogram_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_7_fu_210_p2 <= std_logic_vector(unsigned(i_op_assign_reg_160) + unsigned(ap_const_lv32_1));
    i_fu_189_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_114) + unsigned(ap_const_lv9_1));
    icmp_ln13_fu_183_p2 <= "1" when (i_0_i_i_reg_114 = ap_const_lv9_100) else "0";
    icmp_ln887_fu_205_p2 <= "1" when (unsigned(i_op_assign_reg_160) < unsigned(count_V_reg_272)) else "0";
    icmp_ln891_1_fu_242_p2 <= "1" when (unsigned(i_op_assign_1_reg_171) < unsigned(val_assign_loc_read_reg_253)) else "0";
    icmp_ln891_fu_227_p2 <= "1" when (unsigned(k_fu_216_p2) < unsigned(val_assign_loc_read_reg_253)) else "0";
    k_fu_216_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_k_1_i_i_phi_fu_152_p4));
    length_V_fu_247_p2 <= std_logic_vector(unsigned(t_V_reg_125) + unsigned(ap_const_lv32_FFFFFFFF));
        sext_ln31_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_k_1_i_i_phi_fu_152_p4),64));

        sext_ln32_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sorted_value_V_q0),64));

    sorted_value_V_address0 <= sext_ln31_fu_222_p1(8 - 1 downto 0);

    sorted_value_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sorted_value_V_ce0 <= ap_const_logic_1;
        else 
            sorted_value_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    symbol_bits_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln14_fu_195_p1, sext_ln32_fu_232_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            symbol_bits_V_address0 <= sext_ln32_fu_232_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            symbol_bits_V_address0 <= zext_ln14_fu_195_p1(8 - 1 downto 0);
        else 
            symbol_bits_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    symbol_bits_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            symbol_bits_V_ce0 <= ap_const_logic_1;
        else 
            symbol_bits_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    symbol_bits_V_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, trunc_ln209_fu_237_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            symbol_bits_V_d0 <= trunc_ln209_fu_237_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            symbol_bits_V_d0 <= ap_const_lv5_0;
        else 
            symbol_bits_V_d0 <= "XXXXX";
        end if; 
    end process;


    symbol_bits_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_reg_277, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, icmp_ln13_fu_183_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_reg_277 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_183_p2 = ap_const_lv1_0)))) then 
            symbol_bits_V_we0 <= ap_const_logic_1;
        else 
            symbol_bits_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln209_fu_237_p1 <= t_V_reg_125(5 - 1 downto 0);

    val_assign_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, val_assign_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_assign_loc_blk_n <= val_assign_loc_empty_n;
        else 
            val_assign_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    val_assign_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, val_assign_loc_empty_n)
    begin
        if ((not(((val_assign_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_assign_loc_read <= ap_const_logic_1;
        else 
            val_assign_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln14_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_114),64));
    zext_ln544_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_125),64));
end behav;
