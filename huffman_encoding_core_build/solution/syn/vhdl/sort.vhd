-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sort is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_value_V_ce0 : OUT STD_LOGIC;
    in_value_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_frequency_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_frequency_V_ce0 : OUT STD_LOGIC;
    in_frequency_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    num_symbols : IN STD_LOGIC_VECTOR (31 downto 0);
    out_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_value_V_ce0 : OUT STD_LOGIC;
    out_value_V_we0 : OUT STD_LOGIC;
    out_value_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_frequency_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_frequency_V_ce0 : OUT STD_LOGIC;
    out_frequency_V_we0 : OUT STD_LOGIC;
    out_frequency_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sort is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln19_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_reg_571 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln18_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln23_fu_413_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln23_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_431_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_1_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln31_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_616 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln30_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal digit_V_fu_463_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal digit_V_reg_629 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal digit_histogram_V_ad_1_reg_640 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln39_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_508_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal j_2_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln44_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_reg_671 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln43_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_fu_530_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal digit_location_V_add_3_reg_687 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal previous_sorting_val_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal previous_sorting_val_ce0 : STD_LOGIC;
    signal previous_sorting_val_we0 : STD_LOGIC;
    signal previous_sorting_val_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal previous_sorting_fre_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal previous_sorting_fre_ce0 : STD_LOGIC;
    signal previous_sorting_fre_we0 : STD_LOGIC;
    signal previous_sorting_fre_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorting_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sorting_value_V_ce0 : STD_LOGIC;
    signal sorting_value_V_we0 : STD_LOGIC;
    signal sorting_value_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorting_value_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorting_frequency_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sorting_frequency_V_ce0 : STD_LOGIC;
    signal sorting_frequency_V_we0 : STD_LOGIC;
    signal sorting_frequency_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorting_frequency_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal digit_histogram_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal digit_histogram_V_ce0 : STD_LOGIC;
    signal digit_histogram_V_we0 : STD_LOGIC;
    signal digit_histogram_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal digit_histogram_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal digit_location_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal digit_location_V_ce0 : STD_LOGIC;
    signal digit_location_V_we0 : STD_LOGIC;
    signal digit_location_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal digit_location_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_digit_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal current_digit_V_ce0 : STD_LOGIC;
    signal current_digit_V_we0 : STD_LOGIC;
    signal current_digit_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal op2_assign_reg_339 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_reg_351 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_417_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j5_0_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i6_0_reg_373 : STD_LOGIC_VECTOR (4 downto 0);
    signal j7_0_reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln26_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_1_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_3_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_4_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln209_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_3_fu_549_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1503_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_fu_484_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component sort_previous_sorbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sort_digit_histogfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sort_current_digihbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    previous_sorting_val_U : component sort_previous_sorbkb
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => previous_sorting_val_address0,
        ce0 => previous_sorting_val_ce0,
        we0 => previous_sorting_val_we0,
        d0 => sorting_value_V_q0,
        q0 => previous_sorting_val_q0);

    previous_sorting_fre_U : component sort_previous_sorbkb
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => previous_sorting_fre_address0,
        ce0 => previous_sorting_fre_ce0,
        we0 => previous_sorting_fre_we0,
        d0 => sorting_frequency_V_q0,
        q0 => previous_sorting_fre_q0);

    sorting_value_V_U : component sort_previous_sorbkb
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sorting_value_V_address0,
        ce0 => sorting_value_V_ce0,
        we0 => sorting_value_V_we0,
        d0 => sorting_value_V_d0,
        q0 => sorting_value_V_q0);

    sorting_frequency_V_U : component sort_previous_sorbkb
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sorting_frequency_V_address0,
        ce0 => sorting_frequency_V_ce0,
        we0 => sorting_frequency_V_we0,
        d0 => sorting_frequency_V_d0,
        q0 => sorting_frequency_V_q0);

    digit_histogram_V_U : component sort_digit_histogfYi
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => digit_histogram_V_address0,
        ce0 => digit_histogram_V_ce0,
        we0 => digit_histogram_V_we0,
        d0 => digit_histogram_V_d0,
        q0 => digit_histogram_V_q0);

    digit_location_V_U : component sort_digit_histogfYi
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => digit_location_V_address0,
        ce0 => digit_location_V_ce0,
        we0 => digit_location_V_we0,
        d0 => digit_location_V_d0,
        q0 => digit_location_V_q0);

    current_digit_V_U : component sort_current_digihbi
    generic map (
        DataWidth => 4,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => current_digit_V_address0,
        ce0 => current_digit_V_ce0,
        we0 => current_digit_V_we0,
        d0 => digit_V_reg_629,
        q0 => current_digit_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i6_0_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i6_0_reg_373 <= i_3_fu_508_p2;
            elsif (((icmp_ln30_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i6_0_reg_373 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    i_0_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_reg_351 <= i_fu_431_p2;
            elsif (((tmp_1_fu_417_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_351 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j5_0_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_425_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j5_0_reg_362 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j5_0_reg_362 <= j_1_reg_611;
            end if; 
        end if;
    end process;

    j7_0_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_478_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j7_0_reg_385 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j7_0_reg_385 <= j_2_reg_666;
            end if; 
        end if;
    end process;

    j_0_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_328 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_reg_328 <= j_reg_566;
            end if; 
        end if;
    end process;

    op2_assign_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_396_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                op2_assign_reg_339 <= ap_const_lv6_0;
            elsif (((icmp_ln43_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                op2_assign_reg_339 <= shift_fu_530_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                digit_V_reg_629 <= digit_V_fu_463_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                digit_histogram_V_ad_1_reg_640 <= zext_ln544_fu_467_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                digit_location_V_add_3_reg_687 <= zext_ln544_3_fu_536_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_1_reg_611 <= j_1_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                j_2_reg_666 <= j_2_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_566 <= j_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln19_reg_571(31 downto 0) <= zext_ln19_fu_407_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    zext_ln23_reg_592(5 downto 0) <= zext_ln23_fu_413_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    zext_ln31_reg_616(31 downto 0) <= zext_ln31_fu_453_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    zext_ln44_reg_671(31 downto 0) <= zext_ln44_fu_525_p1(31 downto 0);
            end if;
        end if;
    end process;
    zext_ln19_reg_571(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln23_reg_592(31 downto 6) <= "00000000000000000000000000";
    zext_ln31_reg_616(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln44_reg_671(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln18_fu_396_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln30_fu_442_p2, ap_CS_fsm_state10, icmp_ln39_fu_478_p2, ap_CS_fsm_state12, icmp_ln43_fu_514_p2, tmp_1_fu_417_p3, icmp_ln25_fu_425_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln18_fu_396_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((tmp_1_fu_417_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln25_fu_425_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln30_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln39_fu_478_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln43_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln209_fu_501_p2 <= std_logic_vector(unsigned(digit_location_V_q0) + unsigned(digit_histogram_V_q0));
    add_ln40_fu_484_p2 <= std_logic_vector(unsigned(i6_0_reg_373) + unsigned(ap_const_lv5_1F));
    add_ln700_3_fu_549_p2 <= std_logic_vector(unsigned(digit_location_V_q0) + unsigned(ap_const_lv32_1));
    add_ln700_fu_471_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(digit_histogram_V_q0));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, tmp_1_fu_417_p3)
    begin
        if ((((tmp_1_fu_417_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, tmp_1_fu_417_p3)
    begin
        if (((tmp_1_fu_417_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    current_digit_V_address0_assign_proc : process(zext_ln31_reg_616, ap_CS_fsm_state8, ap_CS_fsm_state12, zext_ln44_fu_525_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            current_digit_V_address0 <= zext_ln44_fu_525_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            current_digit_V_address0 <= zext_ln31_reg_616(8 - 1 downto 0);
        else 
            current_digit_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    current_digit_V_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            current_digit_V_ce0 <= ap_const_logic_1;
        else 
            current_digit_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    current_digit_V_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            current_digit_V_we0 <= ap_const_logic_1;
        else 
            current_digit_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    digit_V_fu_463_p1 <= lshr_ln1503_fu_458_p2(4 - 1 downto 0);

    digit_histogram_V_address0_assign_proc : process(ap_CS_fsm_state5, digit_histogram_V_ad_1_reg_640, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state9, zext_ln26_fu_437_p1, zext_ln544_fu_467_p1, zext_ln40_1_fu_490_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            digit_histogram_V_address0 <= zext_ln40_1_fu_490_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            digit_histogram_V_address0 <= digit_histogram_V_ad_1_reg_640;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            digit_histogram_V_address0 <= zext_ln544_fu_467_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            digit_histogram_V_address0 <= zext_ln26_fu_437_p1(4 - 1 downto 0);
        else 
            digit_histogram_V_address0 <= "XXXX";
        end if; 
    end process;


    digit_histogram_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            digit_histogram_V_ce0 <= ap_const_logic_1;
        else 
            digit_histogram_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    digit_histogram_V_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, add_ln700_fu_471_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            digit_histogram_V_d0 <= add_ln700_fu_471_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            digit_histogram_V_d0 <= ap_const_lv32_0;
        else 
            digit_histogram_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    digit_histogram_V_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln25_fu_425_p2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln25_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            digit_histogram_V_we0 <= ap_const_logic_1;
        else 
            digit_histogram_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    digit_location_V_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state11, digit_location_V_add_3_reg_687, ap_CS_fsm_state13, ap_CS_fsm_state14, zext_ln40_1_fu_490_p1, zext_ln40_fu_496_p1, zext_ln544_3_fu_536_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            digit_location_V_address0 <= digit_location_V_add_3_reg_687;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            digit_location_V_address0 <= zext_ln544_3_fu_536_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            digit_location_V_address0 <= zext_ln40_fu_496_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            digit_location_V_address0 <= zext_ln40_1_fu_490_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            digit_location_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            digit_location_V_address0 <= "XXXX";
        end if; 
    end process;


    digit_location_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            digit_location_V_ce0 <= ap_const_logic_1;
        else 
            digit_location_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    digit_location_V_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state14, add_ln209_fu_501_p2, add_ln700_3_fu_549_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            digit_location_V_d0 <= add_ln700_3_fu_549_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            digit_location_V_d0 <= add_ln209_fu_501_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            digit_location_V_d0 <= ap_const_lv32_0;
        else 
            digit_location_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    digit_location_V_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln30_fu_442_p2, ap_CS_fsm_state11, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln30_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            digit_location_V_we0 <= ap_const_logic_1;
        else 
            digit_location_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_508_p2 <= std_logic_vector(unsigned(i6_0_reg_373) + unsigned(ap_const_lv5_1));
    i_fu_431_p2 <= std_logic_vector(unsigned(i_0_reg_351) + unsigned(ap_const_lv5_1));
    icmp_ln18_fu_396_p2 <= "1" when (j_0_reg_328 = num_symbols) else "0";
    icmp_ln25_fu_425_p2 <= "1" when (i_0_reg_351 = ap_const_lv5_10) else "0";
    icmp_ln30_fu_442_p2 <= "1" when (j5_0_reg_362 = num_symbols) else "0";
    icmp_ln39_fu_478_p2 <= "1" when (i6_0_reg_373 = ap_const_lv5_10) else "0";
    icmp_ln43_fu_514_p2 <= "1" when (j7_0_reg_385 = num_symbols) else "0";
    in_frequency_V_address0 <= zext_ln19_fu_407_p1(8 - 1 downto 0);

    in_frequency_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_frequency_V_ce0 <= ap_const_logic_1;
        else 
            in_frequency_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_value_V_address0 <= zext_ln19_fu_407_p1(8 - 1 downto 0);

    in_value_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_value_V_ce0 <= ap_const_logic_1;
        else 
            in_value_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_447_p2 <= std_logic_vector(unsigned(j5_0_reg_362) + unsigned(ap_const_lv32_1));
    j_2_fu_519_p2 <= std_logic_vector(unsigned(j7_0_reg_385) + unsigned(ap_const_lv32_1));
    j_fu_401_p2 <= std_logic_vector(unsigned(j_0_reg_328) + unsigned(ap_const_lv32_1));
    lshr_ln1503_fu_458_p2 <= std_logic_vector(shift_right(unsigned(sorting_frequency_V_q0),to_integer(unsigned('0' & zext_ln23_reg_592(31-1 downto 0)))));
    out_frequency_V_address0 <= zext_ln544_4_fu_541_p1(8 - 1 downto 0);

    out_frequency_V_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_frequency_V_ce0 <= ap_const_logic_1;
        else 
            out_frequency_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_frequency_V_d0 <= previous_sorting_fre_q0;

    out_frequency_V_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_frequency_V_we0 <= ap_const_logic_1;
        else 
            out_frequency_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_value_V_address0 <= zext_ln544_4_fu_541_p1(8 - 1 downto 0);

    out_value_V_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_value_V_ce0 <= ap_const_logic_1;
        else 
            out_value_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_value_V_d0 <= previous_sorting_val_q0;

    out_value_V_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_value_V_we0 <= ap_const_logic_1;
        else 
            out_value_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    previous_sorting_fre_address0_assign_proc : process(zext_ln31_reg_616, ap_CS_fsm_state7, zext_ln44_reg_671, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            previous_sorting_fre_address0 <= zext_ln44_reg_671(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            previous_sorting_fre_address0 <= zext_ln31_reg_616(8 - 1 downto 0);
        else 
            previous_sorting_fre_address0 <= "XXXXXXXX";
        end if; 
    end process;


    previous_sorting_fre_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            previous_sorting_fre_ce0 <= ap_const_logic_1;
        else 
            previous_sorting_fre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    previous_sorting_fre_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            previous_sorting_fre_we0 <= ap_const_logic_1;
        else 
            previous_sorting_fre_we0 <= ap_const_logic_0;
        end if; 
    end process;


    previous_sorting_val_address0_assign_proc : process(zext_ln31_reg_616, ap_CS_fsm_state8, zext_ln44_reg_671, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            previous_sorting_val_address0 <= zext_ln44_reg_671(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            previous_sorting_val_address0 <= zext_ln31_reg_616(8 - 1 downto 0);
        else 
            previous_sorting_val_address0 <= "XXXXXXXX";
        end if; 
    end process;


    previous_sorting_val_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            previous_sorting_val_ce0 <= ap_const_logic_1;
        else 
            previous_sorting_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    previous_sorting_val_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            previous_sorting_val_we0 <= ap_const_logic_1;
        else 
            previous_sorting_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shift_fu_530_p2 <= std_logic_vector(unsigned(op2_assign_reg_339) + unsigned(ap_const_lv6_4));

    sorting_frequency_V_address0_assign_proc : process(zext_ln19_reg_571, ap_CS_fsm_state6, zext_ln31_fu_453_p1, ap_CS_fsm_state3, ap_CS_fsm_state14, zext_ln544_4_fu_541_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sorting_frequency_V_address0 <= zext_ln544_4_fu_541_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sorting_frequency_V_address0 <= zext_ln31_fu_453_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sorting_frequency_V_address0 <= zext_ln19_reg_571(8 - 1 downto 0);
        else 
            sorting_frequency_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sorting_frequency_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sorting_frequency_V_ce0 <= ap_const_logic_1;
        else 
            sorting_frequency_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sorting_frequency_V_d0_assign_proc : process(in_frequency_V_q0, previous_sorting_fre_q0, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sorting_frequency_V_d0 <= previous_sorting_fre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sorting_frequency_V_d0 <= in_frequency_V_q0;
        else 
            sorting_frequency_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sorting_frequency_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sorting_frequency_V_we0 <= ap_const_logic_1;
        else 
            sorting_frequency_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sorting_value_V_address0_assign_proc : process(zext_ln19_reg_571, zext_ln31_reg_616, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state14, zext_ln544_4_fu_541_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sorting_value_V_address0 <= zext_ln544_4_fu_541_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sorting_value_V_address0 <= zext_ln31_reg_616(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sorting_value_V_address0 <= zext_ln19_reg_571(8 - 1 downto 0);
        else 
            sorting_value_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sorting_value_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sorting_value_V_ce0 <= ap_const_logic_1;
        else 
            sorting_value_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sorting_value_V_d0_assign_proc : process(in_value_V_q0, previous_sorting_val_q0, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sorting_value_V_d0 <= previous_sorting_val_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sorting_value_V_d0 <= in_value_V_q0;
        else 
            sorting_value_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sorting_value_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sorting_value_V_we0 <= ap_const_logic_1;
        else 
            sorting_value_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_417_p3 <= op2_assign_reg_339(5 downto 5);
    zext_ln19_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_328),64));
    zext_ln23_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_339),32));
    zext_ln26_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_351),64));
    zext_ln31_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_0_reg_362),64));
    zext_ln40_1_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_484_p2),64));
    zext_ln40_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i6_0_reg_373),64));
    zext_ln44_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j7_0_reg_385),64));
    zext_ln544_3_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_digit_V_q0),64));
    zext_ln544_4_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(digit_location_V_q0),64));
    zext_ln544_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(digit_V_reg_629),64));
end behav;
