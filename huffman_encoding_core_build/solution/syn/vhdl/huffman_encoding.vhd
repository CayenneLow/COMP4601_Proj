-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity huffman_encoding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    symbol_histogram_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    symbol_histogram_value_V_ce0 : OUT STD_LOGIC;
    symbol_histogram_value_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    symbol_histogram_frequency_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    symbol_histogram_frequency_V_ce0 : OUT STD_LOGIC;
    symbol_histogram_frequency_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    encoding_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encoding_V_ce0 : OUT STD_LOGIC;
    encoding_V_we0 : OUT STD_LOGIC;
    encoding_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    num_nonzero_symbols : OUT STD_LOGIC_VECTOR (31 downto 0);
    num_nonzero_symbols_ap_vld : OUT STD_LOGIC );
end;


architecture behav of huffman_encoding is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "huffman_encoding,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.333000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=23,HLS_SYN_DSP=0,HLS_SYN_FF=1866,HLS_SYN_LUT=4168,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_425 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln10_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_4_fu_443_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_4_reg_587 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln12_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_592 : STD_LOGIC_VECTOR (63 downto 0);
    signal symbol_histogram_fre_1_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln883_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_487_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_619 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln41_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_reg_624 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln40_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_505_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal k_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln879_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_664 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal length_V_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_V_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal truncated_length_his_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln879_2_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_V_1_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal filtered_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal filtered_value_V_ce0 : STD_LOGIC;
    signal filtered_value_V_we0 : STD_LOGIC;
    signal filtered_value_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_frequency_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal filtered_frequency_V_ce0 : STD_LOGIC;
    signal filtered_frequency_V_we0 : STD_LOGIC;
    signal filtered_frequency_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sorted_0_ce0 : STD_LOGIC;
    signal sorted_0_we0 : STD_LOGIC;
    signal sorted_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sorted_1_ce0 : STD_LOGIC;
    signal sorted_1_we0 : STD_LOGIC;
    signal sorted_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_copy1_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sorted_copy1_value_V_ce0 : STD_LOGIC;
    signal sorted_copy1_value_V_we0 : STD_LOGIC;
    signal sorted_copy1_value_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_copy1_frequen_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sorted_copy1_frequen_ce0 : STD_LOGIC;
    signal sorted_copy1_frequen_we0 : STD_LOGIC;
    signal sorted_copy1_frequen_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_copy2_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sorted_copy2_value_V_ce0 : STD_LOGIC;
    signal sorted_copy2_value_V_we0 : STD_LOGIC;
    signal sorted_copy2_value_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal parent_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal parent_V_ce0 : STD_LOGIC;
    signal parent_V_we0 : STD_LOGIC;
    signal parent_V_q0 : STD_LOGIC_VECTOR (30 downto 0);
    signal left_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal left_V_ce0 : STD_LOGIC;
    signal left_V_we0 : STD_LOGIC;
    signal left_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_V_ce0 : STD_LOGIC;
    signal right_V_we0 : STD_LOGIC;
    signal right_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_histogram_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal length_histogram_V_ce0 : STD_LOGIC;
    signal length_histogram_V_we0 : STD_LOGIC;
    signal length_histogram_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal truncated_length_his_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal truncated_length_his_ce0 : STD_LOGIC;
    signal truncated_length_his_we0 : STD_LOGIC;
    signal truncated_length_his_ce1 : STD_LOGIC;
    signal truncated_length_his_we1 : STD_LOGIC;
    signal truncated_length_his_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal truncated_length_his_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal truncated_length_his_1_ce0 : STD_LOGIC;
    signal truncated_length_his_1_we0 : STD_LOGIC;
    signal truncated_length_his_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal symbol_bits_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal symbol_bits_V_ce0 : STD_LOGIC;
    signal symbol_bits_V_we0 : STD_LOGIC;
    signal symbol_bits_V_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal symbol_bits_V_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_create_tree_fu_369_ap_start : STD_LOGIC;
    signal grp_create_tree_fu_369_ap_done : STD_LOGIC;
    signal grp_create_tree_fu_369_ap_idle : STD_LOGIC;
    signal grp_create_tree_fu_369_ap_ready : STD_LOGIC;
    signal grp_create_tree_fu_369_in_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_create_tree_fu_369_in_value_V_ce0 : STD_LOGIC;
    signal grp_create_tree_fu_369_in_frequency_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_create_tree_fu_369_in_frequency_V_ce0 : STD_LOGIC;
    signal grp_create_tree_fu_369_parent_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_create_tree_fu_369_parent_V_ce0 : STD_LOGIC;
    signal grp_create_tree_fu_369_parent_V_we0 : STD_LOGIC;
    signal grp_create_tree_fu_369_parent_V_d0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_create_tree_fu_369_left_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_create_tree_fu_369_left_V_ce0 : STD_LOGIC;
    signal grp_create_tree_fu_369_left_V_we0 : STD_LOGIC;
    signal grp_create_tree_fu_369_left_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_create_tree_fu_369_right_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_create_tree_fu_369_right_V_ce0 : STD_LOGIC;
    signal grp_create_tree_fu_369_right_V_we0 : STD_LOGIC;
    signal grp_create_tree_fu_369_right_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sort_fu_379_ap_start : STD_LOGIC;
    signal grp_sort_fu_379_ap_done : STD_LOGIC;
    signal grp_sort_fu_379_ap_idle : STD_LOGIC;
    signal grp_sort_fu_379_ap_ready : STD_LOGIC;
    signal grp_sort_fu_379_in_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sort_fu_379_in_value_V_ce0 : STD_LOGIC;
    signal grp_sort_fu_379_in_frequency_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sort_fu_379_in_frequency_V_ce0 : STD_LOGIC;
    signal grp_sort_fu_379_out_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sort_fu_379_out_value_V_ce0 : STD_LOGIC;
    signal grp_sort_fu_379_out_value_V_we0 : STD_LOGIC;
    signal grp_sort_fu_379_out_value_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sort_fu_379_out_frequency_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sort_fu_379_out_frequency_V_ce0 : STD_LOGIC;
    signal grp_sort_fu_379_out_frequency_V_we0 : STD_LOGIC;
    signal grp_sort_fu_379_out_frequency_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_truncate_tree_fu_388_ap_start : STD_LOGIC;
    signal grp_truncate_tree_fu_388_ap_done : STD_LOGIC;
    signal grp_truncate_tree_fu_388_ap_idle : STD_LOGIC;
    signal grp_truncate_tree_fu_388_ap_ready : STD_LOGIC;
    signal grp_truncate_tree_fu_388_input_length_histogram_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_truncate_tree_fu_388_input_length_histogram_V_ce0 : STD_LOGIC;
    signal grp_truncate_tree_fu_388_output_length_histogram1_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_truncate_tree_fu_388_output_length_histogram1_V_ce0 : STD_LOGIC;
    signal grp_truncate_tree_fu_388_output_length_histogram1_V_we0 : STD_LOGIC;
    signal grp_truncate_tree_fu_388_output_length_histogram1_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_truncate_tree_fu_388_output_length_histogram1_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_truncate_tree_fu_388_output_length_histogram1_V_ce1 : STD_LOGIC;
    signal grp_truncate_tree_fu_388_output_length_histogram1_V_we1 : STD_LOGIC;
    signal grp_truncate_tree_fu_388_output_length_histogram1_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_truncate_tree_fu_388_output_length_histogram2_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_truncate_tree_fu_388_output_length_histogram2_V_ce0 : STD_LOGIC;
    signal grp_truncate_tree_fu_388_output_length_histogram2_V_we0 : STD_LOGIC;
    signal grp_truncate_tree_fu_388_output_length_histogram2_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_bit_length_fu_395_ap_start : STD_LOGIC;
    signal grp_compute_bit_length_fu_395_ap_done : STD_LOGIC;
    signal grp_compute_bit_length_fu_395_ap_idle : STD_LOGIC;
    signal grp_compute_bit_length_fu_395_ap_ready : STD_LOGIC;
    signal grp_compute_bit_length_fu_395_parent_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_compute_bit_length_fu_395_parent_V_ce0 : STD_LOGIC;
    signal grp_compute_bit_length_fu_395_left_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_compute_bit_length_fu_395_left_V_ce0 : STD_LOGIC;
    signal grp_compute_bit_length_fu_395_right_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_compute_bit_length_fu_395_right_V_ce0 : STD_LOGIC;
    signal grp_compute_bit_length_fu_395_length_histogram_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_compute_bit_length_fu_395_length_histogram_V_ce0 : STD_LOGIC;
    signal grp_compute_bit_length_fu_395_length_histogram_V_we0 : STD_LOGIC;
    signal grp_compute_bit_length_fu_395_length_histogram_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_create_codeword_fu_404_ap_start : STD_LOGIC;
    signal grp_create_codeword_fu_404_ap_done : STD_LOGIC;
    signal grp_create_codeword_fu_404_ap_idle : STD_LOGIC;
    signal grp_create_codeword_fu_404_ap_ready : STD_LOGIC;
    signal grp_create_codeword_fu_404_symbol_bits_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_create_codeword_fu_404_symbol_bits_V_ce0 : STD_LOGIC;
    signal grp_create_codeword_fu_404_codeword_length_histogram_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_create_codeword_fu_404_codeword_length_histogram_V_ce0 : STD_LOGIC;
    signal grp_create_codeword_fu_404_encoding_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_create_codeword_fu_404_encoding_V_ce0 : STD_LOGIC;
    signal grp_create_codeword_fu_404_encoding_V_we0 : STD_LOGIC;
    signal grp_create_codeword_fu_404_encoding_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_302 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_0_reg_313 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_0_i1_reg_324 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln13_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_066_0_i_reg_335 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_3_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_create_tree_fu_369_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_sort_fu_379_ap_start_reg : STD_LOGIC := '0';
    signal grp_truncate_tree_fu_388_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_compute_bit_length_fu_395_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_create_codeword_fu_404_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln544_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_5_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln54_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_4_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_V_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_V_1_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln209_fu_566_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component create_tree IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_value_V_ce0 : OUT STD_LOGIC;
        in_value_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_frequency_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_frequency_V_ce0 : OUT STD_LOGIC;
        in_frequency_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        num_symbols : IN STD_LOGIC_VECTOR (31 downto 0);
        parent_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        parent_V_ce0 : OUT STD_LOGIC;
        parent_V_we0 : OUT STD_LOGIC;
        parent_V_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
        left_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        left_V_ce0 : OUT STD_LOGIC;
        left_V_we0 : OUT STD_LOGIC;
        left_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        right_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        right_V_ce0 : OUT STD_LOGIC;
        right_V_we0 : OUT STD_LOGIC;
        right_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sort IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_value_V_ce0 : OUT STD_LOGIC;
        in_value_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_frequency_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_frequency_V_ce0 : OUT STD_LOGIC;
        in_frequency_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        num_symbols : IN STD_LOGIC_VECTOR (31 downto 0);
        out_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_value_V_ce0 : OUT STD_LOGIC;
        out_value_V_we0 : OUT STD_LOGIC;
        out_value_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_frequency_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_frequency_V_ce0 : OUT STD_LOGIC;
        out_frequency_V_we0 : OUT STD_LOGIC;
        out_frequency_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component truncate_tree IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_length_histogram_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        input_length_histogram_V_ce0 : OUT STD_LOGIC;
        input_length_histogram_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_length_histogram1_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_length_histogram1_V_ce0 : OUT STD_LOGIC;
        output_length_histogram1_V_we0 : OUT STD_LOGIC;
        output_length_histogram1_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_length_histogram1_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_length_histogram1_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_length_histogram1_V_ce1 : OUT STD_LOGIC;
        output_length_histogram1_V_we1 : OUT STD_LOGIC;
        output_length_histogram1_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_length_histogram1_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_length_histogram2_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_length_histogram2_V_ce0 : OUT STD_LOGIC;
        output_length_histogram2_V_we0 : OUT STD_LOGIC;
        output_length_histogram2_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compute_bit_length IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        parent_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        parent_V_ce0 : OUT STD_LOGIC;
        parent_V_q0 : IN STD_LOGIC_VECTOR (30 downto 0);
        left_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        left_V_ce0 : OUT STD_LOGIC;
        left_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        right_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        right_V_ce0 : OUT STD_LOGIC;
        right_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        num_symbols : IN STD_LOGIC_VECTOR (31 downto 0);
        length_histogram_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        length_histogram_V_ce0 : OUT STD_LOGIC;
        length_histogram_V_we0 : OUT STD_LOGIC;
        length_histogram_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component create_codeword IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        symbol_bits_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        symbol_bits_V_ce0 : OUT STD_LOGIC;
        symbol_bits_V_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        codeword_length_histogram_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        codeword_length_histogram_V_ce0 : OUT STD_LOGIC;
        codeword_length_histogram_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        encoding_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        encoding_V_ce0 : OUT STD_LOGIC;
        encoding_V_we0 : OUT STD_LOGIC;
        encoding_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sort_previous_sorbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component huffman_encoding_tde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (30 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component create_tree_frequibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compute_bit_lengtkbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component huffman_encoding_xdS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component huffman_encoding_zec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    filtered_value_V_U : component sort_previous_sorbkb
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => filtered_value_V_address0,
        ce0 => filtered_value_V_ce0,
        we0 => filtered_value_V_we0,
        d0 => symbol_histogram_value_V_q0,
        q0 => filtered_value_V_q0);

    filtered_frequency_V_U : component sort_previous_sorbkb
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => filtered_frequency_V_address0,
        ce0 => filtered_frequency_V_ce0,
        we0 => filtered_frequency_V_we0,
        d0 => symbol_histogram_fre_1_reg_602,
        q0 => filtered_frequency_V_q0);

    sorted_0_U : component sort_previous_sorbkb
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sorted_0_address0,
        ce0 => sorted_0_ce0,
        we0 => sorted_0_we0,
        d0 => grp_sort_fu_379_out_value_V_d0,
        q0 => sorted_0_q0);

    sorted_1_U : component sort_previous_sorbkb
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sorted_1_address0,
        ce0 => sorted_1_ce0,
        we0 => sorted_1_we0,
        d0 => grp_sort_fu_379_out_frequency_V_d0,
        q0 => sorted_1_q0);

    sorted_copy1_value_V_U : component sort_previous_sorbkb
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sorted_copy1_value_V_address0,
        ce0 => sorted_copy1_value_V_ce0,
        we0 => sorted_copy1_value_V_we0,
        d0 => sorted_0_q0,
        q0 => sorted_copy1_value_V_q0);

    sorted_copy1_frequen_U : component sort_previous_sorbkb
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sorted_copy1_frequen_address0,
        ce0 => sorted_copy1_frequen_ce0,
        we0 => sorted_copy1_frequen_we0,
        d0 => sorted_1_q0,
        q0 => sorted_copy1_frequen_q0);

    sorted_copy2_value_V_U : component sort_previous_sorbkb
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sorted_copy2_value_V_address0,
        ce0 => sorted_copy2_value_V_ce0,
        we0 => sorted_copy2_value_V_we0,
        d0 => sorted_0_q0,
        q0 => sorted_copy2_value_V_q0);

    parent_V_U : component huffman_encoding_tde
    generic map (
        DataWidth => 31,
        AddressRange => 255,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => parent_V_address0,
        ce0 => parent_V_ce0,
        we0 => parent_V_we0,
        d0 => grp_create_tree_fu_369_parent_V_d0,
        q0 => parent_V_q0);

    left_V_U : component create_tree_frequibs
    generic map (
        DataWidth => 32,
        AddressRange => 255,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => left_V_address0,
        ce0 => left_V_ce0,
        we0 => left_V_we0,
        d0 => grp_create_tree_fu_369_left_V_d0,
        q0 => left_V_q0);

    right_V_U : component create_tree_frequibs
    generic map (
        DataWidth => 32,
        AddressRange => 255,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => right_V_address0,
        ce0 => right_V_ce0,
        we0 => right_V_we0,
        d0 => grp_create_tree_fu_369_right_V_d0,
        q0 => right_V_q0);

    length_histogram_V_U : component compute_bit_lengtkbM
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => length_histogram_V_address0,
        ce0 => length_histogram_V_ce0,
        we0 => length_histogram_V_we0,
        d0 => grp_compute_bit_length_fu_395_length_histogram_V_d0,
        q0 => length_histogram_V_q0);

    truncated_length_his_U : component huffman_encoding_xdS
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => truncated_length_his_address0,
        ce0 => truncated_length_his_ce0,
        we0 => truncated_length_his_we0,
        d0 => grp_truncate_tree_fu_388_output_length_histogram1_V_d0,
        q0 => truncated_length_his_q0,
        address1 => grp_truncate_tree_fu_388_output_length_histogram1_V_address1,
        ce1 => truncated_length_his_ce1,
        we1 => truncated_length_his_we1,
        d1 => grp_truncate_tree_fu_388_output_length_histogram1_V_d1,
        q1 => truncated_length_his_q1);

    truncated_length_his_1_U : component compute_bit_lengtkbM
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => truncated_length_his_1_address0,
        ce0 => truncated_length_his_1_ce0,
        we0 => truncated_length_his_1_we0,
        d0 => grp_truncate_tree_fu_388_output_length_histogram2_V_d0,
        q0 => truncated_length_his_1_q0);

    symbol_bits_V_U : component huffman_encoding_zec
    generic map (
        DataWidth => 5,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => symbol_bits_V_address0,
        ce0 => symbol_bits_V_ce0,
        we0 => symbol_bits_V_we0,
        d0 => symbol_bits_V_d0,
        q0 => symbol_bits_V_q0);

    grp_create_tree_fu_369 : component create_tree
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_create_tree_fu_369_ap_start,
        ap_done => grp_create_tree_fu_369_ap_done,
        ap_idle => grp_create_tree_fu_369_ap_idle,
        ap_ready => grp_create_tree_fu_369_ap_ready,
        in_value_V_address0 => grp_create_tree_fu_369_in_value_V_address0,
        in_value_V_ce0 => grp_create_tree_fu_369_in_value_V_ce0,
        in_value_V_q0 => sorted_copy1_value_V_q0,
        in_frequency_V_address0 => grp_create_tree_fu_369_in_frequency_V_address0,
        in_frequency_V_ce0 => grp_create_tree_fu_369_in_frequency_V_ce0,
        in_frequency_V_q0 => sorted_copy1_frequen_q0,
        num_symbols => reg_425,
        parent_V_address0 => grp_create_tree_fu_369_parent_V_address0,
        parent_V_ce0 => grp_create_tree_fu_369_parent_V_ce0,
        parent_V_we0 => grp_create_tree_fu_369_parent_V_we0,
        parent_V_d0 => grp_create_tree_fu_369_parent_V_d0,
        left_V_address0 => grp_create_tree_fu_369_left_V_address0,
        left_V_ce0 => grp_create_tree_fu_369_left_V_ce0,
        left_V_we0 => grp_create_tree_fu_369_left_V_we0,
        left_V_d0 => grp_create_tree_fu_369_left_V_d0,
        right_V_address0 => grp_create_tree_fu_369_right_V_address0,
        right_V_ce0 => grp_create_tree_fu_369_right_V_ce0,
        right_V_we0 => grp_create_tree_fu_369_right_V_we0,
        right_V_d0 => grp_create_tree_fu_369_right_V_d0);

    grp_sort_fu_379 : component sort
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sort_fu_379_ap_start,
        ap_done => grp_sort_fu_379_ap_done,
        ap_idle => grp_sort_fu_379_ap_idle,
        ap_ready => grp_sort_fu_379_ap_ready,
        in_value_V_address0 => grp_sort_fu_379_in_value_V_address0,
        in_value_V_ce0 => grp_sort_fu_379_in_value_V_ce0,
        in_value_V_q0 => filtered_value_V_q0,
        in_frequency_V_address0 => grp_sort_fu_379_in_frequency_V_address0,
        in_frequency_V_ce0 => grp_sort_fu_379_in_frequency_V_ce0,
        in_frequency_V_q0 => filtered_frequency_V_q0,
        num_symbols => reg_425,
        out_value_V_address0 => grp_sort_fu_379_out_value_V_address0,
        out_value_V_ce0 => grp_sort_fu_379_out_value_V_ce0,
        out_value_V_we0 => grp_sort_fu_379_out_value_V_we0,
        out_value_V_d0 => grp_sort_fu_379_out_value_V_d0,
        out_frequency_V_address0 => grp_sort_fu_379_out_frequency_V_address0,
        out_frequency_V_ce0 => grp_sort_fu_379_out_frequency_V_ce0,
        out_frequency_V_we0 => grp_sort_fu_379_out_frequency_V_we0,
        out_frequency_V_d0 => grp_sort_fu_379_out_frequency_V_d0);

    grp_truncate_tree_fu_388 : component truncate_tree
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_truncate_tree_fu_388_ap_start,
        ap_done => grp_truncate_tree_fu_388_ap_done,
        ap_idle => grp_truncate_tree_fu_388_ap_idle,
        ap_ready => grp_truncate_tree_fu_388_ap_ready,
        input_length_histogram_V_address0 => grp_truncate_tree_fu_388_input_length_histogram_V_address0,
        input_length_histogram_V_ce0 => grp_truncate_tree_fu_388_input_length_histogram_V_ce0,
        input_length_histogram_V_q0 => length_histogram_V_q0,
        output_length_histogram1_V_address0 => grp_truncate_tree_fu_388_output_length_histogram1_V_address0,
        output_length_histogram1_V_ce0 => grp_truncate_tree_fu_388_output_length_histogram1_V_ce0,
        output_length_histogram1_V_we0 => grp_truncate_tree_fu_388_output_length_histogram1_V_we0,
        output_length_histogram1_V_d0 => grp_truncate_tree_fu_388_output_length_histogram1_V_d0,
        output_length_histogram1_V_q0 => truncated_length_his_q0,
        output_length_histogram1_V_address1 => grp_truncate_tree_fu_388_output_length_histogram1_V_address1,
        output_length_histogram1_V_ce1 => grp_truncate_tree_fu_388_output_length_histogram1_V_ce1,
        output_length_histogram1_V_we1 => grp_truncate_tree_fu_388_output_length_histogram1_V_we1,
        output_length_histogram1_V_d1 => grp_truncate_tree_fu_388_output_length_histogram1_V_d1,
        output_length_histogram1_V_q1 => truncated_length_his_q1,
        output_length_histogram2_V_address0 => grp_truncate_tree_fu_388_output_length_histogram2_V_address0,
        output_length_histogram2_V_ce0 => grp_truncate_tree_fu_388_output_length_histogram2_V_ce0,
        output_length_histogram2_V_we0 => grp_truncate_tree_fu_388_output_length_histogram2_V_we0,
        output_length_histogram2_V_d0 => grp_truncate_tree_fu_388_output_length_histogram2_V_d0);

    grp_compute_bit_length_fu_395 : component compute_bit_length
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_bit_length_fu_395_ap_start,
        ap_done => grp_compute_bit_length_fu_395_ap_done,
        ap_idle => grp_compute_bit_length_fu_395_ap_idle,
        ap_ready => grp_compute_bit_length_fu_395_ap_ready,
        parent_V_address0 => grp_compute_bit_length_fu_395_parent_V_address0,
        parent_V_ce0 => grp_compute_bit_length_fu_395_parent_V_ce0,
        parent_V_q0 => parent_V_q0,
        left_V_address0 => grp_compute_bit_length_fu_395_left_V_address0,
        left_V_ce0 => grp_compute_bit_length_fu_395_left_V_ce0,
        left_V_q0 => left_V_q0,
        right_V_address0 => grp_compute_bit_length_fu_395_right_V_address0,
        right_V_ce0 => grp_compute_bit_length_fu_395_right_V_ce0,
        right_V_q0 => right_V_q0,
        num_symbols => reg_425,
        length_histogram_V_address0 => grp_compute_bit_length_fu_395_length_histogram_V_address0,
        length_histogram_V_ce0 => grp_compute_bit_length_fu_395_length_histogram_V_ce0,
        length_histogram_V_we0 => grp_compute_bit_length_fu_395_length_histogram_V_we0,
        length_histogram_V_d0 => grp_compute_bit_length_fu_395_length_histogram_V_d0);

    grp_create_codeword_fu_404 : component create_codeword
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_create_codeword_fu_404_ap_start,
        ap_done => grp_create_codeword_fu_404_ap_done,
        ap_idle => grp_create_codeword_fu_404_ap_idle,
        ap_ready => grp_create_codeword_fu_404_ap_ready,
        symbol_bits_V_address0 => grp_create_codeword_fu_404_symbol_bits_V_address0,
        symbol_bits_V_ce0 => grp_create_codeword_fu_404_symbol_bits_V_ce0,
        symbol_bits_V_q0 => symbol_bits_V_q0,
        codeword_length_histogram_V_address0 => grp_create_codeword_fu_404_codeword_length_histogram_V_address0,
        codeword_length_histogram_V_ce0 => grp_create_codeword_fu_404_codeword_length_histogram_V_ce0,
        codeword_length_histogram_V_q0 => truncated_length_his_1_q0,
        encoding_V_address0 => grp_create_codeword_fu_404_encoding_V_address0,
        encoding_V_ce0 => grp_create_codeword_fu_404_encoding_V_ce0,
        encoding_V_we0 => grp_create_codeword_fu_404_encoding_V_we0,
        encoding_V_d0 => grp_create_codeword_fu_404_encoding_V_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_compute_bit_length_fu_395_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_bit_length_fu_395_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_compute_bit_length_fu_395_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_bit_length_fu_395_ap_ready = ap_const_logic_1)) then 
                    grp_compute_bit_length_fu_395_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_create_codeword_fu_404_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_create_codeword_fu_404_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln41_fu_521_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    grp_create_codeword_fu_404_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_create_codeword_fu_404_ap_ready = ap_const_logic_1)) then 
                    grp_create_codeword_fu_404_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_create_tree_fu_369_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_create_tree_fu_369_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln40_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    grp_create_tree_fu_369_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_create_tree_fu_369_ap_ready = ap_const_logic_1)) then 
                    grp_create_tree_fu_369_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sort_fu_379_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sort_fu_379_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln10_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_sort_fu_379_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sort_fu_379_ap_ready = ap_const_logic_1)) then 
                    grp_sort_fu_379_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_truncate_tree_fu_388_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_truncate_tree_fu_388_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_truncate_tree_fu_388_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_truncate_tree_fu_388_ap_ready = ap_const_logic_1)) then 
                    grp_truncate_tree_fu_388_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i1_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_truncate_tree_fu_388_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_0_i1_reg_324 <= ap_const_lv9_0;
            elsif (((icmp_ln13_fu_499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_0_i1_reg_324 <= i_5_fu_505_p2;
            end if; 
        end if;
    end process;

    i_0_i_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_i_reg_302 <= i_4_reg_587;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_302 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sort_fu_379_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_reg_313 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_313 <= i_reg_619;
            end if; 
        end if;
    end process;

    i_op_assign_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_499_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_op_assign_reg_347 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_op_assign_reg_347 <= k_reg_659;
            end if; 
        end if;
    end process;

    length_V_1_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln879_2_fu_550_p2 = ap_const_lv1_1) and (icmp_ln879_reg_664 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln879_2_fu_550_p2 = ap_const_lv1_0) and (icmp_ln879_reg_664 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
                length_V_1_fu_138 <= length_V_reg_668;
            elsif (((icmp_ln13_fu_499_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                length_V_1_fu_138 <= ap_const_lv32_40;
            end if; 
        end if;
    end process;

    p_066_0_i_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_499_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                p_066_0_i_reg_335 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                p_066_0_i_reg_335 <= count_V_1_fu_571_p2;
            end if; 
        end if;
    end process;

    t_V_3_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln879_2_fu_550_p2 = ap_const_lv1_0) and (icmp_ln879_reg_664 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                t_V_3_reg_359 <= truncated_length_his_q0;
            elsif (((icmp_ln41_fu_521_p2 = ap_const_lv1_0) and (icmp_ln879_fu_533_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                t_V_3_reg_359 <= p_066_0_i_reg_335;
            end if; 
        end if;
    end process;

    t_V_4_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln883_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                t_V_4_fu_78 <= j_V_fu_466_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_4_fu_78 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_4_reg_587 <= i_4_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_reg_619 <= i_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_521_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                icmp_ln879_reg_664 <= icmp_ln879_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln883_reg_607 <= icmp_ln883_fu_454_p2;
                symbol_histogram_fre_1_reg_602 <= symbol_histogram_frequency_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                k_reg_659 <= k_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                length_V_reg_668 <= length_V_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln10_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                reg_425 <= t_V_4_fu_78;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln12_reg_592(8 downto 0) <= zext_ln12_fu_449_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_481_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    zext_ln41_reg_624(30 downto 0) <= zext_ln41_fu_493_p1(30 downto 0);
            end if;
        end if;
    end process;
    zext_ln12_reg_592(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln41_reg_624(63 downto 31) <= "000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_437_p2, ap_CS_fsm_state6, icmp_ln40_fu_481_p2, ap_CS_fsm_state13, ap_CS_fsm_state14, icmp_ln879_fu_533_p2, icmp_ln879_reg_664, icmp_ln41_fu_521_p2, ap_CS_fsm_state16, icmp_ln879_2_fu_550_p2, grp_create_tree_fu_369_ap_done, grp_sort_fu_379_ap_done, grp_truncate_tree_fu_388_ap_done, grp_compute_bit_length_fu_395_ap_done, grp_create_codeword_fu_404_ap_done, ap_CS_fsm_state5, icmp_ln13_fu_499_p2, ap_CS_fsm_state12, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((grp_sort_fu_379_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln40_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((grp_create_tree_fu_369_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_compute_bit_length_fu_395_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_truncate_tree_fu_388_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln13_fu_499_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln41_fu_521_p2 = ap_const_lv1_0) and (icmp_ln879_fu_533_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((icmp_ln41_fu_521_p2 = ap_const_lv1_0) and (icmp_ln879_fu_533_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and ((icmp_ln879_2_fu_550_p2 = ap_const_lv1_0) or (icmp_ln879_reg_664 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state18 => 
                if (((grp_create_codeword_fu_404_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(grp_create_codeword_fu_404_ap_done, ap_CS_fsm_state18)
    begin
        if (((grp_create_codeword_fu_404_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_create_codeword_fu_404_ap_done, ap_CS_fsm_state18)
    begin
        if (((grp_create_codeword_fu_404_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    count_V_1_fu_571_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(t_V_3_reg_359));
    encoding_V_address0 <= grp_create_codeword_fu_404_encoding_V_address0;
    encoding_V_ce0 <= grp_create_codeword_fu_404_encoding_V_ce0;
    encoding_V_d0 <= grp_create_codeword_fu_404_encoding_V_d0;
    encoding_V_we0 <= grp_create_codeword_fu_404_encoding_V_we0;

    filtered_frequency_V_address0_assign_proc : process(grp_sort_fu_379_in_frequency_V_address0, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln544_fu_460_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filtered_frequency_V_address0 <= zext_ln544_fu_460_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            filtered_frequency_V_address0 <= grp_sort_fu_379_in_frequency_V_address0;
        else 
            filtered_frequency_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    filtered_frequency_V_ce0_assign_proc : process(grp_sort_fu_379_in_frequency_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filtered_frequency_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            filtered_frequency_V_ce0 <= grp_sort_fu_379_in_frequency_V_ce0;
        else 
            filtered_frequency_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filtered_frequency_V_we0_assign_proc : process(icmp_ln883_reg_607, ap_CS_fsm_state4)
    begin
        if (((icmp_ln883_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            filtered_frequency_V_we0 <= ap_const_logic_1;
        else 
            filtered_frequency_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    filtered_value_V_address0_assign_proc : process(grp_sort_fu_379_in_value_V_address0, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln544_fu_460_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filtered_value_V_address0 <= zext_ln544_fu_460_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            filtered_value_V_address0 <= grp_sort_fu_379_in_value_V_address0;
        else 
            filtered_value_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    filtered_value_V_ce0_assign_proc : process(grp_sort_fu_379_in_value_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filtered_value_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            filtered_value_V_ce0 <= grp_sort_fu_379_in_value_V_ce0;
        else 
            filtered_value_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filtered_value_V_we0_assign_proc : process(icmp_ln883_reg_607, ap_CS_fsm_state4)
    begin
        if (((icmp_ln883_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            filtered_value_V_we0 <= ap_const_logic_1;
        else 
            filtered_value_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_compute_bit_length_fu_395_ap_start <= grp_compute_bit_length_fu_395_ap_start_reg;
    grp_create_codeword_fu_404_ap_start <= grp_create_codeword_fu_404_ap_start_reg;
    grp_create_tree_fu_369_ap_start <= grp_create_tree_fu_369_ap_start_reg;
    grp_sort_fu_379_ap_start <= grp_sort_fu_379_ap_start_reg;
    grp_truncate_tree_fu_388_ap_start <= grp_truncate_tree_fu_388_ap_start_reg;
    i_4_fu_443_p2 <= std_logic_vector(unsigned(i_0_i_reg_302) + unsigned(ap_const_lv9_1));
    i_5_fu_505_p2 <= std_logic_vector(unsigned(i_0_i1_reg_324) + unsigned(ap_const_lv9_1));
    i_fu_487_p2 <= std_logic_vector(unsigned(i_0_reg_313) + unsigned(ap_const_lv31_1));
    icmp_ln10_fu_437_p2 <= "1" when (i_0_i_reg_302 = ap_const_lv9_100) else "0";
    icmp_ln13_fu_499_p2 <= "1" when (i_0_i1_reg_324 = ap_const_lv9_100) else "0";
    icmp_ln40_fu_481_p2 <= "1" when (signed(zext_ln40_fu_477_p1) < signed(t_V_4_fu_78)) else "0";
    icmp_ln41_fu_521_p2 <= "1" when (i_op_assign_reg_347 = t_V_4_fu_78) else "0";
    icmp_ln879_2_fu_550_p2 <= "1" when (truncated_length_his_q0 = ap_const_lv32_0) else "0";
    icmp_ln879_fu_533_p2 <= "1" when (p_066_0_i_reg_335 = ap_const_lv32_0) else "0";
    icmp_ln883_fu_454_p2 <= "1" when (symbol_histogram_frequency_V_q0 = ap_const_lv32_0) else "0";
    j_V_fu_466_p2 <= std_logic_vector(unsigned(t_V_4_fu_78) + unsigned(ap_const_lv32_1));
    k_fu_527_p2 <= std_logic_vector(unsigned(i_op_assign_reg_347) + unsigned(ap_const_lv32_1));

    left_V_address0_assign_proc : process(grp_create_tree_fu_369_left_V_address0, grp_compute_bit_length_fu_395_left_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            left_V_address0 <= grp_compute_bit_length_fu_395_left_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            left_V_address0 <= grp_create_tree_fu_369_left_V_address0;
        else 
            left_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    left_V_ce0_assign_proc : process(grp_create_tree_fu_369_left_V_ce0, grp_compute_bit_length_fu_395_left_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            left_V_ce0 <= grp_compute_bit_length_fu_395_left_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            left_V_ce0 <= grp_create_tree_fu_369_left_V_ce0;
        else 
            left_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    left_V_we0_assign_proc : process(grp_create_tree_fu_369_left_V_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            left_V_we0 <= grp_create_tree_fu_369_left_V_we0;
        else 
            left_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    length_V_fu_539_p2 <= std_logic_vector(unsigned(length_V_1_fu_138) + unsigned(ap_const_lv32_FFFFFFFF));

    length_histogram_V_address0_assign_proc : process(grp_truncate_tree_fu_388_input_length_histogram_V_address0, grp_compute_bit_length_fu_395_length_histogram_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            length_histogram_V_address0 <= grp_compute_bit_length_fu_395_length_histogram_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            length_histogram_V_address0 <= grp_truncate_tree_fu_388_input_length_histogram_V_address0;
        else 
            length_histogram_V_address0 <= "XXXXXX";
        end if; 
    end process;


    length_histogram_V_ce0_assign_proc : process(grp_truncate_tree_fu_388_input_length_histogram_V_ce0, grp_compute_bit_length_fu_395_length_histogram_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            length_histogram_V_ce0 <= grp_compute_bit_length_fu_395_length_histogram_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            length_histogram_V_ce0 <= grp_truncate_tree_fu_388_input_length_histogram_V_ce0;
        else 
            length_histogram_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    length_histogram_V_we0_assign_proc : process(grp_compute_bit_length_fu_395_length_histogram_V_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            length_histogram_V_we0 <= grp_compute_bit_length_fu_395_length_histogram_V_we0;
        else 
            length_histogram_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    num_nonzero_symbols <= t_V_4_fu_78;

    num_nonzero_symbols_ap_vld_assign_proc : process(ap_CS_fsm_state14, icmp_ln41_fu_521_p2)
    begin
        if (((icmp_ln41_fu_521_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            num_nonzero_symbols_ap_vld <= ap_const_logic_1;
        else 
            num_nonzero_symbols_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    parent_V_address0_assign_proc : process(grp_create_tree_fu_369_parent_V_address0, grp_compute_bit_length_fu_395_parent_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            parent_V_address0 <= grp_compute_bit_length_fu_395_parent_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            parent_V_address0 <= grp_create_tree_fu_369_parent_V_address0;
        else 
            parent_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    parent_V_ce0_assign_proc : process(grp_create_tree_fu_369_parent_V_ce0, grp_compute_bit_length_fu_395_parent_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            parent_V_ce0 <= grp_compute_bit_length_fu_395_parent_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            parent_V_ce0 <= grp_create_tree_fu_369_parent_V_ce0;
        else 
            parent_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    parent_V_we0_assign_proc : process(grp_create_tree_fu_369_parent_V_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            parent_V_we0 <= grp_create_tree_fu_369_parent_V_we0;
        else 
            parent_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    right_V_address0_assign_proc : process(grp_create_tree_fu_369_right_V_address0, grp_compute_bit_length_fu_395_right_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            right_V_address0 <= grp_compute_bit_length_fu_395_right_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            right_V_address0 <= grp_create_tree_fu_369_right_V_address0;
        else 
            right_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    right_V_ce0_assign_proc : process(grp_create_tree_fu_369_right_V_ce0, grp_compute_bit_length_fu_395_right_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            right_V_ce0 <= grp_compute_bit_length_fu_395_right_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            right_V_ce0 <= grp_create_tree_fu_369_right_V_ce0;
        else 
            right_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    right_V_we0_assign_proc : process(grp_create_tree_fu_369_right_V_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            right_V_we0 <= grp_create_tree_fu_369_right_V_we0;
        else 
            right_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln54_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sorted_copy2_value_V_q0),64));


    sorted_0_address0_assign_proc : process(ap_CS_fsm_state6, zext_ln41_fu_493_p1, grp_sort_fu_379_out_value_V_address0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sorted_0_address0 <= zext_ln41_fu_493_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sorted_0_address0 <= grp_sort_fu_379_out_value_V_address0;
        else 
            sorted_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sorted_0_ce0_assign_proc : process(ap_CS_fsm_state6, grp_sort_fu_379_out_value_V_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sorted_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sorted_0_ce0 <= grp_sort_fu_379_out_value_V_ce0;
        else 
            sorted_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_0_we0_assign_proc : process(grp_sort_fu_379_out_value_V_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sorted_0_we0 <= grp_sort_fu_379_out_value_V_we0;
        else 
            sorted_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_1_address0_assign_proc : process(ap_CS_fsm_state6, zext_ln41_fu_493_p1, grp_sort_fu_379_out_frequency_V_address0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sorted_1_address0 <= zext_ln41_fu_493_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sorted_1_address0 <= grp_sort_fu_379_out_frequency_V_address0;
        else 
            sorted_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sorted_1_ce0_assign_proc : process(ap_CS_fsm_state6, grp_sort_fu_379_out_frequency_V_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sorted_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sorted_1_ce0 <= grp_sort_fu_379_out_frequency_V_ce0;
        else 
            sorted_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_1_we0_assign_proc : process(grp_sort_fu_379_out_frequency_V_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sorted_1_we0 <= grp_sort_fu_379_out_frequency_V_we0;
        else 
            sorted_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_copy1_frequen_address0_assign_proc : process(zext_ln41_reg_624, grp_create_tree_fu_369_in_frequency_V_address0, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sorted_copy1_frequen_address0 <= zext_ln41_reg_624(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sorted_copy1_frequen_address0 <= grp_create_tree_fu_369_in_frequency_V_address0;
        else 
            sorted_copy1_frequen_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sorted_copy1_frequen_ce0_assign_proc : process(grp_create_tree_fu_369_in_frequency_V_ce0, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sorted_copy1_frequen_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sorted_copy1_frequen_ce0 <= grp_create_tree_fu_369_in_frequency_V_ce0;
        else 
            sorted_copy1_frequen_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_copy1_frequen_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sorted_copy1_frequen_we0 <= ap_const_logic_1;
        else 
            sorted_copy1_frequen_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_copy1_value_V_address0_assign_proc : process(zext_ln41_reg_624, grp_create_tree_fu_369_in_value_V_address0, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sorted_copy1_value_V_address0 <= zext_ln41_reg_624(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sorted_copy1_value_V_address0 <= grp_create_tree_fu_369_in_value_V_address0;
        else 
            sorted_copy1_value_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sorted_copy1_value_V_ce0_assign_proc : process(grp_create_tree_fu_369_in_value_V_ce0, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sorted_copy1_value_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sorted_copy1_value_V_ce0 <= grp_create_tree_fu_369_in_value_V_ce0;
        else 
            sorted_copy1_value_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_copy1_value_V_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sorted_copy1_value_V_we0 <= ap_const_logic_1;
        else 
            sorted_copy1_value_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_copy2_value_V_address0_assign_proc : process(zext_ln41_reg_624, ap_CS_fsm_state16, ap_CS_fsm_state7, zext_ln53_fu_556_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sorted_copy2_value_V_address0 <= zext_ln53_fu_556_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sorted_copy2_value_V_address0 <= zext_ln41_reg_624(8 - 1 downto 0);
        else 
            sorted_copy2_value_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sorted_copy2_value_V_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            sorted_copy2_value_V_ce0 <= ap_const_logic_1;
        else 
            sorted_copy2_value_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_copy2_value_V_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sorted_copy2_value_V_we0 <= ap_const_logic_1;
        else 
            sorted_copy2_value_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    symbol_bits_V_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state17, grp_create_codeword_fu_404_symbol_bits_V_address0, ap_CS_fsm_state18, zext_ln14_fu_511_p1, sext_ln54_fu_561_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            symbol_bits_V_address0 <= sext_ln54_fu_561_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            symbol_bits_V_address0 <= zext_ln14_fu_511_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            symbol_bits_V_address0 <= grp_create_codeword_fu_404_symbol_bits_V_address0;
        else 
            symbol_bits_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    symbol_bits_V_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state17, grp_create_codeword_fu_404_symbol_bits_V_ce0, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            symbol_bits_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            symbol_bits_V_ce0 <= grp_create_codeword_fu_404_symbol_bits_V_ce0;
        else 
            symbol_bits_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    symbol_bits_V_d0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state17, trunc_ln209_fu_566_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            symbol_bits_V_d0 <= trunc_ln209_fu_566_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            symbol_bits_V_d0 <= ap_const_lv5_0;
        else 
            symbol_bits_V_d0 <= "XXXXX";
        end if; 
    end process;


    symbol_bits_V_we0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state17, icmp_ln13_fu_499_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((icmp_ln13_fu_499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            symbol_bits_V_we0 <= ap_const_logic_1;
        else 
            symbol_bits_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    symbol_histogram_frequency_V_address0 <= zext_ln12_fu_449_p1(8 - 1 downto 0);

    symbol_histogram_frequency_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            symbol_histogram_frequency_V_ce0 <= ap_const_logic_1;
        else 
            symbol_histogram_frequency_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    symbol_histogram_value_V_address0 <= zext_ln12_reg_592(8 - 1 downto 0);

    symbol_histogram_value_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            symbol_histogram_value_V_ce0 <= ap_const_logic_1;
        else 
            symbol_histogram_value_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln209_fu_566_p1 <= length_V_1_fu_138(5 - 1 downto 0);

    truncated_length_his_1_address0_assign_proc : process(grp_truncate_tree_fu_388_output_length_histogram2_V_address0, grp_create_codeword_fu_404_codeword_length_histogram_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            truncated_length_his_1_address0 <= grp_create_codeword_fu_404_codeword_length_histogram_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            truncated_length_his_1_address0 <= grp_truncate_tree_fu_388_output_length_histogram2_V_address0;
        else 
            truncated_length_his_1_address0 <= "XXXXXX";
        end if; 
    end process;


    truncated_length_his_1_ce0_assign_proc : process(grp_truncate_tree_fu_388_output_length_histogram2_V_ce0, grp_create_codeword_fu_404_codeword_length_histogram_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            truncated_length_his_1_ce0 <= grp_create_codeword_fu_404_codeword_length_histogram_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            truncated_length_his_1_ce0 <= grp_truncate_tree_fu_388_output_length_histogram2_V_ce0;
        else 
            truncated_length_his_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    truncated_length_his_1_we0_assign_proc : process(grp_truncate_tree_fu_388_output_length_histogram2_V_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            truncated_length_his_1_we0 <= grp_truncate_tree_fu_388_output_length_histogram2_V_we0;
        else 
            truncated_length_his_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    truncated_length_his_address0_assign_proc : process(ap_CS_fsm_state15, grp_truncate_tree_fu_388_output_length_histogram1_V_address0, ap_CS_fsm_state12, zext_ln544_5_fu_545_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            truncated_length_his_address0 <= zext_ln544_5_fu_545_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            truncated_length_his_address0 <= grp_truncate_tree_fu_388_output_length_histogram1_V_address0;
        else 
            truncated_length_his_address0 <= "XXXXXX";
        end if; 
    end process;


    truncated_length_his_ce0_assign_proc : process(ap_CS_fsm_state15, grp_truncate_tree_fu_388_output_length_histogram1_V_ce0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            truncated_length_his_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            truncated_length_his_ce0 <= grp_truncate_tree_fu_388_output_length_histogram1_V_ce0;
        else 
            truncated_length_his_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    truncated_length_his_ce1_assign_proc : process(grp_truncate_tree_fu_388_output_length_histogram1_V_ce1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            truncated_length_his_ce1 <= grp_truncate_tree_fu_388_output_length_histogram1_V_ce1;
        else 
            truncated_length_his_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    truncated_length_his_we0_assign_proc : process(grp_truncate_tree_fu_388_output_length_histogram1_V_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            truncated_length_his_we0 <= grp_truncate_tree_fu_388_output_length_histogram1_V_we0;
        else 
            truncated_length_his_we0 <= ap_const_logic_0;
        end if; 
    end process;


    truncated_length_his_we1_assign_proc : process(grp_truncate_tree_fu_388_output_length_histogram1_V_we1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            truncated_length_his_we1 <= grp_truncate_tree_fu_388_output_length_histogram1_V_we1;
        else 
            truncated_length_his_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln12_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_302),64));
    zext_ln14_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i1_reg_324),64));
    zext_ln40_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_313),32));
    zext_ln41_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_313),64));
    zext_ln53_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_347),64));
    zext_ln544_5_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_V_fu_539_p2),64));
    zext_ln544_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_4_fu_78),64));
end behav;
