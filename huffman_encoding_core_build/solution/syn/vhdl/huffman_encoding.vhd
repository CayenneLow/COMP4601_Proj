-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity huffman_encoding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    symbol_histogram_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    symbol_histogram_value_V_ce0 : OUT STD_LOGIC;
    symbol_histogram_value_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    symbol_histogram_value_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    symbol_histogram_value_V_we0 : OUT STD_LOGIC;
    symbol_histogram_value_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    symbol_histogram_value_V_ce1 : OUT STD_LOGIC;
    symbol_histogram_value_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    symbol_histogram_value_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    symbol_histogram_value_V_we1 : OUT STD_LOGIC;
    symbol_histogram_frequency_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    symbol_histogram_frequency_V_ce0 : OUT STD_LOGIC;
    symbol_histogram_frequency_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    symbol_histogram_frequency_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    symbol_histogram_frequency_V_we0 : OUT STD_LOGIC;
    symbol_histogram_frequency_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    symbol_histogram_frequency_V_ce1 : OUT STD_LOGIC;
    symbol_histogram_frequency_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    symbol_histogram_frequency_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    symbol_histogram_frequency_V_we1 : OUT STD_LOGIC;
    encoding_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encoding_V_ce0 : OUT STD_LOGIC;
    encoding_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    encoding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    encoding_V_we0 : OUT STD_LOGIC;
    encoding_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encoding_V_ce1 : OUT STD_LOGIC;
    encoding_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    encoding_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    encoding_V_we1 : OUT STD_LOGIC;
    num_nonzero_symbols : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    num_nonzero_symbols_ap_vld : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of huffman_encoding is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "huffman_encoding,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.661000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=23,HLS_SYN_DSP=0,HLS_SYN_FF=4955,HLS_SYN_LUT=6056,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal filtered_value_V_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_value_V_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_frequency_V_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_frequency_V_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_0_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_copy1_value_V_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_copy1_value_V_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_copy1_frequen_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_copy1_frequen_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_copy2_value_V_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sorted_copy2_value_V_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal parent_V_i_q0 : STD_LOGIC_VECTOR (30 downto 0);
    signal parent_V_t_q0 : STD_LOGIC_VECTOR (30 downto 0);
    signal left_V_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_V_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_V_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_V_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_histogram_V_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_histogram_V_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal truncated_length_his_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal truncated_length_his_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal truncated_length_his_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal truncated_length_his_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal truncated_length_his_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal truncated_length_his_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal symbol_bits_V_i_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal symbol_bits_V_t_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal filter_U0_ap_start : STD_LOGIC;
    signal filter_U0_ap_done : STD_LOGIC;
    signal filter_U0_ap_continue : STD_LOGIC;
    signal filter_U0_ap_idle : STD_LOGIC;
    signal filter_U0_ap_ready : STD_LOGIC;
    signal filter_U0_in_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal filter_U0_in_value_V_ce0 : STD_LOGIC;
    signal filter_U0_in_frequency_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal filter_U0_in_frequency_V_ce0 : STD_LOGIC;
    signal filter_U0_out_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal filter_U0_out_value_V_ce0 : STD_LOGIC;
    signal filter_U0_out_value_V_we0 : STD_LOGIC;
    signal filter_U0_out_value_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_U0_out_frequency_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal filter_U0_out_frequency_V_ce0 : STD_LOGIC;
    signal filter_U0_out_frequency_V_we0 : STD_LOGIC;
    signal filter_U0_out_frequency_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_U0_n_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_U0_n_out_write : STD_LOGIC;
    signal ap_channel_done_filtered_frequency_V : STD_LOGIC;
    signal filter_U0_out_frequency_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_filtered_frequency_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_filtered_frequency_V : STD_LOGIC;
    signal ap_channel_done_filtered_value_V : STD_LOGIC;
    signal filter_U0_out_value_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_filtered_value_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_filtered_value_V : STD_LOGIC;
    signal sort_U0_ap_start : STD_LOGIC;
    signal sort_U0_ap_done : STD_LOGIC;
    signal sort_U0_ap_continue : STD_LOGIC;
    signal sort_U0_ap_idle : STD_LOGIC;
    signal sort_U0_ap_ready : STD_LOGIC;
    signal sort_U0_in_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sort_U0_in_value_V_ce0 : STD_LOGIC;
    signal sort_U0_in_frequency_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sort_U0_in_frequency_V_ce0 : STD_LOGIC;
    signal sort_U0_n_read : STD_LOGIC;
    signal sort_U0_out_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sort_U0_out_value_V_ce0 : STD_LOGIC;
    signal sort_U0_out_value_V_we0 : STD_LOGIC;
    signal sort_U0_out_value_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sort_U0_out_frequency_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sort_U0_out_frequency_V_ce0 : STD_LOGIC;
    signal sort_U0_out_frequency_V_we0 : STD_LOGIC;
    signal sort_U0_out_frequency_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sort_U0_n_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sort_U0_n_out_write : STD_LOGIC;
    signal ap_channel_done_sorted_1 : STD_LOGIC;
    signal sort_U0_out_frequency_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_sorted_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_sorted_1 : STD_LOGIC;
    signal ap_channel_done_sorted_0 : STD_LOGIC;
    signal sort_U0_out_value_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_sorted_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_sorted_0 : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_ap_start : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_ap_done : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_ap_continue : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_ap_idle : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_ap_ready : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_start_out : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_start_write : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_n_read : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_sorted_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_copy_sorted_pro_U0_sorted_0_ce0 : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_sorted_copy1_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_copy_sorted_pro_U0_sorted_copy1_value_V_ce0 : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_sorted_copy1_value_V_we0 : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_sorted_copy1_value_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_copy_sorted_pro_U0_sorted_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_copy_sorted_pro_U0_sorted_1_ce0 : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_sorted_copy1_frequency_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_copy_sorted_pro_U0_sorted_copy1_frequency_V_ce0 : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_sorted_copy1_frequency_V_we0 : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_sorted_copy1_frequency_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_copy_sorted_pro_U0_sorted_copy2_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_copy_sorted_pro_U0_sorted_copy2_value_V_ce0 : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_sorted_copy2_value_V_we0 : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_sorted_copy2_value_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_copy_sorted_pro_U0_val_assign_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_copy_sorted_pro_U0_val_assign_out_out_write : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_val_assign_out_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_copy_sorted_pro_U0_val_assign_out_out1_write : STD_LOGIC;
    signal ap_channel_done_sorted_copy2_value_V : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_sorted_copy2_value_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_sorted_copy2_value_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_sorted_copy2_value_V : STD_LOGIC;
    signal ap_channel_done_sorted_copy1_frequen : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_sorted_copy1_frequency_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_sorted_copy1_frequen : STD_LOGIC := '0';
    signal ap_sync_channel_write_sorted_copy1_frequen : STD_LOGIC;
    signal ap_channel_done_sorted_copy1_value_V : STD_LOGIC;
    signal Loop_copy_sorted_pro_U0_sorted_copy1_value_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_sorted_copy1_value_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_sorted_copy1_value_V : STD_LOGIC;
    signal create_tree_U0_ap_start : STD_LOGIC;
    signal create_tree_U0_ap_done : STD_LOGIC;
    signal create_tree_U0_ap_continue : STD_LOGIC;
    signal create_tree_U0_ap_idle : STD_LOGIC;
    signal create_tree_U0_ap_ready : STD_LOGIC;
    signal create_tree_U0_in_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal create_tree_U0_in_value_V_ce0 : STD_LOGIC;
    signal create_tree_U0_in_frequency_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal create_tree_U0_in_frequency_V_ce0 : STD_LOGIC;
    signal create_tree_U0_val_assign_loc_read : STD_LOGIC;
    signal create_tree_U0_parent_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal create_tree_U0_parent_V_ce0 : STD_LOGIC;
    signal create_tree_U0_parent_V_we0 : STD_LOGIC;
    signal create_tree_U0_parent_V_d0 : STD_LOGIC_VECTOR (30 downto 0);
    signal create_tree_U0_left_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal create_tree_U0_left_V_ce0 : STD_LOGIC;
    signal create_tree_U0_left_V_we0 : STD_LOGIC;
    signal create_tree_U0_left_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal create_tree_U0_right_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal create_tree_U0_right_V_ce0 : STD_LOGIC;
    signal create_tree_U0_right_V_we0 : STD_LOGIC;
    signal create_tree_U0_right_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal create_tree_U0_val_assign_loc_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal create_tree_U0_val_assign_loc_out_write : STD_LOGIC;
    signal ap_channel_done_right_V : STD_LOGIC;
    signal create_tree_U0_right_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_right_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_right_V : STD_LOGIC;
    signal ap_channel_done_left_V : STD_LOGIC;
    signal create_tree_U0_left_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_left_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_left_V : STD_LOGIC;
    signal ap_channel_done_parent_V : STD_LOGIC;
    signal create_tree_U0_parent_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_parent_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_parent_V : STD_LOGIC;
    signal compute_bit_length_U0_ap_start : STD_LOGIC;
    signal compute_bit_length_U0_ap_done : STD_LOGIC;
    signal compute_bit_length_U0_ap_continue : STD_LOGIC;
    signal compute_bit_length_U0_ap_idle : STD_LOGIC;
    signal compute_bit_length_U0_ap_ready : STD_LOGIC;
    signal compute_bit_length_U0_parent_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal compute_bit_length_U0_parent_V_ce0 : STD_LOGIC;
    signal compute_bit_length_U0_left_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal compute_bit_length_U0_left_V_ce0 : STD_LOGIC;
    signal compute_bit_length_U0_right_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal compute_bit_length_U0_right_V_ce0 : STD_LOGIC;
    signal compute_bit_length_U0_val_assign_loc_read : STD_LOGIC;
    signal compute_bit_length_U0_length_histogram_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal compute_bit_length_U0_length_histogram_V_ce0 : STD_LOGIC;
    signal compute_bit_length_U0_length_histogram_V_we0 : STD_LOGIC;
    signal compute_bit_length_U0_length_histogram_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_bit_length_U0_val_assign_loc_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_bit_length_U0_val_assign_loc_out_write : STD_LOGIC;
    signal ap_channel_done_length_histogram_V : STD_LOGIC;
    signal compute_bit_length_U0_length_histogram_V_full_n : STD_LOGIC;
    signal truncate_tree_U0_ap_start : STD_LOGIC;
    signal truncate_tree_U0_ap_done : STD_LOGIC;
    signal truncate_tree_U0_ap_continue : STD_LOGIC;
    signal truncate_tree_U0_ap_idle : STD_LOGIC;
    signal truncate_tree_U0_ap_ready : STD_LOGIC;
    signal truncate_tree_U0_input_length_histogram_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal truncate_tree_U0_input_length_histogram_V_ce0 : STD_LOGIC;
    signal truncate_tree_U0_output_length_histogram1_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal truncate_tree_U0_output_length_histogram1_V_ce0 : STD_LOGIC;
    signal truncate_tree_U0_output_length_histogram1_V_we0 : STD_LOGIC;
    signal truncate_tree_U0_output_length_histogram1_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal truncate_tree_U0_output_length_histogram1_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal truncate_tree_U0_output_length_histogram1_V_ce1 : STD_LOGIC;
    signal truncate_tree_U0_output_length_histogram1_V_we1 : STD_LOGIC;
    signal truncate_tree_U0_output_length_histogram1_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal truncate_tree_U0_output_length_histogram2_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal truncate_tree_U0_output_length_histogram2_V_ce0 : STD_LOGIC;
    signal truncate_tree_U0_output_length_histogram2_V_we0 : STD_LOGIC;
    signal truncate_tree_U0_output_length_histogram2_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_truncated_length_his_1 : STD_LOGIC;
    signal truncate_tree_U0_output_length_histogram2_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_truncated_length_his_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_truncated_length_his_1 : STD_LOGIC;
    signal ap_channel_done_truncated_length_his : STD_LOGIC;
    signal truncate_tree_U0_output_length_histogram1_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_truncated_length_his : STD_LOGIC := '0';
    signal ap_sync_channel_write_truncated_length_his : STD_LOGIC;
    signal canonize_tree_U0_ap_start : STD_LOGIC;
    signal canonize_tree_U0_ap_done : STD_LOGIC;
    signal canonize_tree_U0_ap_continue : STD_LOGIC;
    signal canonize_tree_U0_ap_idle : STD_LOGIC;
    signal canonize_tree_U0_ap_ready : STD_LOGIC;
    signal canonize_tree_U0_sorted_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal canonize_tree_U0_sorted_value_V_ce0 : STD_LOGIC;
    signal canonize_tree_U0_val_assign_loc_read : STD_LOGIC;
    signal canonize_tree_U0_codeword_length_histogram_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal canonize_tree_U0_codeword_length_histogram_V_ce0 : STD_LOGIC;
    signal canonize_tree_U0_symbol_bits_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal canonize_tree_U0_symbol_bits_V_ce0 : STD_LOGIC;
    signal canonize_tree_U0_symbol_bits_V_we0 : STD_LOGIC;
    signal canonize_tree_U0_symbol_bits_V_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_channel_done_symbol_bits_V : STD_LOGIC;
    signal canonize_tree_U0_symbol_bits_V_full_n : STD_LOGIC;
    signal create_codeword_U0_ap_start : STD_LOGIC;
    signal create_codeword_U0_ap_done : STD_LOGIC;
    signal create_codeword_U0_ap_continue : STD_LOGIC;
    signal create_codeword_U0_ap_idle : STD_LOGIC;
    signal create_codeword_U0_ap_ready : STD_LOGIC;
    signal create_codeword_U0_symbol_bits_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal create_codeword_U0_symbol_bits_V_ce0 : STD_LOGIC;
    signal create_codeword_U0_codeword_length_histogram_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal create_codeword_U0_codeword_length_histogram_V_ce0 : STD_LOGIC;
    signal create_codeword_U0_encoding_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal create_codeword_U0_encoding_V_ce0 : STD_LOGIC;
    signal create_codeword_U0_encoding_V_we0 : STD_LOGIC;
    signal create_codeword_U0_encoding_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal Block_proc_U0_ap_start : STD_LOGIC;
    signal Block_proc_U0_ap_done : STD_LOGIC;
    signal Block_proc_U0_ap_continue : STD_LOGIC;
    signal Block_proc_U0_ap_idle : STD_LOGIC;
    signal Block_proc_U0_ap_ready : STD_LOGIC;
    signal Block_proc_U0_val_assign_loc_read : STD_LOGIC;
    signal Block_proc_U0_num_nonzero_symbols : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc_U0_num_nonzero_symbols_ap_vld : STD_LOGIC;
    signal filtered_value_V_i_full_n : STD_LOGIC;
    signal filtered_value_V_t_empty_n : STD_LOGIC;
    signal filtered_frequency_V_i_full_n : STD_LOGIC;
    signal filtered_frequency_V_t_empty_n : STD_LOGIC;
    signal sorted_0_i_full_n : STD_LOGIC;
    signal sorted_0_t_empty_n : STD_LOGIC;
    signal sorted_1_i_full_n : STD_LOGIC;
    signal sorted_1_t_empty_n : STD_LOGIC;
    signal sorted_copy1_value_V_i_full_n : STD_LOGIC;
    signal sorted_copy1_value_V_t_empty_n : STD_LOGIC;
    signal sorted_copy1_frequen_i_full_n : STD_LOGIC;
    signal sorted_copy1_frequen_t_empty_n : STD_LOGIC;
    signal sorted_copy2_value_V_i_full_n : STD_LOGIC;
    signal sorted_copy2_value_V_t_empty_n : STD_LOGIC;
    signal parent_V_i_full_n : STD_LOGIC;
    signal parent_V_t_empty_n : STD_LOGIC;
    signal left_V_i_full_n : STD_LOGIC;
    signal left_V_t_empty_n : STD_LOGIC;
    signal right_V_i_full_n : STD_LOGIC;
    signal right_V_t_empty_n : STD_LOGIC;
    signal length_histogram_V_i_full_n : STD_LOGIC;
    signal length_histogram_V_t_empty_n : STD_LOGIC;
    signal truncated_length_his_i_full_n : STD_LOGIC;
    signal truncated_length_his_t_empty_n : STD_LOGIC;
    signal truncated_length_his_1_i_full_n : STD_LOGIC;
    signal truncated_length_his_1_t_empty_n : STD_LOGIC;
    signal symbol_bits_V_i_full_n : STD_LOGIC;
    signal symbol_bits_V_t_empty_n : STD_LOGIC;
    signal n_c_full_n : STD_LOGIC;
    signal n_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal n_c_empty_n : STD_LOGIC;
    signal n_c16_full_n : STD_LOGIC;
    signal n_c16_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal n_c16_empty_n : STD_LOGIC;
    signal val_assign_loc_c_full_n : STD_LOGIC;
    signal val_assign_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_loc_c_empty_n : STD_LOGIC;
    signal val_assign_loc_c17_full_n : STD_LOGIC;
    signal val_assign_loc_c17_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_loc_c17_empty_n : STD_LOGIC;
    signal val_assign_loc_c18_full_n : STD_LOGIC;
    signal val_assign_loc_c18_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_loc_c18_empty_n : STD_LOGIC;
    signal val_assign_loc_c19_full_n : STD_LOGIC;
    signal val_assign_loc_c19_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_loc_c19_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal filter_U0_start_full_n : STD_LOGIC;
    signal filter_U0_start_write : STD_LOGIC;
    signal sort_U0_start_full_n : STD_LOGIC;
    signal sort_U0_start_write : STD_LOGIC;
    signal start_for_Block_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_proc_U0_full_n : STD_LOGIC;
    signal start_for_Block_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_proc_U0_empty_n : STD_LOGIC;
    signal create_tree_U0_start_full_n : STD_LOGIC;
    signal create_tree_U0_start_write : STD_LOGIC;
    signal compute_bit_length_U0_start_full_n : STD_LOGIC;
    signal compute_bit_length_U0_start_write : STD_LOGIC;
    signal truncate_tree_U0_start_full_n : STD_LOGIC;
    signal truncate_tree_U0_start_write : STD_LOGIC;
    signal canonize_tree_U0_start_full_n : STD_LOGIC;
    signal canonize_tree_U0_start_write : STD_LOGIC;
    signal create_codeword_U0_start_full_n : STD_LOGIC;
    signal create_codeword_U0_start_write : STD_LOGIC;
    signal Block_proc_U0_start_full_n : STD_LOGIC;
    signal Block_proc_U0_start_write : STD_LOGIC;

    component filter IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_value_V_ce0 : OUT STD_LOGIC;
        in_value_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_frequency_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_frequency_V_ce0 : OUT STD_LOGIC;
        in_frequency_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_value_V_ce0 : OUT STD_LOGIC;
        out_value_V_we0 : OUT STD_LOGIC;
        out_value_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_frequency_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_frequency_V_ce0 : OUT STD_LOGIC;
        out_frequency_V_we0 : OUT STD_LOGIC;
        out_frequency_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        n_out_full_n : IN STD_LOGIC;
        n_out_write : OUT STD_LOGIC );
    end component;


    component sort IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_value_V_ce0 : OUT STD_LOGIC;
        in_value_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_frequency_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_frequency_V_ce0 : OUT STD_LOGIC;
        in_frequency_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        n_empty_n : IN STD_LOGIC;
        n_read : OUT STD_LOGIC;
        out_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_value_V_ce0 : OUT STD_LOGIC;
        out_value_V_we0 : OUT STD_LOGIC;
        out_value_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_frequency_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_frequency_V_ce0 : OUT STD_LOGIC;
        out_frequency_V_we0 : OUT STD_LOGIC;
        out_frequency_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        n_out_full_n : IN STD_LOGIC;
        n_out_write : OUT STD_LOGIC );
    end component;


    component Loop_copy_sorted_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        n_empty_n : IN STD_LOGIC;
        n_read : OUT STD_LOGIC;
        sorted_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sorted_0_ce0 : OUT STD_LOGIC;
        sorted_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sorted_copy1_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sorted_copy1_value_V_ce0 : OUT STD_LOGIC;
        sorted_copy1_value_V_we0 : OUT STD_LOGIC;
        sorted_copy1_value_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sorted_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sorted_1_ce0 : OUT STD_LOGIC;
        sorted_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sorted_copy1_frequency_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sorted_copy1_frequency_V_ce0 : OUT STD_LOGIC;
        sorted_copy1_frequency_V_we0 : OUT STD_LOGIC;
        sorted_copy1_frequency_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sorted_copy2_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sorted_copy2_value_V_ce0 : OUT STD_LOGIC;
        sorted_copy2_value_V_we0 : OUT STD_LOGIC;
        sorted_copy2_value_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_assign_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_assign_out_out_full_n : IN STD_LOGIC;
        val_assign_out_out_write : OUT STD_LOGIC;
        val_assign_out_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_assign_out_out1_full_n : IN STD_LOGIC;
        val_assign_out_out1_write : OUT STD_LOGIC );
    end component;


    component create_tree IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_value_V_ce0 : OUT STD_LOGIC;
        in_value_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_frequency_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_frequency_V_ce0 : OUT STD_LOGIC;
        in_frequency_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        val_assign_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        val_assign_loc_empty_n : IN STD_LOGIC;
        val_assign_loc_read : OUT STD_LOGIC;
        parent_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        parent_V_ce0 : OUT STD_LOGIC;
        parent_V_we0 : OUT STD_LOGIC;
        parent_V_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
        left_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        left_V_ce0 : OUT STD_LOGIC;
        left_V_we0 : OUT STD_LOGIC;
        left_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        right_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        right_V_ce0 : OUT STD_LOGIC;
        right_V_we0 : OUT STD_LOGIC;
        right_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_assign_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_assign_loc_out_full_n : IN STD_LOGIC;
        val_assign_loc_out_write : OUT STD_LOGIC );
    end component;


    component compute_bit_length IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        parent_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        parent_V_ce0 : OUT STD_LOGIC;
        parent_V_q0 : IN STD_LOGIC_VECTOR (30 downto 0);
        left_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        left_V_ce0 : OUT STD_LOGIC;
        left_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        right_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        right_V_ce0 : OUT STD_LOGIC;
        right_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        val_assign_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        val_assign_loc_empty_n : IN STD_LOGIC;
        val_assign_loc_read : OUT STD_LOGIC;
        length_histogram_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        length_histogram_V_ce0 : OUT STD_LOGIC;
        length_histogram_V_we0 : OUT STD_LOGIC;
        length_histogram_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_assign_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_assign_loc_out_full_n : IN STD_LOGIC;
        val_assign_loc_out_write : OUT STD_LOGIC );
    end component;


    component truncate_tree IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_length_histogram_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        input_length_histogram_V_ce0 : OUT STD_LOGIC;
        input_length_histogram_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_length_histogram1_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_length_histogram1_V_ce0 : OUT STD_LOGIC;
        output_length_histogram1_V_we0 : OUT STD_LOGIC;
        output_length_histogram1_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_length_histogram1_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_length_histogram1_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_length_histogram1_V_ce1 : OUT STD_LOGIC;
        output_length_histogram1_V_we1 : OUT STD_LOGIC;
        output_length_histogram1_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_length_histogram1_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_length_histogram2_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_length_histogram2_V_ce0 : OUT STD_LOGIC;
        output_length_histogram2_V_we0 : OUT STD_LOGIC;
        output_length_histogram2_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component canonize_tree IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sorted_value_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sorted_value_V_ce0 : OUT STD_LOGIC;
        sorted_value_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        val_assign_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        val_assign_loc_empty_n : IN STD_LOGIC;
        val_assign_loc_read : OUT STD_LOGIC;
        codeword_length_histogram_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        codeword_length_histogram_V_ce0 : OUT STD_LOGIC;
        codeword_length_histogram_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        symbol_bits_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        symbol_bits_V_ce0 : OUT STD_LOGIC;
        symbol_bits_V_we0 : OUT STD_LOGIC;
        symbol_bits_V_d0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component create_codeword IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        symbol_bits_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        symbol_bits_V_ce0 : OUT STD_LOGIC;
        symbol_bits_V_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        codeword_length_histogram_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        codeword_length_histogram_V_ce0 : OUT STD_LOGIC;
        codeword_length_histogram_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        encoding_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        encoding_V_ce0 : OUT STD_LOGIC;
        encoding_V_we0 : OUT STD_LOGIC;
        encoding_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        val_assign_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        val_assign_loc_empty_n : IN STD_LOGIC;
        val_assign_loc_read : OUT STD_LOGIC;
        num_nonzero_symbols : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_nonzero_symbols_ap_vld : OUT STD_LOGIC );
    end component;


    component huffman_encoding_lbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component huffman_encoding_sc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (30 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (30 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (30 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (30 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component huffman_encoding_tde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component huffman_encoding_vdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component huffman_encoding_wdI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component huffman_encoding_yd2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Block_pzec IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    filtered_value_V_U : component huffman_encoding_lbW
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => filter_U0_out_value_V_address0,
        i_ce0 => filter_U0_out_value_V_ce0,
        i_we0 => filter_U0_out_value_V_we0,
        i_d0 => filter_U0_out_value_V_d0,
        i_q0 => filtered_value_V_i_q0,
        t_address0 => sort_U0_in_value_V_address0,
        t_ce0 => sort_U0_in_value_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => filtered_value_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => filtered_value_V_i_full_n,
        i_write => ap_channel_done_filtered_value_V,
        t_empty_n => filtered_value_V_t_empty_n,
        t_read => sort_U0_ap_ready);

    filtered_frequency_V_U : component huffman_encoding_lbW
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => filter_U0_out_frequency_V_address0,
        i_ce0 => filter_U0_out_frequency_V_ce0,
        i_we0 => filter_U0_out_frequency_V_we0,
        i_d0 => filter_U0_out_frequency_V_d0,
        i_q0 => filtered_frequency_V_i_q0,
        t_address0 => sort_U0_in_frequency_V_address0,
        t_ce0 => sort_U0_in_frequency_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => filtered_frequency_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => filtered_frequency_V_i_full_n,
        i_write => ap_channel_done_filtered_frequency_V,
        t_empty_n => filtered_frequency_V_t_empty_n,
        t_read => sort_U0_ap_ready);

    sorted_0_U : component huffman_encoding_lbW
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => sort_U0_out_value_V_address0,
        i_ce0 => sort_U0_out_value_V_ce0,
        i_we0 => sort_U0_out_value_V_we0,
        i_d0 => sort_U0_out_value_V_d0,
        i_q0 => sorted_0_i_q0,
        t_address0 => Loop_copy_sorted_pro_U0_sorted_0_address0,
        t_ce0 => Loop_copy_sorted_pro_U0_sorted_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => sorted_0_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => sorted_0_i_full_n,
        i_write => ap_channel_done_sorted_0,
        t_empty_n => sorted_0_t_empty_n,
        t_read => Loop_copy_sorted_pro_U0_ap_ready);

    sorted_1_U : component huffman_encoding_lbW
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => sort_U0_out_frequency_V_address0,
        i_ce0 => sort_U0_out_frequency_V_ce0,
        i_we0 => sort_U0_out_frequency_V_we0,
        i_d0 => sort_U0_out_frequency_V_d0,
        i_q0 => sorted_1_i_q0,
        t_address0 => Loop_copy_sorted_pro_U0_sorted_1_address0,
        t_ce0 => Loop_copy_sorted_pro_U0_sorted_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => sorted_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => sorted_1_i_full_n,
        i_write => ap_channel_done_sorted_1,
        t_empty_n => sorted_1_t_empty_n,
        t_read => Loop_copy_sorted_pro_U0_ap_ready);

    sorted_copy1_value_V_U : component huffman_encoding_lbW
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_copy_sorted_pro_U0_sorted_copy1_value_V_address0,
        i_ce0 => Loop_copy_sorted_pro_U0_sorted_copy1_value_V_ce0,
        i_we0 => Loop_copy_sorted_pro_U0_sorted_copy1_value_V_we0,
        i_d0 => Loop_copy_sorted_pro_U0_sorted_copy1_value_V_d0,
        i_q0 => sorted_copy1_value_V_i_q0,
        t_address0 => create_tree_U0_in_value_V_address0,
        t_ce0 => create_tree_U0_in_value_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => sorted_copy1_value_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => sorted_copy1_value_V_i_full_n,
        i_write => ap_channel_done_sorted_copy1_value_V,
        t_empty_n => sorted_copy1_value_V_t_empty_n,
        t_read => create_tree_U0_ap_ready);

    sorted_copy1_frequen_U : component huffman_encoding_lbW
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_copy_sorted_pro_U0_sorted_copy1_frequency_V_address0,
        i_ce0 => Loop_copy_sorted_pro_U0_sorted_copy1_frequency_V_ce0,
        i_we0 => Loop_copy_sorted_pro_U0_sorted_copy1_frequency_V_we0,
        i_d0 => Loop_copy_sorted_pro_U0_sorted_copy1_frequency_V_d0,
        i_q0 => sorted_copy1_frequen_i_q0,
        t_address0 => create_tree_U0_in_frequency_V_address0,
        t_ce0 => create_tree_U0_in_frequency_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => sorted_copy1_frequen_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => sorted_copy1_frequen_i_full_n,
        i_write => ap_channel_done_sorted_copy1_frequen,
        t_empty_n => sorted_copy1_frequen_t_empty_n,
        t_read => create_tree_U0_ap_ready);

    sorted_copy2_value_V_U : component huffman_encoding_lbW
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_copy_sorted_pro_U0_sorted_copy2_value_V_address0,
        i_ce0 => Loop_copy_sorted_pro_U0_sorted_copy2_value_V_ce0,
        i_we0 => Loop_copy_sorted_pro_U0_sorted_copy2_value_V_we0,
        i_d0 => Loop_copy_sorted_pro_U0_sorted_copy2_value_V_d0,
        i_q0 => sorted_copy2_value_V_i_q0,
        t_address0 => canonize_tree_U0_sorted_value_V_address0,
        t_ce0 => canonize_tree_U0_sorted_value_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => sorted_copy2_value_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => sorted_copy2_value_V_i_full_n,
        i_write => ap_channel_done_sorted_copy2_value_V,
        t_empty_n => sorted_copy2_value_V_t_empty_n,
        t_read => canonize_tree_U0_ap_ready);

    parent_V_U : component huffman_encoding_sc4
    generic map (
        DataWidth => 31,
        AddressRange => 255,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => create_tree_U0_parent_V_address0,
        i_ce0 => create_tree_U0_parent_V_ce0,
        i_we0 => create_tree_U0_parent_V_we0,
        i_d0 => create_tree_U0_parent_V_d0,
        i_q0 => parent_V_i_q0,
        t_address0 => compute_bit_length_U0_parent_V_address0,
        t_ce0 => compute_bit_length_U0_parent_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv31_0,
        t_q0 => parent_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => parent_V_i_full_n,
        i_write => ap_channel_done_parent_V,
        t_empty_n => parent_V_t_empty_n,
        t_read => compute_bit_length_U0_ap_ready);

    left_V_U : component huffman_encoding_tde
    generic map (
        DataWidth => 32,
        AddressRange => 255,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => create_tree_U0_left_V_address0,
        i_ce0 => create_tree_U0_left_V_ce0,
        i_we0 => create_tree_U0_left_V_we0,
        i_d0 => create_tree_U0_left_V_d0,
        i_q0 => left_V_i_q0,
        t_address0 => compute_bit_length_U0_left_V_address0,
        t_ce0 => compute_bit_length_U0_left_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => left_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => left_V_i_full_n,
        i_write => ap_channel_done_left_V,
        t_empty_n => left_V_t_empty_n,
        t_read => compute_bit_length_U0_ap_ready);

    right_V_U : component huffman_encoding_tde
    generic map (
        DataWidth => 32,
        AddressRange => 255,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => create_tree_U0_right_V_address0,
        i_ce0 => create_tree_U0_right_V_ce0,
        i_we0 => create_tree_U0_right_V_we0,
        i_d0 => create_tree_U0_right_V_d0,
        i_q0 => right_V_i_q0,
        t_address0 => compute_bit_length_U0_right_V_address0,
        t_ce0 => compute_bit_length_U0_right_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => right_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => right_V_i_full_n,
        i_write => ap_channel_done_right_V,
        t_empty_n => right_V_t_empty_n,
        t_read => compute_bit_length_U0_ap_ready);

    length_histogram_V_U : component huffman_encoding_vdy
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => compute_bit_length_U0_length_histogram_V_address0,
        i_ce0 => compute_bit_length_U0_length_histogram_V_ce0,
        i_we0 => compute_bit_length_U0_length_histogram_V_we0,
        i_d0 => compute_bit_length_U0_length_histogram_V_d0,
        i_q0 => length_histogram_V_i_q0,
        t_address0 => truncate_tree_U0_input_length_histogram_V_address0,
        t_ce0 => truncate_tree_U0_input_length_histogram_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => length_histogram_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => length_histogram_V_i_full_n,
        i_write => compute_bit_length_U0_ap_done,
        t_empty_n => length_histogram_V_t_empty_n,
        t_read => truncate_tree_U0_ap_ready);

    truncated_length_his_U : component huffman_encoding_wdI
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => truncate_tree_U0_output_length_histogram1_V_address0,
        i_ce0 => truncate_tree_U0_output_length_histogram1_V_ce0,
        i_we0 => truncate_tree_U0_output_length_histogram1_V_we0,
        i_d0 => truncate_tree_U0_output_length_histogram1_V_d0,
        i_q0 => truncated_length_his_i_q0,
        i_address1 => truncate_tree_U0_output_length_histogram1_V_address1,
        i_ce1 => truncate_tree_U0_output_length_histogram1_V_ce1,
        i_we1 => truncate_tree_U0_output_length_histogram1_V_we1,
        i_d1 => truncate_tree_U0_output_length_histogram1_V_d1,
        i_q1 => truncated_length_his_i_q1,
        t_address0 => canonize_tree_U0_codeword_length_histogram_V_address0,
        t_ce0 => canonize_tree_U0_codeword_length_histogram_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => truncated_length_his_t_q0,
        t_address1 => ap_const_lv6_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => truncated_length_his_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => truncated_length_his_i_full_n,
        i_write => ap_channel_done_truncated_length_his,
        t_empty_n => truncated_length_his_t_empty_n,
        t_read => canonize_tree_U0_ap_ready);

    truncated_length_his_1_U : component huffman_encoding_vdy
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => truncate_tree_U0_output_length_histogram2_V_address0,
        i_ce0 => truncate_tree_U0_output_length_histogram2_V_ce0,
        i_we0 => truncate_tree_U0_output_length_histogram2_V_we0,
        i_d0 => truncate_tree_U0_output_length_histogram2_V_d0,
        i_q0 => truncated_length_his_1_i_q0,
        t_address0 => create_codeword_U0_codeword_length_histogram_V_address0,
        t_ce0 => create_codeword_U0_codeword_length_histogram_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => truncated_length_his_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => truncated_length_his_1_i_full_n,
        i_write => ap_channel_done_truncated_length_his_1,
        t_empty_n => truncated_length_his_1_t_empty_n,
        t_read => create_codeword_U0_ap_ready);

    symbol_bits_V_U : component huffman_encoding_yd2
    generic map (
        DataWidth => 5,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => canonize_tree_U0_symbol_bits_V_address0,
        i_ce0 => canonize_tree_U0_symbol_bits_V_ce0,
        i_we0 => canonize_tree_U0_symbol_bits_V_we0,
        i_d0 => canonize_tree_U0_symbol_bits_V_d0,
        i_q0 => symbol_bits_V_i_q0,
        t_address0 => create_codeword_U0_symbol_bits_V_address0,
        t_ce0 => create_codeword_U0_symbol_bits_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv5_0,
        t_q0 => symbol_bits_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => symbol_bits_V_i_full_n,
        i_write => canonize_tree_U0_ap_done,
        t_empty_n => symbol_bits_V_t_empty_n,
        t_read => create_codeword_U0_ap_ready);

    filter_U0 : component filter
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => filter_U0_ap_start,
        ap_done => filter_U0_ap_done,
        ap_continue => filter_U0_ap_continue,
        ap_idle => filter_U0_ap_idle,
        ap_ready => filter_U0_ap_ready,
        in_value_V_address0 => filter_U0_in_value_V_address0,
        in_value_V_ce0 => filter_U0_in_value_V_ce0,
        in_value_V_q0 => symbol_histogram_value_V_q0,
        in_frequency_V_address0 => filter_U0_in_frequency_V_address0,
        in_frequency_V_ce0 => filter_U0_in_frequency_V_ce0,
        in_frequency_V_q0 => symbol_histogram_frequency_V_q0,
        out_value_V_address0 => filter_U0_out_value_V_address0,
        out_value_V_ce0 => filter_U0_out_value_V_ce0,
        out_value_V_we0 => filter_U0_out_value_V_we0,
        out_value_V_d0 => filter_U0_out_value_V_d0,
        out_frequency_V_address0 => filter_U0_out_frequency_V_address0,
        out_frequency_V_ce0 => filter_U0_out_frequency_V_ce0,
        out_frequency_V_we0 => filter_U0_out_frequency_V_we0,
        out_frequency_V_d0 => filter_U0_out_frequency_V_d0,
        n_out_din => filter_U0_n_out_din,
        n_out_full_n => n_c_full_n,
        n_out_write => filter_U0_n_out_write);

    sort_U0 : component sort
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => sort_U0_ap_start,
        ap_done => sort_U0_ap_done,
        ap_continue => sort_U0_ap_continue,
        ap_idle => sort_U0_ap_idle,
        ap_ready => sort_U0_ap_ready,
        in_value_V_address0 => sort_U0_in_value_V_address0,
        in_value_V_ce0 => sort_U0_in_value_V_ce0,
        in_value_V_q0 => filtered_value_V_t_q0,
        in_frequency_V_address0 => sort_U0_in_frequency_V_address0,
        in_frequency_V_ce0 => sort_U0_in_frequency_V_ce0,
        in_frequency_V_q0 => filtered_frequency_V_t_q0,
        n_dout => n_c_dout,
        n_empty_n => n_c_empty_n,
        n_read => sort_U0_n_read,
        out_value_V_address0 => sort_U0_out_value_V_address0,
        out_value_V_ce0 => sort_U0_out_value_V_ce0,
        out_value_V_we0 => sort_U0_out_value_V_we0,
        out_value_V_d0 => sort_U0_out_value_V_d0,
        out_frequency_V_address0 => sort_U0_out_frequency_V_address0,
        out_frequency_V_ce0 => sort_U0_out_frequency_V_ce0,
        out_frequency_V_we0 => sort_U0_out_frequency_V_we0,
        out_frequency_V_d0 => sort_U0_out_frequency_V_d0,
        n_out_din => sort_U0_n_out_din,
        n_out_full_n => n_c16_full_n,
        n_out_write => sort_U0_n_out_write);

    Loop_copy_sorted_pro_U0 : component Loop_copy_sorted_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_copy_sorted_pro_U0_ap_start,
        start_full_n => start_for_Block_proc_U0_full_n,
        ap_done => Loop_copy_sorted_pro_U0_ap_done,
        ap_continue => Loop_copy_sorted_pro_U0_ap_continue,
        ap_idle => Loop_copy_sorted_pro_U0_ap_idle,
        ap_ready => Loop_copy_sorted_pro_U0_ap_ready,
        start_out => Loop_copy_sorted_pro_U0_start_out,
        start_write => Loop_copy_sorted_pro_U0_start_write,
        n_dout => n_c16_dout,
        n_empty_n => n_c16_empty_n,
        n_read => Loop_copy_sorted_pro_U0_n_read,
        sorted_0_address0 => Loop_copy_sorted_pro_U0_sorted_0_address0,
        sorted_0_ce0 => Loop_copy_sorted_pro_U0_sorted_0_ce0,
        sorted_0_q0 => sorted_0_t_q0,
        sorted_copy1_value_V_address0 => Loop_copy_sorted_pro_U0_sorted_copy1_value_V_address0,
        sorted_copy1_value_V_ce0 => Loop_copy_sorted_pro_U0_sorted_copy1_value_V_ce0,
        sorted_copy1_value_V_we0 => Loop_copy_sorted_pro_U0_sorted_copy1_value_V_we0,
        sorted_copy1_value_V_d0 => Loop_copy_sorted_pro_U0_sorted_copy1_value_V_d0,
        sorted_1_address0 => Loop_copy_sorted_pro_U0_sorted_1_address0,
        sorted_1_ce0 => Loop_copy_sorted_pro_U0_sorted_1_ce0,
        sorted_1_q0 => sorted_1_t_q0,
        sorted_copy1_frequency_V_address0 => Loop_copy_sorted_pro_U0_sorted_copy1_frequency_V_address0,
        sorted_copy1_frequency_V_ce0 => Loop_copy_sorted_pro_U0_sorted_copy1_frequency_V_ce0,
        sorted_copy1_frequency_V_we0 => Loop_copy_sorted_pro_U0_sorted_copy1_frequency_V_we0,
        sorted_copy1_frequency_V_d0 => Loop_copy_sorted_pro_U0_sorted_copy1_frequency_V_d0,
        sorted_copy2_value_V_address0 => Loop_copy_sorted_pro_U0_sorted_copy2_value_V_address0,
        sorted_copy2_value_V_ce0 => Loop_copy_sorted_pro_U0_sorted_copy2_value_V_ce0,
        sorted_copy2_value_V_we0 => Loop_copy_sorted_pro_U0_sorted_copy2_value_V_we0,
        sorted_copy2_value_V_d0 => Loop_copy_sorted_pro_U0_sorted_copy2_value_V_d0,
        val_assign_out_out_din => Loop_copy_sorted_pro_U0_val_assign_out_out_din,
        val_assign_out_out_full_n => val_assign_loc_c_full_n,
        val_assign_out_out_write => Loop_copy_sorted_pro_U0_val_assign_out_out_write,
        val_assign_out_out1_din => Loop_copy_sorted_pro_U0_val_assign_out_out1_din,
        val_assign_out_out1_full_n => val_assign_loc_c17_full_n,
        val_assign_out_out1_write => Loop_copy_sorted_pro_U0_val_assign_out_out1_write);

    create_tree_U0 : component create_tree
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => create_tree_U0_ap_start,
        ap_done => create_tree_U0_ap_done,
        ap_continue => create_tree_U0_ap_continue,
        ap_idle => create_tree_U0_ap_idle,
        ap_ready => create_tree_U0_ap_ready,
        in_value_V_address0 => create_tree_U0_in_value_V_address0,
        in_value_V_ce0 => create_tree_U0_in_value_V_ce0,
        in_value_V_q0 => sorted_copy1_value_V_t_q0,
        in_frequency_V_address0 => create_tree_U0_in_frequency_V_address0,
        in_frequency_V_ce0 => create_tree_U0_in_frequency_V_ce0,
        in_frequency_V_q0 => sorted_copy1_frequen_t_q0,
        val_assign_loc_dout => val_assign_loc_c_dout,
        val_assign_loc_empty_n => val_assign_loc_c_empty_n,
        val_assign_loc_read => create_tree_U0_val_assign_loc_read,
        parent_V_address0 => create_tree_U0_parent_V_address0,
        parent_V_ce0 => create_tree_U0_parent_V_ce0,
        parent_V_we0 => create_tree_U0_parent_V_we0,
        parent_V_d0 => create_tree_U0_parent_V_d0,
        left_V_address0 => create_tree_U0_left_V_address0,
        left_V_ce0 => create_tree_U0_left_V_ce0,
        left_V_we0 => create_tree_U0_left_V_we0,
        left_V_d0 => create_tree_U0_left_V_d0,
        right_V_address0 => create_tree_U0_right_V_address0,
        right_V_ce0 => create_tree_U0_right_V_ce0,
        right_V_we0 => create_tree_U0_right_V_we0,
        right_V_d0 => create_tree_U0_right_V_d0,
        val_assign_loc_out_din => create_tree_U0_val_assign_loc_out_din,
        val_assign_loc_out_full_n => val_assign_loc_c18_full_n,
        val_assign_loc_out_write => create_tree_U0_val_assign_loc_out_write);

    compute_bit_length_U0 : component compute_bit_length
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => compute_bit_length_U0_ap_start,
        ap_done => compute_bit_length_U0_ap_done,
        ap_continue => compute_bit_length_U0_ap_continue,
        ap_idle => compute_bit_length_U0_ap_idle,
        ap_ready => compute_bit_length_U0_ap_ready,
        parent_V_address0 => compute_bit_length_U0_parent_V_address0,
        parent_V_ce0 => compute_bit_length_U0_parent_V_ce0,
        parent_V_q0 => parent_V_t_q0,
        left_V_address0 => compute_bit_length_U0_left_V_address0,
        left_V_ce0 => compute_bit_length_U0_left_V_ce0,
        left_V_q0 => left_V_t_q0,
        right_V_address0 => compute_bit_length_U0_right_V_address0,
        right_V_ce0 => compute_bit_length_U0_right_V_ce0,
        right_V_q0 => right_V_t_q0,
        val_assign_loc_dout => val_assign_loc_c18_dout,
        val_assign_loc_empty_n => val_assign_loc_c18_empty_n,
        val_assign_loc_read => compute_bit_length_U0_val_assign_loc_read,
        length_histogram_V_address0 => compute_bit_length_U0_length_histogram_V_address0,
        length_histogram_V_ce0 => compute_bit_length_U0_length_histogram_V_ce0,
        length_histogram_V_we0 => compute_bit_length_U0_length_histogram_V_we0,
        length_histogram_V_d0 => compute_bit_length_U0_length_histogram_V_d0,
        val_assign_loc_out_din => compute_bit_length_U0_val_assign_loc_out_din,
        val_assign_loc_out_full_n => val_assign_loc_c19_full_n,
        val_assign_loc_out_write => compute_bit_length_U0_val_assign_loc_out_write);

    truncate_tree_U0 : component truncate_tree
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => truncate_tree_U0_ap_start,
        ap_done => truncate_tree_U0_ap_done,
        ap_continue => truncate_tree_U0_ap_continue,
        ap_idle => truncate_tree_U0_ap_idle,
        ap_ready => truncate_tree_U0_ap_ready,
        input_length_histogram_V_address0 => truncate_tree_U0_input_length_histogram_V_address0,
        input_length_histogram_V_ce0 => truncate_tree_U0_input_length_histogram_V_ce0,
        input_length_histogram_V_q0 => length_histogram_V_t_q0,
        output_length_histogram1_V_address0 => truncate_tree_U0_output_length_histogram1_V_address0,
        output_length_histogram1_V_ce0 => truncate_tree_U0_output_length_histogram1_V_ce0,
        output_length_histogram1_V_we0 => truncate_tree_U0_output_length_histogram1_V_we0,
        output_length_histogram1_V_d0 => truncate_tree_U0_output_length_histogram1_V_d0,
        output_length_histogram1_V_q0 => truncated_length_his_i_q0,
        output_length_histogram1_V_address1 => truncate_tree_U0_output_length_histogram1_V_address1,
        output_length_histogram1_V_ce1 => truncate_tree_U0_output_length_histogram1_V_ce1,
        output_length_histogram1_V_we1 => truncate_tree_U0_output_length_histogram1_V_we1,
        output_length_histogram1_V_d1 => truncate_tree_U0_output_length_histogram1_V_d1,
        output_length_histogram1_V_q1 => truncated_length_his_i_q1,
        output_length_histogram2_V_address0 => truncate_tree_U0_output_length_histogram2_V_address0,
        output_length_histogram2_V_ce0 => truncate_tree_U0_output_length_histogram2_V_ce0,
        output_length_histogram2_V_we0 => truncate_tree_U0_output_length_histogram2_V_we0,
        output_length_histogram2_V_d0 => truncate_tree_U0_output_length_histogram2_V_d0);

    canonize_tree_U0 : component canonize_tree
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => canonize_tree_U0_ap_start,
        ap_done => canonize_tree_U0_ap_done,
        ap_continue => canonize_tree_U0_ap_continue,
        ap_idle => canonize_tree_U0_ap_idle,
        ap_ready => canonize_tree_U0_ap_ready,
        sorted_value_V_address0 => canonize_tree_U0_sorted_value_V_address0,
        sorted_value_V_ce0 => canonize_tree_U0_sorted_value_V_ce0,
        sorted_value_V_q0 => sorted_copy2_value_V_t_q0,
        val_assign_loc_dout => val_assign_loc_c19_dout,
        val_assign_loc_empty_n => val_assign_loc_c19_empty_n,
        val_assign_loc_read => canonize_tree_U0_val_assign_loc_read,
        codeword_length_histogram_V_address0 => canonize_tree_U0_codeword_length_histogram_V_address0,
        codeword_length_histogram_V_ce0 => canonize_tree_U0_codeword_length_histogram_V_ce0,
        codeword_length_histogram_V_q0 => truncated_length_his_t_q0,
        symbol_bits_V_address0 => canonize_tree_U0_symbol_bits_V_address0,
        symbol_bits_V_ce0 => canonize_tree_U0_symbol_bits_V_ce0,
        symbol_bits_V_we0 => canonize_tree_U0_symbol_bits_V_we0,
        symbol_bits_V_d0 => canonize_tree_U0_symbol_bits_V_d0);

    create_codeword_U0 : component create_codeword
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => create_codeword_U0_ap_start,
        ap_done => create_codeword_U0_ap_done,
        ap_continue => create_codeword_U0_ap_continue,
        ap_idle => create_codeword_U0_ap_idle,
        ap_ready => create_codeword_U0_ap_ready,
        symbol_bits_V_address0 => create_codeword_U0_symbol_bits_V_address0,
        symbol_bits_V_ce0 => create_codeword_U0_symbol_bits_V_ce0,
        symbol_bits_V_q0 => symbol_bits_V_t_q0,
        codeword_length_histogram_V_address0 => create_codeword_U0_codeword_length_histogram_V_address0,
        codeword_length_histogram_V_ce0 => create_codeword_U0_codeword_length_histogram_V_ce0,
        codeword_length_histogram_V_q0 => truncated_length_his_1_t_q0,
        encoding_V_address0 => create_codeword_U0_encoding_V_address0,
        encoding_V_ce0 => create_codeword_U0_encoding_V_ce0,
        encoding_V_we0 => create_codeword_U0_encoding_V_we0,
        encoding_V_d0 => create_codeword_U0_encoding_V_d0);

    Block_proc_U0 : component Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_proc_U0_ap_start,
        ap_done => Block_proc_U0_ap_done,
        ap_continue => Block_proc_U0_ap_continue,
        ap_idle => Block_proc_U0_ap_idle,
        ap_ready => Block_proc_U0_ap_ready,
        val_assign_loc_dout => val_assign_loc_c17_dout,
        val_assign_loc_empty_n => val_assign_loc_c17_empty_n,
        val_assign_loc_read => Block_proc_U0_val_assign_loc_read,
        num_nonzero_symbols => Block_proc_U0_num_nonzero_symbols,
        num_nonzero_symbols_ap_vld => Block_proc_U0_num_nonzero_symbols_ap_vld);

    n_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => filter_U0_n_out_din,
        if_full_n => n_c_full_n,
        if_write => filter_U0_n_out_write,
        if_dout => n_c_dout,
        if_empty_n => n_c_empty_n,
        if_read => sort_U0_n_read);

    n_c16_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sort_U0_n_out_din,
        if_full_n => n_c16_full_n,
        if_write => sort_U0_n_out_write,
        if_dout => n_c16_dout,
        if_empty_n => n_c16_empty_n,
        if_read => Loop_copy_sorted_pro_U0_n_read);

    val_assign_loc_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_copy_sorted_pro_U0_val_assign_out_out_din,
        if_full_n => val_assign_loc_c_full_n,
        if_write => Loop_copy_sorted_pro_U0_val_assign_out_out_write,
        if_dout => val_assign_loc_c_dout,
        if_empty_n => val_assign_loc_c_empty_n,
        if_read => create_tree_U0_val_assign_loc_read);

    val_assign_loc_c17_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_copy_sorted_pro_U0_val_assign_out_out1_din,
        if_full_n => val_assign_loc_c17_full_n,
        if_write => Loop_copy_sorted_pro_U0_val_assign_out_out1_write,
        if_dout => val_assign_loc_c17_dout,
        if_empty_n => val_assign_loc_c17_empty_n,
        if_read => Block_proc_U0_val_assign_loc_read);

    val_assign_loc_c18_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => create_tree_U0_val_assign_loc_out_din,
        if_full_n => val_assign_loc_c18_full_n,
        if_write => create_tree_U0_val_assign_loc_out_write,
        if_dout => val_assign_loc_c18_dout,
        if_empty_n => val_assign_loc_c18_empty_n,
        if_read => compute_bit_length_U0_val_assign_loc_read);

    val_assign_loc_c19_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_bit_length_U0_val_assign_loc_out_din,
        if_full_n => val_assign_loc_c19_full_n,
        if_write => compute_bit_length_U0_val_assign_loc_out_write,
        if_dout => val_assign_loc_c19_dout,
        if_empty_n => val_assign_loc_c19_empty_n,
        if_read => canonize_tree_U0_val_assign_loc_read);

    start_for_Block_pzec_U : component start_for_Block_pzec
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Block_proc_U0_din,
        if_full_n => start_for_Block_proc_U0_full_n,
        if_write => Loop_copy_sorted_pro_U0_start_write,
        if_dout => start_for_Block_proc_U0_dout,
        if_empty_n => start_for_Block_proc_U0_empty_n,
        if_read => Block_proc_U0_ap_ready);





    ap_sync_reg_channel_write_filtered_frequency_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_filtered_frequency_V <= ap_const_logic_0;
            else
                if (((filter_U0_ap_done and filter_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_filtered_frequency_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_filtered_frequency_V <= ap_sync_channel_write_filtered_frequency_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_filtered_value_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_filtered_value_V <= ap_const_logic_0;
            else
                if (((filter_U0_ap_done and filter_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_filtered_value_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_filtered_value_V <= ap_sync_channel_write_filtered_value_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_left_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_left_V <= ap_const_logic_0;
            else
                if (((create_tree_U0_ap_done and create_tree_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_left_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_left_V <= ap_sync_channel_write_left_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_parent_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_parent_V <= ap_const_logic_0;
            else
                if (((create_tree_U0_ap_done and create_tree_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_parent_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_parent_V <= ap_sync_channel_write_parent_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_right_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_right_V <= ap_const_logic_0;
            else
                if (((create_tree_U0_ap_done and create_tree_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_right_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_right_V <= ap_sync_channel_write_right_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_sorted_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_sorted_0 <= ap_const_logic_0;
            else
                if (((sort_U0_ap_done and sort_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_sorted_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_sorted_0 <= ap_sync_channel_write_sorted_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_sorted_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_sorted_1 <= ap_const_logic_0;
            else
                if (((sort_U0_ap_done and sort_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_sorted_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_sorted_1 <= ap_sync_channel_write_sorted_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_sorted_copy1_frequen_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_sorted_copy1_frequen <= ap_const_logic_0;
            else
                if (((Loop_copy_sorted_pro_U0_ap_done and Loop_copy_sorted_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_sorted_copy1_frequen <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_sorted_copy1_frequen <= ap_sync_channel_write_sorted_copy1_frequen;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_sorted_copy1_value_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_sorted_copy1_value_V <= ap_const_logic_0;
            else
                if (((Loop_copy_sorted_pro_U0_ap_done and Loop_copy_sorted_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_sorted_copy1_value_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_sorted_copy1_value_V <= ap_sync_channel_write_sorted_copy1_value_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_sorted_copy2_value_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_sorted_copy2_value_V <= ap_const_logic_0;
            else
                if (((Loop_copy_sorted_pro_U0_ap_done and Loop_copy_sorted_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_sorted_copy2_value_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_sorted_copy2_value_V <= ap_sync_channel_write_sorted_copy2_value_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_truncated_length_his_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_truncated_length_his <= ap_const_logic_0;
            else
                if (((truncate_tree_U0_ap_done and truncate_tree_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_truncated_length_his <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_truncated_length_his <= ap_sync_channel_write_truncated_length_his;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_truncated_length_his_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_truncated_length_his_1 <= ap_const_logic_0;
            else
                if (((truncate_tree_U0_ap_done and truncate_tree_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_truncated_length_his_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_truncated_length_his_1 <= ap_sync_channel_write_truncated_length_his_1;
                end if; 
            end if;
        end if;
    end process;

    Block_proc_U0_ap_continue <= ap_sync_done;
    Block_proc_U0_ap_start <= start_for_Block_proc_U0_empty_n;
    Block_proc_U0_start_full_n <= ap_const_logic_1;
    Block_proc_U0_start_write <= ap_const_logic_0;
    Loop_copy_sorted_pro_U0_ap_continue <= (ap_sync_channel_write_sorted_copy2_value_V and ap_sync_channel_write_sorted_copy1_value_V and ap_sync_channel_write_sorted_copy1_frequen);
    Loop_copy_sorted_pro_U0_ap_start <= (sorted_1_t_empty_n and sorted_0_t_empty_n);
    Loop_copy_sorted_pro_U0_sorted_copy1_frequency_V_full_n <= sorted_copy1_frequen_i_full_n;
    Loop_copy_sorted_pro_U0_sorted_copy1_value_V_full_n <= sorted_copy1_value_V_i_full_n;
    Loop_copy_sorted_pro_U0_sorted_copy2_value_V_full_n <= sorted_copy2_value_V_i_full_n;
    ap_channel_done_filtered_frequency_V <= (filter_U0_ap_done and (ap_sync_reg_channel_write_filtered_frequency_V xor ap_const_logic_1));
    ap_channel_done_filtered_value_V <= (filter_U0_ap_done and (ap_sync_reg_channel_write_filtered_value_V xor ap_const_logic_1));
    ap_channel_done_left_V <= ((ap_sync_reg_channel_write_left_V xor ap_const_logic_1) and create_tree_U0_ap_done);
    ap_channel_done_length_histogram_V <= compute_bit_length_U0_ap_done;
    ap_channel_done_parent_V <= ((ap_sync_reg_channel_write_parent_V xor ap_const_logic_1) and create_tree_U0_ap_done);
    ap_channel_done_right_V <= ((ap_sync_reg_channel_write_right_V xor ap_const_logic_1) and create_tree_U0_ap_done);
    ap_channel_done_sorted_0 <= (sort_U0_ap_done and (ap_sync_reg_channel_write_sorted_0 xor ap_const_logic_1));
    ap_channel_done_sorted_1 <= (sort_U0_ap_done and (ap_sync_reg_channel_write_sorted_1 xor ap_const_logic_1));
    ap_channel_done_sorted_copy1_frequen <= ((ap_sync_reg_channel_write_sorted_copy1_frequen xor ap_const_logic_1) and Loop_copy_sorted_pro_U0_ap_done);
    ap_channel_done_sorted_copy1_value_V <= ((ap_sync_reg_channel_write_sorted_copy1_value_V xor ap_const_logic_1) and Loop_copy_sorted_pro_U0_ap_done);
    ap_channel_done_sorted_copy2_value_V <= ((ap_sync_reg_channel_write_sorted_copy2_value_V xor ap_const_logic_1) and Loop_copy_sorted_pro_U0_ap_done);
    ap_channel_done_symbol_bits_V <= canonize_tree_U0_ap_done;
    ap_channel_done_truncated_length_his <= (truncate_tree_U0_ap_done and (ap_sync_reg_channel_write_truncated_length_his xor ap_const_logic_1));
    ap_channel_done_truncated_length_his_1 <= (truncate_tree_U0_ap_done and (ap_sync_reg_channel_write_truncated_length_his_1 xor ap_const_logic_1));
    ap_done <= ap_sync_done;
    ap_idle <= (truncate_tree_U0_ap_idle and sort_U0_ap_idle and filter_U0_ap_idle and (symbol_bits_V_t_empty_n xor ap_const_logic_1) and (truncated_length_his_1_t_empty_n xor ap_const_logic_1) and (truncated_length_his_t_empty_n xor ap_const_logic_1) and (length_histogram_V_t_empty_n xor ap_const_logic_1) and (right_V_t_empty_n xor ap_const_logic_1) and (left_V_t_empty_n xor ap_const_logic_1) and (parent_V_t_empty_n xor ap_const_logic_1) and (sorted_copy2_value_V_t_empty_n xor ap_const_logic_1) and (sorted_copy1_frequen_t_empty_n xor ap_const_logic_1) and (sorted_copy1_value_V_t_empty_n xor ap_const_logic_1) and (sorted_1_t_empty_n xor ap_const_logic_1) and (sorted_0_t_empty_n xor ap_const_logic_1) and (filtered_frequency_V_t_empty_n xor ap_const_logic_1) and (filtered_value_V_t_empty_n xor ap_const_logic_1) and create_tree_U0_ap_idle and create_codeword_U0_ap_idle and compute_bit_length_U0_ap_idle and canonize_tree_U0_ap_idle and Loop_copy_sorted_pro_U0_ap_idle and Block_proc_U0_ap_idle);
    ap_ready <= filter_U0_ap_ready;
    ap_sync_channel_write_filtered_frequency_V <= ((filter_U0_out_frequency_V_full_n and ap_channel_done_filtered_frequency_V) or ap_sync_reg_channel_write_filtered_frequency_V);
    ap_sync_channel_write_filtered_value_V <= ((filter_U0_out_value_V_full_n and ap_channel_done_filtered_value_V) or ap_sync_reg_channel_write_filtered_value_V);
    ap_sync_channel_write_left_V <= ((create_tree_U0_left_V_full_n and ap_channel_done_left_V) or ap_sync_reg_channel_write_left_V);
    ap_sync_channel_write_parent_V <= ((create_tree_U0_parent_V_full_n and ap_channel_done_parent_V) or ap_sync_reg_channel_write_parent_V);
    ap_sync_channel_write_right_V <= ((create_tree_U0_right_V_full_n and ap_channel_done_right_V) or ap_sync_reg_channel_write_right_V);
    ap_sync_channel_write_sorted_0 <= ((sort_U0_out_value_V_full_n and ap_channel_done_sorted_0) or ap_sync_reg_channel_write_sorted_0);
    ap_sync_channel_write_sorted_1 <= ((sort_U0_out_frequency_V_full_n and ap_channel_done_sorted_1) or ap_sync_reg_channel_write_sorted_1);
    ap_sync_channel_write_sorted_copy1_frequen <= ((ap_channel_done_sorted_copy1_frequen and Loop_copy_sorted_pro_U0_sorted_copy1_frequency_V_full_n) or ap_sync_reg_channel_write_sorted_copy1_frequen);
    ap_sync_channel_write_sorted_copy1_value_V <= ((ap_channel_done_sorted_copy1_value_V and Loop_copy_sorted_pro_U0_sorted_copy1_value_V_full_n) or ap_sync_reg_channel_write_sorted_copy1_value_V);
    ap_sync_channel_write_sorted_copy2_value_V <= ((ap_channel_done_sorted_copy2_value_V and Loop_copy_sorted_pro_U0_sorted_copy2_value_V_full_n) or ap_sync_reg_channel_write_sorted_copy2_value_V);
    ap_sync_channel_write_truncated_length_his <= ((truncate_tree_U0_output_length_histogram1_V_full_n and ap_channel_done_truncated_length_his) or ap_sync_reg_channel_write_truncated_length_his);
    ap_sync_channel_write_truncated_length_his_1 <= ((truncate_tree_U0_output_length_histogram2_V_full_n and ap_channel_done_truncated_length_his_1) or ap_sync_reg_channel_write_truncated_length_his_1);
    ap_sync_continue <= ap_sync_done;
    ap_sync_done <= (create_codeword_U0_ap_done and Block_proc_U0_ap_done);
    ap_sync_ready <= filter_U0_ap_ready;
    canonize_tree_U0_ap_continue <= symbol_bits_V_i_full_n;
    canonize_tree_U0_ap_start <= (truncated_length_his_t_empty_n and sorted_copy2_value_V_t_empty_n);
    canonize_tree_U0_start_full_n <= ap_const_logic_1;
    canonize_tree_U0_start_write <= ap_const_logic_0;
    canonize_tree_U0_symbol_bits_V_full_n <= symbol_bits_V_i_full_n;
    compute_bit_length_U0_ap_continue <= length_histogram_V_i_full_n;
    compute_bit_length_U0_ap_start <= (right_V_t_empty_n and parent_V_t_empty_n and left_V_t_empty_n);
    compute_bit_length_U0_length_histogram_V_full_n <= length_histogram_V_i_full_n;
    compute_bit_length_U0_start_full_n <= ap_const_logic_1;
    compute_bit_length_U0_start_write <= ap_const_logic_0;
    create_codeword_U0_ap_continue <= ap_sync_done;
    create_codeword_U0_ap_start <= (truncated_length_his_1_t_empty_n and symbol_bits_V_t_empty_n);
    create_codeword_U0_start_full_n <= ap_const_logic_1;
    create_codeword_U0_start_write <= ap_const_logic_0;
    create_tree_U0_ap_continue <= (ap_sync_channel_write_right_V and ap_sync_channel_write_parent_V and ap_sync_channel_write_left_V);
    create_tree_U0_ap_start <= (sorted_copy1_value_V_t_empty_n and sorted_copy1_frequen_t_empty_n);
    create_tree_U0_left_V_full_n <= left_V_i_full_n;
    create_tree_U0_parent_V_full_n <= parent_V_i_full_n;
    create_tree_U0_right_V_full_n <= right_V_i_full_n;
    create_tree_U0_start_full_n <= ap_const_logic_1;
    create_tree_U0_start_write <= ap_const_logic_0;
    encoding_V_address0 <= create_codeword_U0_encoding_V_address0;
    encoding_V_address1 <= ap_const_lv8_0;
    encoding_V_ce0 <= create_codeword_U0_encoding_V_ce0;
    encoding_V_ce1 <= ap_const_logic_0;
    encoding_V_d0 <= create_codeword_U0_encoding_V_d0;
    encoding_V_d1 <= ap_const_lv32_0;
    encoding_V_we0 <= create_codeword_U0_encoding_V_we0;
    encoding_V_we1 <= ap_const_logic_0;
    filter_U0_ap_continue <= (ap_sync_channel_write_filtered_value_V and ap_sync_channel_write_filtered_frequency_V);
    filter_U0_ap_start <= ap_start;
    filter_U0_out_frequency_V_full_n <= filtered_frequency_V_i_full_n;
    filter_U0_out_value_V_full_n <= filtered_value_V_i_full_n;
    filter_U0_start_full_n <= ap_const_logic_1;
    filter_U0_start_write <= ap_const_logic_0;
    num_nonzero_symbols <= Block_proc_U0_num_nonzero_symbols;
    num_nonzero_symbols_ap_vld <= Block_proc_U0_num_nonzero_symbols_ap_vld;
    sort_U0_ap_continue <= (ap_sync_channel_write_sorted_1 and ap_sync_channel_write_sorted_0);
    sort_U0_ap_start <= (filtered_value_V_t_empty_n and filtered_frequency_V_t_empty_n);
    sort_U0_out_frequency_V_full_n <= sorted_1_i_full_n;
    sort_U0_out_value_V_full_n <= sorted_0_i_full_n;
    sort_U0_start_full_n <= ap_const_logic_1;
    sort_U0_start_write <= ap_const_logic_0;
    start_for_Block_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    symbol_histogram_frequency_V_address0 <= filter_U0_in_frequency_V_address0;
    symbol_histogram_frequency_V_address1 <= ap_const_lv8_0;
    symbol_histogram_frequency_V_ce0 <= filter_U0_in_frequency_V_ce0;
    symbol_histogram_frequency_V_ce1 <= ap_const_logic_0;
    symbol_histogram_frequency_V_d0 <= ap_const_lv32_0;
    symbol_histogram_frequency_V_d1 <= ap_const_lv32_0;
    symbol_histogram_frequency_V_we0 <= ap_const_logic_0;
    symbol_histogram_frequency_V_we1 <= ap_const_logic_0;
    symbol_histogram_value_V_address0 <= filter_U0_in_value_V_address0;
    symbol_histogram_value_V_address1 <= ap_const_lv8_0;
    symbol_histogram_value_V_ce0 <= filter_U0_in_value_V_ce0;
    symbol_histogram_value_V_ce1 <= ap_const_logic_0;
    symbol_histogram_value_V_d0 <= ap_const_lv32_0;
    symbol_histogram_value_V_d1 <= ap_const_lv32_0;
    symbol_histogram_value_V_we0 <= ap_const_logic_0;
    symbol_histogram_value_V_we1 <= ap_const_logic_0;
    truncate_tree_U0_ap_continue <= (ap_sync_channel_write_truncated_length_his_1 and ap_sync_channel_write_truncated_length_his);
    truncate_tree_U0_ap_start <= length_histogram_V_t_empty_n;
    truncate_tree_U0_output_length_histogram1_V_full_n <= truncated_length_his_i_full_n;
    truncate_tree_U0_output_length_histogram2_V_full_n <= truncated_length_his_1_i_full_n;
    truncate_tree_U0_start_full_n <= ap_const_logic_1;
    truncate_tree_U0_start_write <= ap_const_logic_0;
end behav;
