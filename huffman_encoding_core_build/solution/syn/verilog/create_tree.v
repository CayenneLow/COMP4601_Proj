// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module create_tree (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_value_V_address0,
        in_value_V_ce0,
        in_value_V_q0,
        in_frequency_V_address0,
        in_frequency_V_ce0,
        in_frequency_V_q0,
        val_assign_loc_dout,
        val_assign_loc_empty_n,
        val_assign_loc_read,
        parent_V_address0,
        parent_V_ce0,
        parent_V_we0,
        parent_V_d0,
        left_V_address0,
        left_V_ce0,
        left_V_we0,
        left_V_d0,
        right_V_address0,
        right_V_ce0,
        right_V_we0,
        right_V_d0,
        val_assign_loc_out_din,
        val_assign_loc_out_full_n,
        val_assign_loc_out_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] in_value_V_address0;
output   in_value_V_ce0;
input  [31:0] in_value_V_q0;
output  [7:0] in_frequency_V_address0;
output   in_frequency_V_ce0;
input  [31:0] in_frequency_V_q0;
input  [31:0] val_assign_loc_dout;
input   val_assign_loc_empty_n;
output   val_assign_loc_read;
output  [7:0] parent_V_address0;
output   parent_V_ce0;
output   parent_V_we0;
output  [30:0] parent_V_d0;
output  [7:0] left_V_address0;
output   left_V_ce0;
output   left_V_we0;
output  [31:0] left_V_d0;
output  [7:0] right_V_address0;
output   right_V_ce0;
output   right_V_we0;
output  [31:0] right_V_d0;
output  [31:0] val_assign_loc_out_din;
input   val_assign_loc_out_full_n;
output   val_assign_loc_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] in_value_V_address0;
reg in_value_V_ce0;
reg[7:0] in_frequency_V_address0;
reg in_frequency_V_ce0;
reg val_assign_loc_read;
reg[7:0] parent_V_address0;
reg parent_V_ce0;
reg parent_V_we0;
reg[30:0] parent_V_d0;
reg[7:0] left_V_address0;
reg left_V_ce0;
reg left_V_we0;
reg[31:0] left_V_d0;
reg[7:0] right_V_address0;
reg right_V_ce0;
reg right_V_we0;
reg[31:0] right_V_d0;
reg val_assign_loc_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    val_assign_loc_blk_n;
reg    val_assign_loc_out_blk_n;
reg   [31:0] val_assign_loc_read_reg_495;
reg    ap_block_state1;
wire   [31:0] add_ln15_fu_345_p2;
reg   [31:0] add_ln15_reg_501;
wire   [31:0] zext_ln15_fu_351_p1;
reg   [31:0] zext_ln15_reg_506;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln15_fu_355_p2;
reg   [0:0] icmp_ln15_reg_514;
wire   [30:0] i_fu_360_p2;
reg   [30:0] i_reg_518;
wire   [63:0] zext_ln544_fu_366_p1;
reg   [63:0] zext_ln544_reg_523;
wire   [0:0] icmp_ln887_fu_377_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] frequency_V_q0;
wire   [0:0] icmp_ln879_2_fu_382_p2;
wire   [0:0] and_ln26_fu_392_p2;
wire   [0:0] icmp_ln887_1_fu_422_p2;
reg   [0:0] icmp_ln887_1_reg_565;
wire   [63:0] zext_ln544_5_fu_427_p1;
reg   [63:0] zext_ln544_5_reg_569;
wire   [0:0] icmp_ln879_4_fu_438_p2;
reg   [0:0] icmp_ln879_4_reg_589;
wire    ap_CS_fsm_state4;
wire   [0:0] and_ln42_fu_448_p2;
reg   [0:0] and_ln42_reg_593;
wire   [63:0] zext_ln44_fu_454_p1;
reg   [63:0] zext_ln44_reg_597;
wire   [31:0] add_ln209_fu_459_p2;
reg   [31:0] add_ln209_reg_602;
wire   [63:0] zext_ln49_fu_465_p1;
reg   [63:0] zext_ln49_reg_607;
wire   [31:0] add_ln209_1_fu_470_p2;
reg   [31:0] add_ln209_1_reg_612;
reg   [7:0] frequency_V_address0;
reg    frequency_V_ce0;
reg    frequency_V_we0;
reg   [31:0] frequency_V_d0;
reg   [31:0] t_V_3_reg_247;
reg   [31:0] ap_phi_mux_p_0168_2_i_i_phi_fu_319_p4;
wire    ap_CS_fsm_state5;
reg   [31:0] t_V_reg_259;
reg   [31:0] ap_phi_mux_p_094_2_i_i_phi_fu_331_p4;
reg   [30:0] op2_assign_reg_271;
reg   [31:0] ap_phi_mux_t_V_5_phi_fu_287_p4;
reg   [31:0] t_V_5_reg_284;
wire   [31:0] tree_count_V_fu_415_p2;
wire   [31:0] in_count_V_fu_403_p2;
reg   [31:0] ap_phi_mux_t_V_4_phi_fu_298_p4;
reg   [31:0] t_V_4_reg_295;
reg   [31:0] p_090_0_i_i_reg_306;
wire   [31:0] tree_count_V_1_fu_483_p2;
wire   [31:0] in_count_V_1_fu_476_p2;
wire   [63:0] zext_ln544_3_fu_371_p1;
wire   [63:0] zext_ln28_fu_398_p1;
wire   [63:0] zext_ln33_fu_410_p1;
wire   [63:0] zext_ln544_6_fu_432_p1;
wire   [63:0] zext_ln544_4_fu_490_p1;
wire    ap_CS_fsm_state6;
wire   [0:0] grp_fu_339_p2;
wire   [0:0] icmp_ln879_fu_387_p2;
wire   [0:0] icmp_ln879_3_fu_443_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_condition_222;
reg    ap_condition_229;
reg    ap_condition_201;
reg    ap_condition_208;
reg    ap_condition_156;
reg    ap_condition_166;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
end

create_tree_frequhbi #(
    .DataWidth( 32 ),
    .AddressRange( 255 ),
    .AddressWidth( 8 ))
frequency_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(frequency_V_address0),
    .ce0(frequency_V_ce0),
    .we0(frequency_V_we0),
    .d0(frequency_V_d0),
    .q0(frequency_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_514 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        op2_assign_reg_271 <= i_reg_518;
    end else if ((~((val_assign_loc_out_full_n == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        op2_assign_reg_271 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_208)) begin
            p_090_0_i_i_reg_306 <= frequency_V_q0;
        end else if ((1'b1 == ap_condition_201)) begin
            p_090_0_i_i_reg_306 <= in_frequency_V_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_514 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        t_V_3_reg_247 <= ap_phi_mux_p_0168_2_i_i_phi_fu_319_p4;
    end else if ((~((val_assign_loc_out_full_n == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_3_reg_247 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_208)) begin
            t_V_4_reg_295 <= t_V_reg_259;
        end else if ((1'b1 == ap_condition_201)) begin
            t_V_4_reg_295 <= in_count_V_fu_403_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_208)) begin
            t_V_5_reg_284 <= tree_count_V_fu_415_p2;
        end else if ((1'b1 == ap_condition_201)) begin
            t_V_5_reg_284 <= t_V_3_reg_247;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_514 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        t_V_reg_259 <= ap_phi_mux_p_094_2_i_i_phi_fu_331_p4;
    end else if ((~((val_assign_loc_out_full_n == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_259 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((val_assign_loc_out_full_n == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln15_reg_501 <= add_ln15_fu_345_p2;
        val_assign_loc_read_reg_495 <= val_assign_loc_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (((1'd1 == and_ln42_fu_448_p2) & (icmp_ln887_1_reg_565 == 1'd1)) | ((icmp_ln879_4_fu_438_p2 == 1'd0) & (icmp_ln887_1_reg_565 == 1'd0))))) begin
        add_ln209_1_reg_612 <= add_ln209_1_fu_470_p2;
        zext_ln49_reg_607[30 : 0] <= zext_ln49_fu_465_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (((icmp_ln887_1_reg_565 == 1'd1) & (1'd0 == and_ln42_fu_448_p2)) | ((icmp_ln879_4_fu_438_p2 == 1'd1) & (icmp_ln887_1_reg_565 == 1'd0))))) begin
        add_ln209_reg_602 <= add_ln209_fu_459_p2;
        zext_ln44_reg_597[30 : 0] <= zext_ln44_fu_454_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_reg_565 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        and_ln42_reg_593 <= and_ln42_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_518 <= i_fu_360_p2;
        icmp_ln15_reg_514 <= icmp_ln15_fu_355_p2;
        zext_ln15_reg_506[30 : 0] <= zext_ln15_fu_351_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln887_1_reg_565 == 1'd0))) begin
        icmp_ln879_4_reg_589 <= icmp_ln879_4_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln887_1_reg_565 <= icmp_ln887_1_fu_422_p2;
        zext_ln544_5_reg_569[31 : 0] <= zext_ln544_5_fu_427_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_355_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln544_reg_523[31 : 0] <= zext_ln544_fu_366_p1[31 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'b1 == ap_condition_229)) begin
            ap_phi_mux_p_0168_2_i_i_phi_fu_319_p4 = tree_count_V_1_fu_483_p2;
        end else if ((1'b1 == ap_condition_222)) begin
            ap_phi_mux_p_0168_2_i_i_phi_fu_319_p4 = t_V_5_reg_284;
        end else begin
            ap_phi_mux_p_0168_2_i_i_phi_fu_319_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_p_0168_2_i_i_phi_fu_319_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'b1 == ap_condition_229)) begin
            ap_phi_mux_p_094_2_i_i_phi_fu_331_p4 = t_V_4_reg_295;
        end else if ((1'b1 == ap_condition_222)) begin
            ap_phi_mux_p_094_2_i_i_phi_fu_331_p4 = in_count_V_1_fu_476_p2;
        end else begin
            ap_phi_mux_p_094_2_i_i_phi_fu_331_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_p_094_2_i_i_phi_fu_331_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_208)) begin
            ap_phi_mux_t_V_4_phi_fu_298_p4 = t_V_reg_259;
        end else if ((1'b1 == ap_condition_201)) begin
            ap_phi_mux_t_V_4_phi_fu_298_p4 = in_count_V_fu_403_p2;
        end else begin
            ap_phi_mux_t_V_4_phi_fu_298_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_t_V_4_phi_fu_298_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_208)) begin
            ap_phi_mux_t_V_5_phi_fu_287_p4 = tree_count_V_fu_415_p2;
        end else if ((1'b1 == ap_condition_201)) begin
            ap_phi_mux_t_V_5_phi_fu_287_p4 = t_V_3_reg_247;
        end else begin
            ap_phi_mux_t_V_5_phi_fu_287_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_t_V_5_phi_fu_287_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (((1'd1 == and_ln42_reg_593) & (icmp_ln887_1_reg_565 == 1'd1) & (icmp_ln15_reg_514 == 1'd1)) | ((icmp_ln15_reg_514 == 1'd1) & (icmp_ln879_4_reg_589 == 1'd0) & (icmp_ln887_1_reg_565 == 1'd0))))) begin
        frequency_V_address0 = zext_ln49_reg_607;
    end else if (((1'b1 == ap_CS_fsm_state5) & (((icmp_ln887_1_reg_565 == 1'd1) & (icmp_ln15_reg_514 == 1'd1) & (1'd0 == and_ln42_reg_593)) | ((icmp_ln879_4_reg_589 == 1'd1) & (icmp_ln15_reg_514 == 1'd1) & (icmp_ln887_1_reg_565 == 1'd0))))) begin
        frequency_V_address0 = zext_ln44_reg_597;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        frequency_V_address0 = zext_ln544_5_fu_427_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        frequency_V_address0 = zext_ln544_fu_366_p1;
    end else begin
        frequency_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state5) & (((1'd1 == and_ln42_reg_593) & (icmp_ln887_1_reg_565 == 1'd1) & (icmp_ln15_reg_514 == 1'd1)) | ((icmp_ln15_reg_514 == 1'd1) & (icmp_ln879_4_reg_589 == 1'd0) & (icmp_ln887_1_reg_565 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state5) & (((icmp_ln887_1_reg_565 == 1'd1) & (icmp_ln15_reg_514 == 1'd1) & (1'd0 == and_ln42_reg_593)) | ((icmp_ln879_4_reg_589 == 1'd1) & (icmp_ln15_reg_514 == 1'd1) & (icmp_ln887_1_reg_565 == 1'd0)))))) begin
        frequency_V_ce0 = 1'b1;
    end else begin
        frequency_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'b1 == ap_condition_229)) begin
            frequency_V_d0 = add_ln209_1_reg_612;
        end else if ((1'b1 == ap_condition_222)) begin
            frequency_V_d0 = add_ln209_reg_602;
        end else begin
            frequency_V_d0 = 'bx;
        end
    end else begin
        frequency_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (((1'd1 == and_ln42_reg_593) & (icmp_ln887_1_reg_565 == 1'd1) & (icmp_ln15_reg_514 == 1'd1)) | ((icmp_ln15_reg_514 == 1'd1) & (icmp_ln879_4_reg_589 == 1'd0) & (icmp_ln887_1_reg_565 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state5) & (((icmp_ln887_1_reg_565 == 1'd1) & (icmp_ln15_reg_514 == 1'd1) & (1'd0 == and_ln42_reg_593)) | ((icmp_ln879_4_reg_589 == 1'd1) & (icmp_ln15_reg_514 == 1'd1) & (icmp_ln887_1_reg_565 == 1'd0)))))) begin
        frequency_V_we0 = 1'b1;
    end else begin
        frequency_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_frequency_V_address0 = zext_ln544_6_fu_432_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_frequency_V_address0 = zext_ln544_3_fu_371_p1;
    end else begin
        in_frequency_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        in_frequency_V_ce0 = 1'b1;
    end else begin
        in_frequency_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_value_V_address0 = zext_ln544_6_fu_432_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_value_V_address0 = zext_ln544_3_fu_371_p1;
    end else begin
        in_value_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        in_value_V_ce0 = 1'b1;
    end else begin
        in_value_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_208)) begin
            left_V_address0 = zext_ln33_fu_410_p1;
        end else if ((1'b1 == ap_condition_201)) begin
            left_V_address0 = zext_ln28_fu_398_p1;
        end else begin
            left_V_address0 = 'bx;
        end
    end else begin
        left_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (((1'd1 == and_ln26_fu_392_p2) & (icmp_ln887_fu_377_p2 == 1'd1)) | ((icmp_ln879_2_fu_382_p2 == 1'd0) & (icmp_ln887_fu_377_p2 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state3) & (((icmp_ln887_fu_377_p2 == 1'd1) & (1'd0 == and_ln26_fu_392_p2)) | ((icmp_ln879_2_fu_382_p2 == 1'd1) & (icmp_ln887_fu_377_p2 == 1'd0)))))) begin
        left_V_ce0 = 1'b1;
    end else begin
        left_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_208)) begin
            left_V_d0 = 32'd4294967295;
        end else if ((1'b1 == ap_condition_201)) begin
            left_V_d0 = in_value_V_q0;
        end else begin
            left_V_d0 = 'bx;
        end
    end else begin
        left_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (((1'd1 == and_ln26_fu_392_p2) & (icmp_ln887_fu_377_p2 == 1'd1)) | ((icmp_ln879_2_fu_382_p2 == 1'd0) & (icmp_ln887_fu_377_p2 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state3) & (((icmp_ln887_fu_377_p2 == 1'd1) & (1'd0 == and_ln26_fu_392_p2)) | ((icmp_ln879_2_fu_382_p2 == 1'd1) & (icmp_ln887_fu_377_p2 == 1'd0)))))) begin
        left_V_we0 = 1'b1;
    end else begin
        left_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        parent_V_address0 = zext_ln544_4_fu_490_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        parent_V_address0 = zext_ln544_5_reg_569;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        parent_V_address0 = zext_ln544_reg_523;
    end else begin
        parent_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        parent_V_ce0 = 1'b1;
    end else begin
        parent_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        parent_V_d0 = 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        parent_V_d0 = op2_assign_reg_271;
    end else begin
        parent_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state4) & (((1'd1 == and_ln42_fu_448_p2) & (icmp_ln887_1_reg_565 == 1'd1)) | ((icmp_ln879_4_fu_438_p2 == 1'd0) & (icmp_ln887_1_reg_565 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state3) & (((1'd1 == and_ln26_fu_392_p2) & (icmp_ln887_fu_377_p2 == 1'd1)) | ((icmp_ln879_2_fu_382_p2 == 1'd0) & (icmp_ln887_fu_377_p2 == 1'd0)))))) begin
        parent_V_we0 = 1'b1;
    end else begin
        parent_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((1'b1 == ap_condition_166)) begin
            right_V_address0 = zext_ln49_fu_465_p1;
        end else if ((1'b1 == ap_condition_156)) begin
            right_V_address0 = zext_ln44_fu_454_p1;
        end else begin
            right_V_address0 = 'bx;
        end
    end else begin
        right_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (((1'd1 == and_ln42_fu_448_p2) & (icmp_ln887_1_reg_565 == 1'd1)) | ((icmp_ln879_4_fu_438_p2 == 1'd0) & (icmp_ln887_1_reg_565 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state4) & (((icmp_ln887_1_reg_565 == 1'd1) & (1'd0 == and_ln42_fu_448_p2)) | ((icmp_ln879_4_fu_438_p2 == 1'd1) & (icmp_ln887_1_reg_565 == 1'd0)))))) begin
        right_V_ce0 = 1'b1;
    end else begin
        right_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((1'b1 == ap_condition_166)) begin
            right_V_d0 = 32'd4294967295;
        end else if ((1'b1 == ap_condition_156)) begin
            right_V_d0 = in_value_V_q0;
        end else begin
            right_V_d0 = 'bx;
        end
    end else begin
        right_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (((1'd1 == and_ln42_fu_448_p2) & (icmp_ln887_1_reg_565 == 1'd1)) | ((icmp_ln879_4_fu_438_p2 == 1'd0) & (icmp_ln887_1_reg_565 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state4) & (((icmp_ln887_1_reg_565 == 1'd1) & (1'd0 == and_ln42_fu_448_p2)) | ((icmp_ln879_4_fu_438_p2 == 1'd1) & (icmp_ln887_1_reg_565 == 1'd0)))))) begin
        right_V_we0 = 1'b1;
    end else begin
        right_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_loc_blk_n = val_assign_loc_empty_n;
    end else begin
        val_assign_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_loc_out_blk_n = val_assign_loc_out_full_n;
    end else begin
        val_assign_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((val_assign_loc_out_full_n == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_loc_out_write = 1'b1;
    end else begin
        val_assign_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((val_assign_loc_out_full_n == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_loc_read = 1'b1;
    end else begin
        val_assign_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((val_assign_loc_out_full_n == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln15_fu_355_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_fu_345_p2 = ($signed(val_assign_loc_dout) + $signed(32'd4294967295));

assign add_ln209_1_fu_470_p2 = (frequency_V_q0 + p_090_0_i_i_reg_306);

assign add_ln209_fu_459_p2 = (in_frequency_V_q0 + p_090_0_i_i_reg_306);

assign and_ln26_fu_392_p2 = (icmp_ln879_fu_387_p2 & grp_fu_339_p2);

assign and_ln42_fu_448_p2 = (icmp_ln879_3_fu_443_p2 & grp_fu_339_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((val_assign_loc_out_full_n == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_condition_156 = (((icmp_ln887_1_reg_565 == 1'd1) & (1'd0 == and_ln42_fu_448_p2)) | ((icmp_ln879_4_fu_438_p2 == 1'd1) & (icmp_ln887_1_reg_565 == 1'd0)));
end

always @ (*) begin
    ap_condition_166 = (((1'd1 == and_ln42_fu_448_p2) & (icmp_ln887_1_reg_565 == 1'd1)) | ((icmp_ln879_4_fu_438_p2 == 1'd0) & (icmp_ln887_1_reg_565 == 1'd0)));
end

always @ (*) begin
    ap_condition_201 = (((icmp_ln887_fu_377_p2 == 1'd1) & (1'd0 == and_ln26_fu_392_p2)) | ((icmp_ln879_2_fu_382_p2 == 1'd1) & (icmp_ln887_fu_377_p2 == 1'd0)));
end

always @ (*) begin
    ap_condition_208 = (((1'd1 == and_ln26_fu_392_p2) & (icmp_ln887_fu_377_p2 == 1'd1)) | ((icmp_ln879_2_fu_382_p2 == 1'd0) & (icmp_ln887_fu_377_p2 == 1'd0)));
end

always @ (*) begin
    ap_condition_222 = (((icmp_ln887_1_reg_565 == 1'd1) & (icmp_ln15_reg_514 == 1'd1) & (1'd0 == and_ln42_reg_593)) | ((icmp_ln879_4_reg_589 == 1'd1) & (icmp_ln15_reg_514 == 1'd1) & (icmp_ln887_1_reg_565 == 1'd0)));
end

always @ (*) begin
    ap_condition_229 = (((1'd1 == and_ln42_reg_593) & (icmp_ln887_1_reg_565 == 1'd1) & (icmp_ln15_reg_514 == 1'd1)) | ((icmp_ln15_reg_514 == 1'd1) & (icmp_ln879_4_reg_589 == 1'd0) & (icmp_ln887_1_reg_565 == 1'd0)));
end

assign grp_fu_339_p2 = ((frequency_V_q0 < in_frequency_V_q0) ? 1'b1 : 1'b0);

assign i_fu_360_p2 = (op2_assign_reg_271 + 31'd1);

assign icmp_ln15_fu_355_p2 = (($signed(zext_ln15_fu_351_p1) < $signed(add_ln15_reg_501)) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_382_p2 = ((t_V_3_reg_247 == zext_ln15_reg_506) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_443_p2 = ((t_V_5_reg_284 != zext_ln15_reg_506) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_438_p2 = ((t_V_5_reg_284 == zext_ln15_reg_506) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_387_p2 = ((t_V_3_reg_247 != zext_ln15_reg_506) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_422_p2 = ((ap_phi_mux_t_V_4_phi_fu_298_p4 < val_assign_loc_read_reg_495) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_377_p2 = ((t_V_reg_259 < val_assign_loc_read_reg_495) ? 1'b1 : 1'b0);

assign in_count_V_1_fu_476_p2 = (t_V_4_reg_295 + 32'd1);

assign in_count_V_fu_403_p2 = (t_V_reg_259 + 32'd1);

assign tree_count_V_1_fu_483_p2 = (t_V_5_reg_284 + 32'd1);

assign tree_count_V_fu_415_p2 = (t_V_3_reg_247 + 32'd1);

assign val_assign_loc_out_din = val_assign_loc_dout;

assign zext_ln15_fu_351_p1 = op2_assign_reg_271;

assign zext_ln28_fu_398_p1 = op2_assign_reg_271;

assign zext_ln33_fu_410_p1 = op2_assign_reg_271;

assign zext_ln44_fu_454_p1 = op2_assign_reg_271;

assign zext_ln49_fu_465_p1 = op2_assign_reg_271;

assign zext_ln544_3_fu_371_p1 = t_V_reg_259;

assign zext_ln544_4_fu_490_p1 = t_V_3_reg_247;

assign zext_ln544_5_fu_427_p1 = ap_phi_mux_t_V_5_phi_fu_287_p4;

assign zext_ln544_6_fu_432_p1 = ap_phi_mux_t_V_4_phi_fu_298_p4;

assign zext_ln544_fu_366_p1 = t_V_3_reg_247;

always @ (posedge ap_clk) begin
    zext_ln15_reg_506[31] <= 1'b0;
    zext_ln544_reg_523[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln544_5_reg_569[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln44_reg_597[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln49_reg_607[63:31] <= 33'b000000000000000000000000000000000;
end

endmodule //create_tree
