// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module create_tree (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_value_V_address0,
        in_value_V_ce0,
        in_value_V_q0,
        in_frequency_V_address0,
        in_frequency_V_ce0,
        in_frequency_V_q0,
        num_symbols,
        parent_V_address0,
        parent_V_ce0,
        parent_V_we0,
        parent_V_d0,
        left_V_address0,
        left_V_ce0,
        left_V_we0,
        left_V_d0,
        right_V_address0,
        right_V_ce0,
        right_V_we0,
        right_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] in_value_V_address0;
output   in_value_V_ce0;
input  [31:0] in_value_V_q0;
output  [7:0] in_frequency_V_address0;
output   in_frequency_V_ce0;
input  [31:0] in_frequency_V_q0;
input  [31:0] num_symbols;
output  [7:0] parent_V_address0;
output   parent_V_ce0;
output   parent_V_we0;
output  [30:0] parent_V_d0;
output  [7:0] left_V_address0;
output   left_V_ce0;
output   left_V_we0;
output  [31:0] left_V_d0;
output  [7:0] right_V_address0;
output   right_V_ce0;
output   right_V_we0;
output  [31:0] right_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] in_value_V_address0;
reg in_value_V_ce0;
reg[7:0] in_frequency_V_address0;
reg in_frequency_V_ce0;
reg[7:0] parent_V_address0;
reg parent_V_ce0;
reg parent_V_we0;
reg[30:0] parent_V_d0;
reg[7:0] left_V_address0;
reg left_V_ce0;
reg left_V_we0;
reg[31:0] left_V_d0;
reg[7:0] right_V_address0;
reg right_V_ce0;
reg right_V_we0;
reg[31:0] right_V_d0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] add_ln15_fu_294_p2;
reg   [31:0] add_ln15_reg_452;
wire   [31:0] zext_ln15_fu_300_p1;
reg   [31:0] zext_ln15_reg_457;
wire    ap_CS_fsm_state2;
wire   [30:0] i_fu_309_p2;
reg   [30:0] i_reg_468;
wire   [63:0] zext_ln544_5_fu_315_p1;
reg   [63:0] zext_ln544_5_reg_473;
wire   [0:0] icmp_ln15_fu_304_p2;
wire   [31:0] frequency_V_q0;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln887_1_fu_376_p2;
reg   [0:0] icmp_ln887_1_reg_512;
wire   [63:0] zext_ln544_7_fu_381_p1;
reg   [63:0] zext_ln544_7_reg_516;
reg   [31:0] in_value_V_load_1_reg_536;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln879_4_fu_392_p2;
reg   [0:0] icmp_ln879_4_reg_541;
wire   [0:0] and_ln41_fu_402_p2;
reg   [0:0] and_ln41_reg_545;
wire   [31:0] add_ln209_fu_408_p2;
reg   [31:0] add_ln209_reg_549;
wire   [31:0] add_ln209_1_fu_414_p2;
reg   [31:0] add_ln209_1_reg_554;
reg   [7:0] frequency_V_address0;
reg    frequency_V_ce0;
reg    frequency_V_we0;
reg   [31:0] frequency_V_d0;
reg   [31:0] t_V_3_reg_196;
reg   [31:0] ap_phi_mux_t_V_3_be_phi_fu_268_p4;
wire    ap_CS_fsm_state5;
reg   [31:0] t_V_reg_208;
reg   [31:0] ap_phi_mux_t_V_be_phi_fu_280_p4;
reg   [30:0] op2_assign_reg_220;
reg   [31:0] ap_phi_mux_t_V_5_phi_fu_236_p4;
reg   [31:0] t_V_5_reg_233;
wire   [0:0] icmp_ln887_fu_331_p2;
wire   [0:0] and_ln25_fu_346_p2;
wire   [0:0] icmp_ln879_2_fu_336_p2;
wire   [31:0] tree_count_V_fu_369_p2;
wire   [31:0] in_count_V_fu_357_p2;
reg   [31:0] ap_phi_mux_t_V_4_phi_fu_247_p4;
reg   [31:0] t_V_4_reg_244;
reg   [31:0] p_090_0_reg_255;
wire   [31:0] tree_count_V_1_fu_439_p2;
wire   [31:0] in_count_V_1_fu_426_p2;
wire   [63:0] zext_ln544_6_fu_320_p1;
wire   [63:0] zext_ln544_fu_326_p1;
wire   [63:0] zext_ln27_fu_352_p1;
wire   [63:0] zext_ln32_fu_364_p1;
wire   [63:0] zext_ln544_8_fu_386_p1;
wire   [63:0] zext_ln43_fu_420_p1;
wire   [63:0] zext_ln48_fu_433_p1;
wire   [0:0] grp_fu_288_p2;
wire   [0:0] icmp_ln879_fu_341_p2;
wire   [0:0] icmp_ln879_3_fu_397_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_condition_188;
reg    ap_condition_195;
reg    ap_condition_169;
reg    ap_condition_176;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

create_tree_frequibs #(
    .DataWidth( 32 ),
    .AddressRange( 255 ),
    .AddressWidth( 8 ))
frequency_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(frequency_V_address0),
    .ce0(frequency_V_ce0),
    .we0(frequency_V_we0),
    .d0(frequency_V_d0),
    .q0(frequency_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        op2_assign_reg_220 <= i_reg_468;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        op2_assign_reg_220 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_176)) begin
            p_090_0_reg_255 <= frequency_V_q0;
        end else if ((1'b1 == ap_condition_169)) begin
            p_090_0_reg_255 <= in_frequency_V_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        t_V_3_reg_196 <= ap_phi_mux_t_V_3_be_phi_fu_268_p4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_V_3_reg_196 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_176)) begin
            t_V_4_reg_244 <= t_V_reg_208;
        end else if ((1'b1 == ap_condition_169)) begin
            t_V_4_reg_244 <= in_count_V_fu_357_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_176)) begin
            t_V_5_reg_233 <= tree_count_V_fu_369_p2;
        end else if ((1'b1 == ap_condition_169)) begin
            t_V_5_reg_233 <= t_V_3_reg_196;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        t_V_reg_208 <= ap_phi_mux_t_V_be_phi_fu_280_p4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_V_reg_208 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln15_reg_452 <= add_ln15_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (((icmp_ln887_1_reg_512 == 1'd1) & (1'd1 == and_ln41_fu_402_p2)) | ((icmp_ln887_1_reg_512 == 1'd0) & (icmp_ln879_4_fu_392_p2 == 1'd0))))) begin
        add_ln209_1_reg_554 <= add_ln209_1_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (((icmp_ln887_1_reg_512 == 1'd1) & (1'd0 == and_ln41_fu_402_p2)) | ((icmp_ln887_1_reg_512 == 1'd0) & (icmp_ln879_4_fu_392_p2 == 1'd1))))) begin
        add_ln209_reg_549 <= add_ln209_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_reg_512 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        and_ln41_reg_545 <= and_ln41_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_468 <= i_fu_309_p2;
        zext_ln15_reg_457[30 : 0] <= zext_ln15_fu_300_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_reg_512 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln879_4_reg_541 <= icmp_ln879_4_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln887_1_reg_512 <= icmp_ln887_1_fu_376_p2;
        zext_ln544_7_reg_516[31 : 0] <= zext_ln544_7_fu_381_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_value_V_load_1_reg_536 <= in_value_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln544_5_reg_473[31 : 0] <= zext_ln544_5_fu_315_p1[31 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln15_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'b1 == ap_condition_195)) begin
            ap_phi_mux_t_V_3_be_phi_fu_268_p4 = tree_count_V_1_fu_439_p2;
        end else if ((1'b1 == ap_condition_188)) begin
            ap_phi_mux_t_V_3_be_phi_fu_268_p4 = t_V_5_reg_233;
        end else begin
            ap_phi_mux_t_V_3_be_phi_fu_268_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_t_V_3_be_phi_fu_268_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_176)) begin
            ap_phi_mux_t_V_4_phi_fu_247_p4 = t_V_reg_208;
        end else if ((1'b1 == ap_condition_169)) begin
            ap_phi_mux_t_V_4_phi_fu_247_p4 = in_count_V_fu_357_p2;
        end else begin
            ap_phi_mux_t_V_4_phi_fu_247_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_t_V_4_phi_fu_247_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_176)) begin
            ap_phi_mux_t_V_5_phi_fu_236_p4 = tree_count_V_fu_369_p2;
        end else if ((1'b1 == ap_condition_169)) begin
            ap_phi_mux_t_V_5_phi_fu_236_p4 = t_V_3_reg_196;
        end else begin
            ap_phi_mux_t_V_5_phi_fu_236_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_t_V_5_phi_fu_236_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'b1 == ap_condition_195)) begin
            ap_phi_mux_t_V_be_phi_fu_280_p4 = t_V_4_reg_244;
        end else if ((1'b1 == ap_condition_188)) begin
            ap_phi_mux_t_V_be_phi_fu_280_p4 = in_count_V_1_fu_426_p2;
        end else begin
            ap_phi_mux_t_V_be_phi_fu_280_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_t_V_be_phi_fu_280_p4 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (((icmp_ln887_1_reg_512 == 1'd1) & (1'd1 == and_ln41_reg_545)) | ((icmp_ln887_1_reg_512 == 1'd0) & (icmp_ln879_4_reg_541 == 1'd0))))) begin
        frequency_V_address0 = zext_ln48_fu_433_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (((icmp_ln887_1_reg_512 == 1'd1) & (1'd0 == and_ln41_reg_545)) | ((icmp_ln887_1_reg_512 == 1'd0) & (icmp_ln879_4_reg_541 == 1'd1))))) begin
        frequency_V_address0 = zext_ln43_fu_420_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        frequency_V_address0 = zext_ln544_7_fu_381_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        frequency_V_address0 = zext_ln544_5_fu_315_p1;
    end else begin
        frequency_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state5) & (((icmp_ln887_1_reg_512 == 1'd1) & (1'd1 == and_ln41_reg_545)) | ((icmp_ln887_1_reg_512 == 1'd0) & (icmp_ln879_4_reg_541 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state5) & (((icmp_ln887_1_reg_512 == 1'd1) & (1'd0 == and_ln41_reg_545)) | ((icmp_ln887_1_reg_512 == 1'd0) & (icmp_ln879_4_reg_541 == 1'd1)))))) begin
        frequency_V_ce0 = 1'b1;
    end else begin
        frequency_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'b1 == ap_condition_195)) begin
            frequency_V_d0 = add_ln209_1_reg_554;
        end else if ((1'b1 == ap_condition_188)) begin
            frequency_V_d0 = add_ln209_reg_549;
        end else begin
            frequency_V_d0 = 'bx;
        end
    end else begin
        frequency_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (((icmp_ln887_1_reg_512 == 1'd1) & (1'd1 == and_ln41_reg_545)) | ((icmp_ln887_1_reg_512 == 1'd0) & (icmp_ln879_4_reg_541 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state5) & (((icmp_ln887_1_reg_512 == 1'd1) & (1'd0 == and_ln41_reg_545)) | ((icmp_ln887_1_reg_512 == 1'd0) & (icmp_ln879_4_reg_541 == 1'd1)))))) begin
        frequency_V_we0 = 1'b1;
    end else begin
        frequency_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_frequency_V_address0 = zext_ln544_8_fu_386_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_frequency_V_address0 = zext_ln544_6_fu_320_p1;
    end else begin
        in_frequency_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        in_frequency_V_ce0 = 1'b1;
    end else begin
        in_frequency_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_value_V_address0 = zext_ln544_8_fu_386_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_value_V_address0 = zext_ln544_6_fu_320_p1;
    end else begin
        in_value_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        in_value_V_ce0 = 1'b1;
    end else begin
        in_value_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_176)) begin
            left_V_address0 = zext_ln32_fu_364_p1;
        end else if ((1'b1 == ap_condition_169)) begin
            left_V_address0 = zext_ln27_fu_352_p1;
        end else begin
            left_V_address0 = 'bx;
        end
    end else begin
        left_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (((icmp_ln879_2_fu_336_p2 == 1'd0) & (icmp_ln887_fu_331_p2 == 1'd0)) | ((1'd1 == and_ln25_fu_346_p2) & (icmp_ln887_fu_331_p2 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state3) & (((icmp_ln879_2_fu_336_p2 == 1'd1) & (icmp_ln887_fu_331_p2 == 1'd0)) | ((icmp_ln887_fu_331_p2 == 1'd1) & (1'd0 == and_ln25_fu_346_p2)))))) begin
        left_V_ce0 = 1'b1;
    end else begin
        left_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_176)) begin
            left_V_d0 = 32'd4294967295;
        end else if ((1'b1 == ap_condition_169)) begin
            left_V_d0 = in_value_V_q0;
        end else begin
            left_V_d0 = 'bx;
        end
    end else begin
        left_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (((icmp_ln879_2_fu_336_p2 == 1'd0) & (icmp_ln887_fu_331_p2 == 1'd0)) | ((1'd1 == and_ln25_fu_346_p2) & (icmp_ln887_fu_331_p2 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state3) & (((icmp_ln879_2_fu_336_p2 == 1'd1) & (icmp_ln887_fu_331_p2 == 1'd0)) | ((icmp_ln887_fu_331_p2 == 1'd1) & (1'd0 == and_ln25_fu_346_p2)))))) begin
        left_V_we0 = 1'b1;
    end else begin
        left_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        parent_V_address0 = zext_ln544_7_reg_516;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        parent_V_address0 = zext_ln544_5_reg_473;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        parent_V_address0 = zext_ln544_fu_326_p1;
    end else begin
        parent_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4))) begin
        parent_V_ce0 = 1'b1;
    end else begin
        parent_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        parent_V_d0 = op2_assign_reg_220;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        parent_V_d0 = 31'd0;
    end else begin
        parent_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (((icmp_ln879_2_fu_336_p2 == 1'd0) & (icmp_ln887_fu_331_p2 == 1'd0)) | ((1'd1 == and_ln25_fu_346_p2) & (icmp_ln887_fu_331_p2 == 1'd1)))) | ((icmp_ln15_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state4) & (((icmp_ln887_1_reg_512 == 1'd1) & (1'd1 == and_ln41_fu_402_p2)) | ((icmp_ln887_1_reg_512 == 1'd0) & (icmp_ln879_4_fu_392_p2 == 1'd0)))))) begin
        parent_V_we0 = 1'b1;
    end else begin
        parent_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'b1 == ap_condition_195)) begin
            right_V_address0 = zext_ln48_fu_433_p1;
        end else if ((1'b1 == ap_condition_188)) begin
            right_V_address0 = zext_ln43_fu_420_p1;
        end else begin
            right_V_address0 = 'bx;
        end
    end else begin
        right_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (((icmp_ln887_1_reg_512 == 1'd1) & (1'd1 == and_ln41_reg_545)) | ((icmp_ln887_1_reg_512 == 1'd0) & (icmp_ln879_4_reg_541 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state5) & (((icmp_ln887_1_reg_512 == 1'd1) & (1'd0 == and_ln41_reg_545)) | ((icmp_ln887_1_reg_512 == 1'd0) & (icmp_ln879_4_reg_541 == 1'd1)))))) begin
        right_V_ce0 = 1'b1;
    end else begin
        right_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'b1 == ap_condition_195)) begin
            right_V_d0 = 32'd4294967295;
        end else if ((1'b1 == ap_condition_188)) begin
            right_V_d0 = in_value_V_load_1_reg_536;
        end else begin
            right_V_d0 = 'bx;
        end
    end else begin
        right_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (((icmp_ln887_1_reg_512 == 1'd1) & (1'd1 == and_ln41_reg_545)) | ((icmp_ln887_1_reg_512 == 1'd0) & (icmp_ln879_4_reg_541 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state5) & (((icmp_ln887_1_reg_512 == 1'd1) & (1'd0 == and_ln41_reg_545)) | ((icmp_ln887_1_reg_512 == 1'd0) & (icmp_ln879_4_reg_541 == 1'd1)))))) begin
        right_V_we0 = 1'b1;
    end else begin
        right_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln15_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_fu_294_p2 = ($signed(num_symbols) + $signed(32'd4294967295));

assign add_ln209_1_fu_414_p2 = (frequency_V_q0 + p_090_0_reg_255);

assign add_ln209_fu_408_p2 = (in_frequency_V_q0 + p_090_0_reg_255);

assign and_ln25_fu_346_p2 = (icmp_ln879_fu_341_p2 & grp_fu_288_p2);

assign and_ln41_fu_402_p2 = (icmp_ln879_3_fu_397_p2 & grp_fu_288_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_condition_169 = (((icmp_ln879_2_fu_336_p2 == 1'd1) & (icmp_ln887_fu_331_p2 == 1'd0)) | ((icmp_ln887_fu_331_p2 == 1'd1) & (1'd0 == and_ln25_fu_346_p2)));
end

always @ (*) begin
    ap_condition_176 = (((icmp_ln879_2_fu_336_p2 == 1'd0) & (icmp_ln887_fu_331_p2 == 1'd0)) | ((1'd1 == and_ln25_fu_346_p2) & (icmp_ln887_fu_331_p2 == 1'd1)));
end

always @ (*) begin
    ap_condition_188 = (((icmp_ln887_1_reg_512 == 1'd1) & (1'd0 == and_ln41_reg_545)) | ((icmp_ln887_1_reg_512 == 1'd0) & (icmp_ln879_4_reg_541 == 1'd1)));
end

always @ (*) begin
    ap_condition_195 = (((icmp_ln887_1_reg_512 == 1'd1) & (1'd1 == and_ln41_reg_545)) | ((icmp_ln887_1_reg_512 == 1'd0) & (icmp_ln879_4_reg_541 == 1'd0)));
end

assign grp_fu_288_p2 = ((frequency_V_q0 < in_frequency_V_q0) ? 1'b1 : 1'b0);

assign i_fu_309_p2 = (op2_assign_reg_220 + 31'd1);

assign icmp_ln15_fu_304_p2 = (($signed(zext_ln15_fu_300_p1) < $signed(add_ln15_reg_452)) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_336_p2 = ((t_V_3_reg_196 == zext_ln15_reg_457) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_397_p2 = ((t_V_5_reg_233 != zext_ln15_reg_457) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_392_p2 = ((t_V_5_reg_233 == zext_ln15_reg_457) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_341_p2 = ((t_V_3_reg_196 != zext_ln15_reg_457) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_376_p2 = ((ap_phi_mux_t_V_4_phi_fu_247_p4 < num_symbols) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_331_p2 = ((t_V_reg_208 < num_symbols) ? 1'b1 : 1'b0);

assign in_count_V_1_fu_426_p2 = (t_V_4_reg_244 + 32'd1);

assign in_count_V_fu_357_p2 = (t_V_reg_208 + 32'd1);

assign tree_count_V_1_fu_439_p2 = (t_V_5_reg_233 + 32'd1);

assign tree_count_V_fu_369_p2 = (t_V_3_reg_196 + 32'd1);

assign zext_ln15_fu_300_p1 = op2_assign_reg_220;

assign zext_ln27_fu_352_p1 = op2_assign_reg_220;

assign zext_ln32_fu_364_p1 = op2_assign_reg_220;

assign zext_ln43_fu_420_p1 = op2_assign_reg_220;

assign zext_ln48_fu_433_p1 = op2_assign_reg_220;

assign zext_ln544_5_fu_315_p1 = t_V_3_reg_196;

assign zext_ln544_6_fu_320_p1 = t_V_reg_208;

assign zext_ln544_7_fu_381_p1 = ap_phi_mux_t_V_5_phi_fu_236_p4;

assign zext_ln544_8_fu_386_p1 = ap_phi_mux_t_V_4_phi_fu_247_p4;

assign zext_ln544_fu_326_p1 = t_V_3_reg_196;

always @ (posedge ap_clk) begin
    zext_ln15_reg_457[31] <= 1'b0;
    zext_ln544_5_reg_473[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln544_7_reg_516[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //create_tree
