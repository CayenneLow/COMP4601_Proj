// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_bit_length (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        parent_V_address0,
        parent_V_ce0,
        parent_V_q0,
        left_V_address0,
        left_V_ce0,
        left_V_q0,
        right_V_address0,
        right_V_ce0,
        right_V_q0,
        num_symbols,
        length_histogram_V_address0,
        length_histogram_V_ce0,
        length_histogram_V_we0,
        length_histogram_V_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] parent_V_address0;
output   parent_V_ce0;
input  [30:0] parent_V_q0;
output  [7:0] left_V_address0;
output   left_V_ce0;
input  [31:0] left_V_q0;
output  [7:0] right_V_address0;
output   right_V_ce0;
input  [31:0] right_V_q0;
input  [31:0] num_symbols;
output  [5:0] length_histogram_V_address0;
output   length_histogram_V_ce0;
output   length_histogram_V_we0;
output  [31:0] length_histogram_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg parent_V_ce0;
reg left_V_ce0;
reg right_V_ce0;
reg length_histogram_V_ce0;
reg length_histogram_V_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_7_fu_211_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_fu_232_p2;
wire   [0:0] icmp_ln14_fu_205_p2;
wire   [63:0] zext_ln23_fu_245_p1;
reg   [63:0] zext_ln23_reg_318;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_2_fu_237_p3;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln883_fu_262_p2;
reg   [0:0] icmp_ln883_reg_345;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln883_1_fu_268_p2;
reg   [0:0] icmp_ln883_1_reg_349;
wire   [63:0] zext_ln544_9_fu_274_p1;
reg   [63:0] zext_ln544_9_reg_353;
reg   [5:0] internal_length_hist_2_reg_358;
wire   [31:0] internal_length_hist_q0;
reg   [31:0] count_V_reg_363;
wire    ap_CS_fsm_state6;
wire   [31:0] i_8_fu_290_p2;
wire    ap_CS_fsm_state7;
reg   [7:0] child_depth_V_address0;
reg    child_depth_V_ce0;
reg    child_depth_V_we0;
reg   [5:0] child_depth_V_d0;
wire   [5:0] child_depth_V_q0;
reg   [5:0] internal_length_hist_address0;
reg    internal_length_hist_ce0;
reg    internal_length_hist_we0;
reg   [31:0] internal_length_hist_d0;
reg   [6:0] i_0_reg_171;
reg   [31:0] i2_0_reg_182;
reg   [1:0] op2_assign_reg_192;
wire   [63:0] zext_ln16_fu_217_p1;
wire  signed [63:0] sext_ln19_fu_227_p1;
wire   [63:0] zext_ln544_fu_250_p1;
wire   [31:0] count_V_2_fu_283_p2;
wire   [5:0] length_V_fu_255_p2;
wire   [31:0] add_ln19_fu_222_p2;
wire   [31:0] zext_ln544_10_fu_279_p1;
reg   [6:0] ap_NS_fsm;
reg    ap_condition_158;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

compute_bit_lengtjbC #(
    .DataWidth( 6 ),
    .AddressRange( 255 ),
    .AddressWidth( 8 ))
child_depth_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(child_depth_V_address0),
    .ce0(child_depth_V_ce0),
    .we0(child_depth_V_we0),
    .d0(child_depth_V_d0),
    .q0(child_depth_V_q0)
);

compute_bit_lengtkbM #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
internal_length_hist_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(internal_length_hist_address0),
    .ce0(internal_length_hist_ce0),
    .we0(internal_length_hist_we0),
    .d0(internal_length_hist_d0),
    .q0(internal_length_hist_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i2_0_reg_182 <= i_8_fu_290_p2;
    end else if (((icmp_ln14_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i2_0_reg_182 <= i_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_171 <= 7'd0;
    end else if (((icmp_ln14_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_171 <= i_7_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (((icmp_ln883_fu_262_p2 == 1'd0) & (icmp_ln883_1_fu_268_p2 == 1'd0))) begin
            op2_assign_reg_192 <= 2'd2;
        end else if ((1'b1 == ap_condition_158)) begin
            op2_assign_reg_192 <= 2'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        count_V_reg_363 <= internal_length_hist_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln883_1_reg_349 <= icmp_ln883_1_fu_268_p2;
        icmp_ln883_reg_345 <= icmp_ln883_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((icmp_ln883_fu_262_p2 == 1'd0) | (icmp_ln883_1_fu_268_p2 == 1'd0)))) begin
        internal_length_hist_2_reg_358 <= zext_ln544_9_fu_274_p1;
        zext_ln544_9_reg_353[5 : 0] <= zext_ln544_9_fu_274_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_237_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln23_reg_318[31 : 0] <= zext_ln23_fu_245_p1[31 : 0];
    end
end

always @ (*) begin
    if ((((tmp_2_fu_237_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_fu_237_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        child_depth_V_address0 = zext_ln23_reg_318;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        child_depth_V_address0 = zext_ln544_fu_250_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        child_depth_V_address0 = sext_ln19_fu_227_p1;
    end else begin
        child_depth_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        child_depth_V_ce0 = 1'b1;
    end else begin
        child_depth_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        child_depth_V_d0 = length_V_fu_255_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        child_depth_V_d0 = 6'd1;
    end else begin
        child_depth_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln14_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        child_depth_V_we0 = 1'b1;
    end else begin
        child_depth_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_length_hist_address0 = internal_length_hist_2_reg_358;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_length_hist_address0 = zext_ln544_9_fu_274_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        internal_length_hist_address0 = zext_ln16_fu_217_p1;
    end else begin
        internal_length_hist_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        internal_length_hist_ce0 = 1'b1;
    end else begin
        internal_length_hist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_length_hist_d0 = count_V_2_fu_283_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        internal_length_hist_d0 = 32'd0;
    end else begin
        internal_length_hist_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln14_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state7) & ((icmp_ln883_reg_345 == 1'd0) | (icmp_ln883_1_reg_349 == 1'd0))))) begin
        internal_length_hist_we0 = 1'b1;
    end else begin
        internal_length_hist_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        left_V_ce0 = 1'b1;
    end else begin
        left_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        length_histogram_V_ce0 = 1'b1;
    end else begin
        length_histogram_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & ((icmp_ln883_reg_345 == 1'd0) | (icmp_ln883_1_reg_349 == 1'd0)))) begin
        length_histogram_V_we0 = 1'b1;
    end else begin
        length_histogram_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        parent_V_ce0 = 1'b1;
    end else begin
        parent_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        right_V_ce0 = 1'b1;
    end else begin
        right_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln14_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_2_fu_237_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln883_fu_262_p2 == 1'd1) & (icmp_ln883_1_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_fu_222_p2 = ($signed(num_symbols) + $signed(32'd4294967294));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_condition_158 = (((icmp_ln883_fu_262_p2 == 1'd0) & (icmp_ln883_1_fu_268_p2 == 1'd1)) | ((icmp_ln883_1_fu_268_p2 == 1'd0) & (icmp_ln883_fu_262_p2 == 1'd1)));
end

assign count_V_2_fu_283_p2 = (count_V_reg_363 + zext_ln544_10_fu_279_p1);

assign i_7_fu_211_p2 = (i_0_reg_171 + 7'd1);

assign i_8_fu_290_p2 = ($signed(i2_0_reg_182) + $signed(32'd4294967295));

assign i_fu_232_p2 = ($signed(num_symbols) + $signed(32'd4294967293));

assign icmp_ln14_fu_205_p2 = ((i_0_reg_171 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln883_1_fu_268_p2 = ((right_V_q0 == 32'd4294967295) ? 1'b1 : 1'b0);

assign icmp_ln883_fu_262_p2 = ((left_V_q0 == 32'd4294967295) ? 1'b1 : 1'b0);

assign left_V_address0 = zext_ln23_reg_318;

assign length_V_fu_255_p2 = (child_depth_V_q0 + 6'd1);

assign length_histogram_V_address0 = zext_ln544_9_reg_353;

assign length_histogram_V_d0 = (count_V_reg_363 + zext_ln544_10_fu_279_p1);

assign parent_V_address0 = zext_ln23_fu_245_p1;

assign right_V_address0 = zext_ln23_reg_318;

assign sext_ln19_fu_227_p1 = $signed(add_ln19_fu_222_p2);

assign tmp_2_fu_237_p3 = i2_0_reg_182[32'd31];

assign zext_ln16_fu_217_p1 = i_0_reg_171;

assign zext_ln23_fu_245_p1 = i2_0_reg_182;

assign zext_ln544_10_fu_279_p1 = op2_assign_reg_192;

assign zext_ln544_9_fu_274_p1 = length_V_fu_255_p2;

assign zext_ln544_fu_250_p1 = parent_V_q0;

always @ (posedge ap_clk) begin
    zext_ln23_reg_318[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln544_9_reg_353[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //compute_bit_length
