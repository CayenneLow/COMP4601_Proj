// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canonize_tree (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        sorted_value_V_address0,
        sorted_value_V_ce0,
        sorted_value_V_q0,
        val_assign_loc_dout,
        val_assign_loc_empty_n,
        val_assign_loc_read,
        codeword_length_histogram_V_address0,
        codeword_length_histogram_V_ce0,
        codeword_length_histogram_V_q0,
        symbol_bits_V_address0,
        symbol_bits_V_ce0,
        symbol_bits_V_we0,
        symbol_bits_V_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state7 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] sorted_value_V_address0;
output   sorted_value_V_ce0;
input  [31:0] sorted_value_V_q0;
input  [31:0] val_assign_loc_dout;
input   val_assign_loc_empty_n;
output   val_assign_loc_read;
output  [5:0] codeword_length_histogram_V_address0;
output   codeword_length_histogram_V_ce0;
input  [31:0] codeword_length_histogram_V_q0;
output  [7:0] symbol_bits_V_address0;
output   symbol_bits_V_ce0;
output   symbol_bits_V_we0;
output  [4:0] symbol_bits_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sorted_value_V_ce0;
reg val_assign_loc_read;
reg codeword_length_histogram_V_ce0;
reg[7:0] symbol_bits_V_address0;
reg symbol_bits_V_ce0;
reg symbol_bits_V_we0;
reg[4:0] symbol_bits_V_d0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    val_assign_loc_blk_n;
reg  signed [31:0] k_1_i_i_reg_149;
reg   [31:0] i_op_assign_reg_160;
reg   [31:0] val_assign_loc_read_reg_253;
reg    ap_block_state1;
wire   [8:0] i_fu_189_p2;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [31:0] count_V_reg_272;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln887_fu_205_p2;
reg   [0:0] icmp_ln887_reg_277;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] i_7_fu_210_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] k_fu_216_p2;
reg   [31:0] k_reg_286;
wire   [0:0] icmp_ln891_fu_227_p2;
reg   [0:0] icmp_ln891_reg_297;
wire   [31:0] length_V_fu_247_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln891_1_fu_242_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_predicate_tran6to7_state5;
reg    ap_enable_reg_pp0_iter1;
reg   [8:0] i_0_i_i_reg_114;
wire   [0:0] icmp_ln13_fu_183_p2;
reg   [31:0] t_V_reg_125;
reg   [31:0] k_0_i_i_reg_137;
reg  signed [31:0] ap_phi_mux_k_1_i_i_phi_fu_152_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] i_op_assign_1_reg_171;
wire   [63:0] zext_ln14_fu_195_p1;
wire   [63:0] zext_ln544_fu_200_p1;
wire  signed [63:0] sext_ln31_fu_222_p1;
wire  signed [63:0] sext_ln32_fu_232_p1;
wire   [4:0] trunc_ln209_fu_237_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_256;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln891_1_fu_242_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_predicate_tran6to7_state5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((val_assign_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_reg_114 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_183_p2 == 1'd0))) begin
        i_0_i_i_reg_114 <= i_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_256)) begin
            i_op_assign_1_reg_171 <= k_reg_286;
        end else if (((icmp_ln887_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_op_assign_1_reg_171 <= ap_phi_mux_k_1_i_i_phi_fu_152_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln891_fu_227_p2 == 1'd1))) begin
        i_op_assign_reg_160 <= i_7_fu_210_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_op_assign_reg_160 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_183_p2 == 1'd1))) begin
        k_0_i_i_reg_137 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln891_1_fu_242_p2 == 1'd1))) begin
        k_0_i_i_reg_137 <= i_op_assign_1_reg_171;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_277 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln891_reg_297 == 1'd1))) begin
        k_1_i_i_reg_149 <= k_reg_286;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        k_1_i_i_reg_149 <= k_0_i_i_reg_137;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_183_p2 == 1'd1))) begin
        t_V_reg_125 <= 32'd64;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln891_1_fu_242_p2 == 1'd1))) begin
        t_V_reg_125 <= length_V_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        count_V_reg_272 <= codeword_length_histogram_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln887_reg_277 <= icmp_ln887_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln891_reg_297 <= icmp_ln891_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        k_reg_286 <= k_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((val_assign_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_loc_read_reg_253 <= val_assign_loc_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln891_1_fu_242_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_277 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln891_reg_297 == 1'd1))) begin
        ap_phi_mux_k_1_i_i_phi_fu_152_p4 = k_reg_286;
    end else begin
        ap_phi_mux_k_1_i_i_phi_fu_152_p4 = k_1_i_i_reg_149;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln891_1_fu_242_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        codeword_length_histogram_V_ce0 = 1'b1;
    end else begin
        codeword_length_histogram_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sorted_value_V_ce0 = 1'b1;
    end else begin
        sorted_value_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        symbol_bits_V_address0 = sext_ln32_fu_232_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        symbol_bits_V_address0 = zext_ln14_fu_195_p1;
    end else begin
        symbol_bits_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        symbol_bits_V_ce0 = 1'b1;
    end else begin
        symbol_bits_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        symbol_bits_V_d0 = trunc_ln209_fu_237_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        symbol_bits_V_d0 = 5'd0;
    end else begin
        symbol_bits_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_277 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_183_p2 == 1'd0)))) begin
        symbol_bits_V_we0 = 1'b1;
    end else begin
        symbol_bits_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_loc_blk_n = val_assign_loc_empty_n;
    end else begin
        val_assign_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((val_assign_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_loc_read = 1'b1;
    end else begin
        val_assign_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((val_assign_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_183_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln891_1_fu_242_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((val_assign_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_256 = ((icmp_ln887_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln891_reg_297 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran6to7_state5 = ((icmp_ln887_fu_205_p2 == 1'd0) | (icmp_ln891_fu_227_p2 == 1'd0));
end

assign codeword_length_histogram_V_address0 = zext_ln544_fu_200_p1;

assign i_7_fu_210_p2 = (i_op_assign_reg_160 + 32'd1);

assign i_fu_189_p2 = (i_0_i_i_reg_114 + 9'd1);

assign icmp_ln13_fu_183_p2 = ((i_0_i_i_reg_114 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_205_p2 = ((i_op_assign_reg_160 < count_V_reg_272) ? 1'b1 : 1'b0);

assign icmp_ln891_1_fu_242_p2 = ((i_op_assign_1_reg_171 < val_assign_loc_read_reg_253) ? 1'b1 : 1'b0);

assign icmp_ln891_fu_227_p2 = ((k_fu_216_p2 < val_assign_loc_read_reg_253) ? 1'b1 : 1'b0);

assign k_fu_216_p2 = ($signed(32'd1) + $signed(ap_phi_mux_k_1_i_i_phi_fu_152_p4));

assign length_V_fu_247_p2 = ($signed(t_V_reg_125) + $signed(32'd4294967295));

assign sext_ln31_fu_222_p1 = ap_phi_mux_k_1_i_i_phi_fu_152_p4;

assign sext_ln32_fu_232_p1 = $signed(sorted_value_V_q0);

assign sorted_value_V_address0 = sext_ln31_fu_222_p1;

assign trunc_ln209_fu_237_p1 = t_V_reg_125[4:0];

assign zext_ln14_fu_195_p1 = i_0_i_i_reg_114;

assign zext_ln544_fu_200_p1 = t_V_reg_125;

endmodule //canonize_tree
