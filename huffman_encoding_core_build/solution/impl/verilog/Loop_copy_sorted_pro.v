// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_copy_sorted_pro (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        n_dout,
        n_empty_n,
        n_read,
        sorted_0_address0,
        sorted_0_ce0,
        sorted_0_q0,
        sorted_copy1_value_V_address0,
        sorted_copy1_value_V_ce0,
        sorted_copy1_value_V_we0,
        sorted_copy1_value_V_d0,
        sorted_1_address0,
        sorted_1_ce0,
        sorted_1_q0,
        sorted_copy1_frequency_V_address0,
        sorted_copy1_frequency_V_ce0,
        sorted_copy1_frequency_V_we0,
        sorted_copy1_frequency_V_d0,
        sorted_copy2_value_V_address0,
        sorted_copy2_value_V_ce0,
        sorted_copy2_value_V_we0,
        sorted_copy2_value_V_d0,
        val_assign_out_out_din,
        val_assign_out_out_full_n,
        val_assign_out_out_write,
        val_assign_out_out1_din,
        val_assign_out_out1_full_n,
        val_assign_out_out1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] n_dout;
input   n_empty_n;
output   n_read;
output  [7:0] sorted_0_address0;
output   sorted_0_ce0;
input  [31:0] sorted_0_q0;
output  [7:0] sorted_copy1_value_V_address0;
output   sorted_copy1_value_V_ce0;
output   sorted_copy1_value_V_we0;
output  [31:0] sorted_copy1_value_V_d0;
output  [7:0] sorted_1_address0;
output   sorted_1_ce0;
input  [31:0] sorted_1_q0;
output  [7:0] sorted_copy1_frequency_V_address0;
output   sorted_copy1_frequency_V_ce0;
output   sorted_copy1_frequency_V_we0;
output  [31:0] sorted_copy1_frequency_V_d0;
output  [7:0] sorted_copy2_value_V_address0;
output   sorted_copy2_value_V_ce0;
output   sorted_copy2_value_V_we0;
output  [31:0] sorted_copy2_value_V_d0;
output  [31:0] val_assign_out_out_din;
input   val_assign_out_out_full_n;
output   val_assign_out_out_write;
output  [31:0] val_assign_out_out1_din;
input   val_assign_out_out1_full_n;
output   val_assign_out_out1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg n_read;
reg sorted_0_ce0;
reg sorted_copy1_value_V_ce0;
reg sorted_copy1_value_V_we0;
reg sorted_1_ce0;
reg sorted_copy1_frequency_V_ce0;
reg sorted_copy1_frequency_V_we0;
reg sorted_copy2_value_V_ce0;
reg sorted_copy2_value_V_we0;
reg val_assign_out_out_write;
reg val_assign_out_out1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    n_blk_n;
reg    val_assign_out_out_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln42_fu_185_p2;
reg    val_assign_out_out1_blk_n;
reg   [31:0] n_read_reg_202;
reg    ap_block_state1;
wire   [30:0] i_fu_190_p2;
reg   [30:0] i_reg_212;
reg    ap_block_state2;
wire   [63:0] zext_ln43_fu_196_p1;
reg   [63:0] zext_ln43_reg_217;
reg   [30:0] i_0_i_reg_170;
wire    ap_CS_fsm_state3;
wire   [31:0] zext_ln42_fu_181_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out1_full_n == 1'b0)) | ((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out_full_n == 1'b0))) & (icmp_ln42_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_170 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_i_reg_170 <= i_reg_212;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out1_full_n == 1'b0)) | ((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_212 <= i_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_read_reg_202 <= n_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out1_full_n == 1'b0)) | ((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out_full_n == 1'b0))) & (icmp_ln42_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln43_reg_217[30 : 0] <= zext_ln43_fu_196_p1[30 : 0];
    end
end

always @ (*) begin
    if ((~(((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out1_full_n == 1'b0)) | ((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out_full_n == 1'b0))) & (icmp_ln42_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out1_full_n == 1'b0)) | ((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out_full_n == 1'b0))) & (icmp_ln42_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_blk_n = n_empty_n;
    end else begin
        n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_read = 1'b1;
    end else begin
        n_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((~(((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out1_full_n == 1'b0)) | ((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        sorted_0_ce0 = 1'b1;
    end else begin
        sorted_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out1_full_n == 1'b0)) | ((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        sorted_1_ce0 = 1'b1;
    end else begin
        sorted_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sorted_copy1_frequency_V_ce0 = 1'b1;
    end else begin
        sorted_copy1_frequency_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sorted_copy1_frequency_V_we0 = 1'b1;
    end else begin
        sorted_copy1_frequency_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sorted_copy1_value_V_ce0 = 1'b1;
    end else begin
        sorted_copy1_value_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sorted_copy1_value_V_we0 = 1'b1;
    end else begin
        sorted_copy1_value_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sorted_copy2_value_V_ce0 = 1'b1;
    end else begin
        sorted_copy2_value_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sorted_copy2_value_V_we0 = 1'b1;
    end else begin
        sorted_copy2_value_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        val_assign_out_out1_blk_n = val_assign_out_out1_full_n;
    end else begin
        val_assign_out_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out1_full_n == 1'b0)) | ((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out_full_n == 1'b0))) & (icmp_ln42_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        val_assign_out_out1_write = 1'b1;
    end else begin
        val_assign_out_out1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        val_assign_out_out_blk_n = val_assign_out_out_full_n;
    end else begin
        val_assign_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out1_full_n == 1'b0)) | ((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out_full_n == 1'b0))) & (icmp_ln42_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        val_assign_out_out_write = 1'b1;
    end else begin
        val_assign_out_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out1_full_n == 1'b0)) | ((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out_full_n == 1'b0))) & (icmp_ln42_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out1_full_n == 1'b0)) | ((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out_full_n == 1'b0))) & (icmp_ln42_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (n_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out1_full_n == 1'b0)) | ((icmp_ln42_fu_185_p2 == 1'd0) & (val_assign_out_out_full_n == 1'b0)));
end

assign ap_ready = internal_ap_ready;

assign i_fu_190_p2 = (i_0_i_reg_170 + 31'd1);

assign icmp_ln42_fu_185_p2 = (($signed(zext_ln42_fu_181_p1) < $signed(n_read_reg_202)) ? 1'b1 : 1'b0);

assign sorted_0_address0 = zext_ln43_fu_196_p1;

assign sorted_1_address0 = zext_ln43_fu_196_p1;

assign sorted_copy1_frequency_V_address0 = zext_ln43_reg_217;

assign sorted_copy1_frequency_V_d0 = sorted_1_q0;

assign sorted_copy1_value_V_address0 = zext_ln43_reg_217;

assign sorted_copy1_value_V_d0 = sorted_0_q0;

assign sorted_copy2_value_V_address0 = zext_ln43_reg_217;

assign sorted_copy2_value_V_d0 = sorted_0_q0;

assign start_out = real_start;

assign val_assign_out_out1_din = n_read_reg_202;

assign val_assign_out_out_din = n_read_reg_202;

assign zext_ln42_fu_181_p1 = i_0_i_reg_170;

assign zext_ln43_fu_196_p1 = i_0_i_reg_170;

always @ (posedge ap_clk) begin
    zext_ln43_reg_217[63:31] <= 33'b000000000000000000000000000000000;
end

endmodule //Loop_copy_sorted_pro
